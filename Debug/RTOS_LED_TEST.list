
RTOS_LED_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006df8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08006f98  08006f98  00016f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070dc  080070dc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080070dc  080070dc  000170dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070e4  080070e4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070e4  080070e4  000170e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070e8  080070e8  000170e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080070ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144d4  2000001c  08007108  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144f0  08007108  000244f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba1e  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037fb  00000000  00000000  0003ba6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  0003f268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001400  00000000  00000000  000407d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019510  00000000  00000000  00041bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017659  00000000  00000000  0005b0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c086  00000000  00000000  00072739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010e7bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a0c  00000000  00000000  0010e814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006f80 	.word	0x08006f80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000020 	.word	0x20000020
 80001dc:	08006f80 	.word	0x08006f80

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20014448 	.word	0x20014448

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000288:	f000 b96e 	b.w	8000568 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468c      	mov	ip, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	f040 8083 	bne.w	80003ba <__udivmoddi4+0x116>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4617      	mov	r7, r2
 80002b8:	d947      	bls.n	800034a <__udivmoddi4+0xa6>
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	b142      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002c0:	f1c2 0020 	rsb	r0, r2, #32
 80002c4:	fa24 f000 	lsr.w	r0, r4, r0
 80002c8:	4091      	lsls	r1, r2
 80002ca:	4097      	lsls	r7, r2
 80002cc:	ea40 0c01 	orr.w	ip, r0, r1
 80002d0:	4094      	lsls	r4, r2
 80002d2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d6:	0c23      	lsrs	r3, r4, #16
 80002d8:	fbbc f6f8 	udiv	r6, ip, r8
 80002dc:	fa1f fe87 	uxth.w	lr, r7
 80002e0:	fb08 c116 	mls	r1, r8, r6, ip
 80002e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e8:	fb06 f10e 	mul.w	r1, r6, lr
 80002ec:	4299      	cmp	r1, r3
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x60>
 80002f0:	18fb      	adds	r3, r7, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 8119 	bcs.w	800052c <__udivmoddi4+0x288>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 8116 	bls.w	800052c <__udivmoddi4+0x288>
 8000300:	3e02      	subs	r6, #2
 8000302:	443b      	add	r3, r7
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 fe0e 	mul.w	lr, r0, lr
 8000318:	45a6      	cmp	lr, r4
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x8c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000322:	f080 8105 	bcs.w	8000530 <__udivmoddi4+0x28c>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f240 8102 	bls.w	8000530 <__udivmoddi4+0x28c>
 800032c:	3802      	subs	r0, #2
 800032e:	443c      	add	r4, r7
 8000330:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000334:	eba4 040e 	sub.w	r4, r4, lr
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa0>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xaa>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	2a00      	cmp	r2, #0
 8000354:	d150      	bne.n	80003f8 <__udivmoddi4+0x154>
 8000356:	1bcb      	subs	r3, r1, r7
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	fa1f f887 	uxth.w	r8, r7
 8000360:	2601      	movs	r6, #1
 8000362:	fbb3 fcfe 	udiv	ip, r3, lr
 8000366:	0c21      	lsrs	r1, r4, #16
 8000368:	fb0e 331c 	mls	r3, lr, ip, r3
 800036c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000370:	fb08 f30c 	mul.w	r3, r8, ip
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xe4>
 8000378:	1879      	adds	r1, r7, r1
 800037a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0xe2>
 8000380:	428b      	cmp	r3, r1
 8000382:	f200 80e9 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 8000386:	4684      	mov	ip, r0
 8000388:	1ac9      	subs	r1, r1, r3
 800038a:	b2a3      	uxth	r3, r4
 800038c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000390:	fb0e 1110 	mls	r1, lr, r0, r1
 8000394:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000398:	fb08 f800 	mul.w	r8, r8, r0
 800039c:	45a0      	cmp	r8, r4
 800039e:	d907      	bls.n	80003b0 <__udivmoddi4+0x10c>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x10a>
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	f200 80d9 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 80003ae:	4618      	mov	r0, r3
 80003b0:	eba4 0408 	sub.w	r4, r4, r8
 80003b4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b8:	e7bf      	b.n	800033a <__udivmoddi4+0x96>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0x12e>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80b1 	beq.w	8000526 <__udivmoddi4+0x282>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x1cc>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0x140>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80b8 	bhi.w	8000554 <__udivmoddi4+0x2b0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0103 	sbc.w	r1, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	468c      	mov	ip, r1
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0a8      	beq.n	8000344 <__udivmoddi4+0xa0>
 80003f2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f6:	e7a5      	b.n	8000344 <__udivmoddi4+0xa0>
 80003f8:	f1c2 0320 	rsb	r3, r2, #32
 80003fc:	fa20 f603 	lsr.w	r6, r0, r3
 8000400:	4097      	lsls	r7, r2
 8000402:	fa01 f002 	lsl.w	r0, r1, r2
 8000406:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800040a:	40d9      	lsrs	r1, r3
 800040c:	4330      	orrs	r0, r6
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	fbb1 f6fe 	udiv	r6, r1, lr
 8000414:	fa1f f887 	uxth.w	r8, r7
 8000418:	fb0e 1116 	mls	r1, lr, r6, r1
 800041c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000420:	fb06 f108 	mul.w	r1, r6, r8
 8000424:	4299      	cmp	r1, r3
 8000426:	fa04 f402 	lsl.w	r4, r4, r2
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x19c>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000432:	f080 808d 	bcs.w	8000550 <__udivmoddi4+0x2ac>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 808a 	bls.w	8000550 <__udivmoddi4+0x2ac>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b281      	uxth	r1, r0
 8000444:	fbb3 f0fe 	udiv	r0, r3, lr
 8000448:	fb0e 3310 	mls	r3, lr, r0, r3
 800044c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000450:	fb00 f308 	mul.w	r3, r0, r8
 8000454:	428b      	cmp	r3, r1
 8000456:	d907      	bls.n	8000468 <__udivmoddi4+0x1c4>
 8000458:	1879      	adds	r1, r7, r1
 800045a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045e:	d273      	bcs.n	8000548 <__udivmoddi4+0x2a4>
 8000460:	428b      	cmp	r3, r1
 8000462:	d971      	bls.n	8000548 <__udivmoddi4+0x2a4>
 8000464:	3802      	subs	r0, #2
 8000466:	4439      	add	r1, r7
 8000468:	1acb      	subs	r3, r1, r3
 800046a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046e:	e778      	b.n	8000362 <__udivmoddi4+0xbe>
 8000470:	f1c6 0c20 	rsb	ip, r6, #32
 8000474:	fa03 f406 	lsl.w	r4, r3, r6
 8000478:	fa22 f30c 	lsr.w	r3, r2, ip
 800047c:	431c      	orrs	r4, r3
 800047e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800048a:	fa21 f10c 	lsr.w	r1, r1, ip
 800048e:	431f      	orrs	r7, r3
 8000490:	0c3b      	lsrs	r3, r7, #16
 8000492:	fbb1 f9fe 	udiv	r9, r1, lr
 8000496:	fa1f f884 	uxth.w	r8, r4
 800049a:	fb0e 1119 	mls	r1, lr, r9, r1
 800049e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004a2:	fb09 fa08 	mul.w	sl, r9, r8
 80004a6:	458a      	cmp	sl, r1
 80004a8:	fa02 f206 	lsl.w	r2, r2, r6
 80004ac:	fa00 f306 	lsl.w	r3, r0, r6
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x220>
 80004b2:	1861      	adds	r1, r4, r1
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b8:	d248      	bcs.n	800054c <__udivmoddi4+0x2a8>
 80004ba:	458a      	cmp	sl, r1
 80004bc:	d946      	bls.n	800054c <__udivmoddi4+0x2a8>
 80004be:	f1a9 0902 	sub.w	r9, r9, #2
 80004c2:	4421      	add	r1, r4
 80004c4:	eba1 010a 	sub.w	r1, r1, sl
 80004c8:	b2bf      	uxth	r7, r7
 80004ca:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ce:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d6:	fb00 f808 	mul.w	r8, r0, r8
 80004da:	45b8      	cmp	r8, r7
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x24a>
 80004de:	19e7      	adds	r7, r4, r7
 80004e0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e4:	d22e      	bcs.n	8000544 <__udivmoddi4+0x2a0>
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d92c      	bls.n	8000544 <__udivmoddi4+0x2a0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4427      	add	r7, r4
 80004ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f2:	eba7 0708 	sub.w	r7, r7, r8
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	454f      	cmp	r7, r9
 80004fc:	46c6      	mov	lr, r8
 80004fe:	4649      	mov	r1, r9
 8000500:	d31a      	bcc.n	8000538 <__udivmoddi4+0x294>
 8000502:	d017      	beq.n	8000534 <__udivmoddi4+0x290>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x27a>
 8000506:	ebb3 020e 	subs.w	r2, r3, lr
 800050a:	eb67 0701 	sbc.w	r7, r7, r1
 800050e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000512:	40f2      	lsrs	r2, r6
 8000514:	ea4c 0202 	orr.w	r2, ip, r2
 8000518:	40f7      	lsrs	r7, r6
 800051a:	e9c5 2700 	strd	r2, r7, [r5]
 800051e:	2600      	movs	r6, #0
 8000520:	4631      	mov	r1, r6
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e70b      	b.n	8000344 <__udivmoddi4+0xa0>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e9      	b.n	8000304 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fd      	b.n	8000330 <__udivmoddi4+0x8c>
 8000534:	4543      	cmp	r3, r8
 8000536:	d2e5      	bcs.n	8000504 <__udivmoddi4+0x260>
 8000538:	ebb8 0e02 	subs.w	lr, r8, r2
 800053c:	eb69 0104 	sbc.w	r1, r9, r4
 8000540:	3801      	subs	r0, #1
 8000542:	e7df      	b.n	8000504 <__udivmoddi4+0x260>
 8000544:	4608      	mov	r0, r1
 8000546:	e7d2      	b.n	80004ee <__udivmoddi4+0x24a>
 8000548:	4660      	mov	r0, ip
 800054a:	e78d      	b.n	8000468 <__udivmoddi4+0x1c4>
 800054c:	4681      	mov	r9, r0
 800054e:	e7b9      	b.n	80004c4 <__udivmoddi4+0x220>
 8000550:	4666      	mov	r6, ip
 8000552:	e775      	b.n	8000440 <__udivmoddi4+0x19c>
 8000554:	4630      	mov	r0, r6
 8000556:	e74a      	b.n	80003ee <__udivmoddi4+0x14a>
 8000558:	f1ac 0c02 	sub.w	ip, ip, #2
 800055c:	4439      	add	r1, r7
 800055e:	e713      	b.n	8000388 <__udivmoddi4+0xe4>
 8000560:	3802      	subs	r0, #2
 8000562:	443c      	add	r4, r7
 8000564:	e724      	b.n	80003b0 <__udivmoddi4+0x10c>
 8000566:	bf00      	nop

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08c      	sub	sp, #48	; 0x30
 8000570:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fb37 	bl	8000be4 <HAL_Init>

  BaseType_t status;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f88d 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f91f 	bl	80007bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057e:	f000 f8f3 	bl	8000768 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter --> required for SEEGER System View time stamping feature

  DWT_CTRL |= ( 1<< 0 );
 8000582:	4b3a      	ldr	r3, [pc, #232]	; (800066c <main+0x100>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a39      	ldr	r2, [pc, #228]	; (800066c <main+0x100>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6013      	str	r3, [r2, #0]
  SEGGER_UART_init(500000);
 800058e:	4838      	ldr	r0, [pc, #224]	; (8000670 <main+0x104>)
 8000590:	f004 fdfe 	bl	8005190 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000594:	f004 fc2e 	bl	8004df4 <SEGGER_SYSVIEW_Conf>

 // SEGGER_SYSVIEW_Start();

  status = xTaskCreate(led_green_handler, "taskLedGreen", 200, NULL, 2, &task1_handle);
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2302      	movs	r3, #2
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	22c8      	movs	r2, #200	; 0xc8
 80005a6:	4933      	ldr	r1, [pc, #204]	; (8000674 <main+0x108>)
 80005a8:	4833      	ldr	r0, [pc, #204]	; (8000678 <main+0x10c>)
 80005aa:	f002 fd65 	bl	8003078 <xTaskCreate>
 80005ae:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 80005b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d00a      	beq.n	80005cc <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ba:	f383 8811 	msr	BASEPRI, r3
 80005be:	f3bf 8f6f 	isb	sy
 80005c2:	f3bf 8f4f 	dsb	sy
 80005c6:	623b      	str	r3, [r7, #32]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c8:	bf00      	nop
 80005ca:	e7fe      	b.n	80005ca <main+0x5e>

  status = xTaskCreate(led_orange_handler, "taskLedOrange", 200, NULL, 2, &task2_handle);
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	2302      	movs	r3, #2
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2300      	movs	r3, #0
 80005d8:	22c8      	movs	r2, #200	; 0xc8
 80005da:	4928      	ldr	r1, [pc, #160]	; (800067c <main+0x110>)
 80005dc:	4828      	ldr	r0, [pc, #160]	; (8000680 <main+0x114>)
 80005de:	f002 fd4b 	bl	8003078 <xTaskCreate>
 80005e2:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 80005e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d00a      	beq.n	8000600 <main+0x94>
        __asm volatile
 80005ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ee:	f383 8811 	msr	BASEPRI, r3
 80005f2:	f3bf 8f6f 	isb	sy
 80005f6:	f3bf 8f4f 	dsb	sy
 80005fa:	61fb      	str	r3, [r7, #28]
    }
 80005fc:	bf00      	nop
 80005fe:	e7fe      	b.n	80005fe <main+0x92>

  status = xTaskCreate(led_red_handler, "taskLedRed", 200, NULL, 2, &task3_handle);
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	2302      	movs	r3, #2
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2300      	movs	r3, #0
 800060c:	22c8      	movs	r2, #200	; 0xc8
 800060e:	491d      	ldr	r1, [pc, #116]	; (8000684 <main+0x118>)
 8000610:	481d      	ldr	r0, [pc, #116]	; (8000688 <main+0x11c>)
 8000612:	f002 fd31 	bl	8003078 <xTaskCreate>
 8000616:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 8000618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061a:	2b01      	cmp	r3, #1
 800061c:	d00a      	beq.n	8000634 <main+0xc8>
        __asm volatile
 800061e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000622:	f383 8811 	msr	BASEPRI, r3
 8000626:	f3bf 8f6f 	isb	sy
 800062a:	f3bf 8f4f 	dsb	sy
 800062e:	61bb      	str	r3, [r7, #24]
    }
 8000630:	bf00      	nop
 8000632:	e7fe      	b.n	8000632 <main+0xc6>

  status = xTaskCreate(led_blue_handler, "taskLedBlue", 200, NULL, 2, &task4_handle);
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	2302      	movs	r3, #2
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2300      	movs	r3, #0
 800063e:	22c8      	movs	r2, #200	; 0xc8
 8000640:	4912      	ldr	r1, [pc, #72]	; (800068c <main+0x120>)
 8000642:	4813      	ldr	r0, [pc, #76]	; (8000690 <main+0x124>)
 8000644:	f002 fd18 	bl	8003078 <xTaskCreate>
 8000648:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 800064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064c:	2b01      	cmp	r3, #1
 800064e:	d00a      	beq.n	8000666 <main+0xfa>
        __asm volatile
 8000650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000654:	f383 8811 	msr	BASEPRI, r3
 8000658:	f3bf 8f6f 	isb	sy
 800065c:	f3bf 8f4f 	dsb	sy
 8000660:	617b      	str	r3, [r7, #20]
    }
 8000662:	bf00      	nop
 8000664:	e7fe      	b.n	8000664 <main+0xf8>


  //start the free RTOS scheduler

  vTaskStartScheduler();
 8000666:	f002 fe6b 	bl	8003340 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066a:	e7fe      	b.n	800066a <main+0xfe>
 800066c:	e0001000 	.word	0xe0001000
 8000670:	0007a120 	.word	0x0007a120
 8000674:	08006f98 	.word	0x08006f98
 8000678:	080008c9 	.word	0x080008c9
 800067c:	08006fa8 	.word	0x08006fa8
 8000680:	080008e9 	.word	0x080008e9
 8000684:	08006fb8 	.word	0x08006fb8
 8000688:	08000909 	.word	0x08000909
 800068c:	08006fc4 	.word	0x08006fc4
 8000690:	08000929 	.word	0x08000929

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f006 fc64 	bl	8006f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a27      	ldr	r2, [pc, #156]	; (8000760 <SystemClock_Config+0xcc>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <SystemClock_Config+0xd0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006e0:	4a20      	ldr	r2, [pc, #128]	; (8000764 <SystemClock_Config+0xd0>)
 80006e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000708:	2308      	movs	r3, #8
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800070c:	2354      	movs	r3, #84	; 0x54
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000714:	2307      	movs	r3, #7
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fd61 	bl	80011e4 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000728:	f000 f920 	bl	800096c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2102      	movs	r1, #2
 8000748:	4618      	mov	r0, r3
 800074a:	f000 ffc3 	bl	80016d4 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000754:	f000 f90a 	bl	800096c <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	; 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_USART2_UART_Init+0x48>)
 800076e:	4a11      	ldr	r2, [pc, #68]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_USART2_UART_Init+0x48>)
 8000774:	4a10      	ldr	r2, [pc, #64]	; (80007b8 <MX_USART2_UART_Init+0x50>)
 8000776:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <MX_USART2_UART_Init+0x48>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USART2_UART_Init+0x48>)
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <MX_USART2_UART_Init+0x48>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USART2_UART_Init+0x48>)
 800078c:	220c      	movs	r2, #12
 800078e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <MX_USART2_UART_Init+0x48>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USART2_UART_Init+0x48>)
 8000798:	2200      	movs	r2, #0
 800079a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_USART2_UART_Init+0x48>)
 800079e:	f001 fc47 	bl	8002030 <HAL_UART_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 80007a8:	f000 f8e0 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20014378 	.word	0x20014378
 80007b4:	40004400 	.word	0x40004400
 80007b8:	0007a120 	.word	0x0007a120

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b37      	ldr	r3, [pc, #220]	; (80008b4 <MX_GPIO_Init+0xf8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a36      	ldr	r2, [pc, #216]	; (80008b4 <MX_GPIO_Init+0xf8>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b34      	ldr	r3, [pc, #208]	; (80008b4 <MX_GPIO_Init+0xf8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b30      	ldr	r3, [pc, #192]	; (80008b4 <MX_GPIO_Init+0xf8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a2f      	ldr	r2, [pc, #188]	; (80008b4 <MX_GPIO_Init+0xf8>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b2d      	ldr	r3, [pc, #180]	; (80008b4 <MX_GPIO_Init+0xf8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b29      	ldr	r3, [pc, #164]	; (80008b4 <MX_GPIO_Init+0xf8>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a28      	ldr	r2, [pc, #160]	; (80008b4 <MX_GPIO_Init+0xf8>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <MX_GPIO_Init+0xf8>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <MX_GPIO_Init+0xf8>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a21      	ldr	r2, [pc, #132]	; (80008b4 <MX_GPIO_Init+0xf8>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <MX_GPIO_Init+0xf8>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2120      	movs	r1, #32
 8000846:	481c      	ldr	r0, [pc, #112]	; (80008b8 <MX_GPIO_Init+0xfc>)
 8000848:	f000 fc98 	bl	800117c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	f24c 0106 	movw	r1, #49158	; 0xc006
 8000852:	481a      	ldr	r0, [pc, #104]	; (80008bc <MX_GPIO_Init+0x100>)
 8000854:	f000 fc92 	bl	800117c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_GPIO_Init+0x104>)
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	4815      	ldr	r0, [pc, #84]	; (80008c4 <MX_GPIO_Init+0x108>)
 800086e:	f000 fb01 	bl	8000e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000872:	2320      	movs	r3, #32
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	480b      	ldr	r0, [pc, #44]	; (80008b8 <MX_GPIO_Init+0xfc>)
 800088a:	f000 faf3 	bl	8000e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15;
 800088e:	f24c 0306 	movw	r3, #49158	; 0xc006
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_GPIO_Init+0x100>)
 80008a8:	f000 fae4 	bl	8000e74 <HAL_GPIO_Init>

}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	; 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40020000 	.word	0x40020000
 80008bc:	40020400 	.word	0x40020400
 80008c0:	10210000 	.word	0x10210000
 80008c4:	40020800 	.word	0x40020800

080008c8 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler (void* parrameters)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	while (1)
	{

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80008d0:	2104      	movs	r1, #4
 80008d2:	4804      	ldr	r0, [pc, #16]	; (80008e4 <led_green_handler+0x1c>)
 80008d4:	f000 fc6b 	bl	80011ae <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80008d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008dc:	f000 f9c4 	bl	8000c68 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80008e0:	e7f6      	b.n	80008d0 <led_green_handler+0x8>
 80008e2:	bf00      	nop
 80008e4:	40020400 	.word	0x40020400

080008e8 <led_orange_handler>:
	}

}

static void led_orange_handler (void* parrameters)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	while (1)
	{

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80008f0:	2102      	movs	r1, #2
 80008f2:	4804      	ldr	r0, [pc, #16]	; (8000904 <led_orange_handler+0x1c>)
 80008f4:	f000 fc5b 	bl	80011ae <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 80008f8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80008fc:	f000 f9b4 	bl	8000c68 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000900:	e7f6      	b.n	80008f0 <led_orange_handler+0x8>
 8000902:	bf00      	nop
 8000904:	40020400 	.word	0x40020400

08000908 <led_red_handler>:
	}
}

static void led_red_handler (void* parrameters)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	while (1)
	{

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8000910:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000914:	4803      	ldr	r0, [pc, #12]	; (8000924 <led_red_handler+0x1c>)
 8000916:	f000 fc4a 	bl	80011ae <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 800091a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800091e:	f000 f9a3 	bl	8000c68 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8000922:	e7f5      	b.n	8000910 <led_red_handler+0x8>
 8000924:	40020400 	.word	0x40020400

08000928 <led_blue_handler>:
	}
}

static void led_blue_handler (void* parrameters)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000930:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000934:	4803      	ldr	r0, [pc, #12]	; (8000944 <led_blue_handler+0x1c>)
 8000936:	f000 fc3a 	bl	80011ae <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 800093a:	20c8      	movs	r0, #200	; 0xc8
 800093c:	f000 f994 	bl	8000c68 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000940:	e7f6      	b.n	8000930 <led_blue_handler+0x8>
 8000942:	bf00      	nop
 8000944:	40020400 	.word	0x40020400

08000948 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d101      	bne.n	800095e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095a:	f000 f965 	bl	8000c28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40000c00 	.word	0x40000c00

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <HAL_MspInit+0x4c>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80009b6:	f003 fe67 	bl	8004688 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a21      	ldr	r2, [pc, #132]	; (8000a6c <HAL_UART_MspInit+0xa4>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d13b      	bne.n	8000a62 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <HAL_UART_MspInit+0xa8>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a1f      	ldr	r2, [pc, #124]	; (8000a70 <HAL_UART_MspInit+0xa8>)
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <HAL_UART_MspInit+0xa8>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <HAL_UART_MspInit+0xa8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a18      	ldr	r2, [pc, #96]	; (8000a70 <HAL_UART_MspInit+0xa8>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <HAL_UART_MspInit+0xa8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin;
 8000a22:	2304      	movs	r3, #4
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a32:	2307      	movs	r3, #7
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <HAL_UART_MspInit+0xac>)
 8000a3e:	f000 fa19 	bl	8000e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_Pin;
 8000a42:	2308      	movs	r3, #8
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a52:	2307      	movs	r3, #7
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <HAL_UART_MspInit+0xac>)
 8000a5e:	f000 fa09 	bl	8000e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	; 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40004400 	.word	0x40004400
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020000 	.word	0x40020000

08000a78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08c      	sub	sp, #48	; 0x30
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	2032      	movs	r0, #50	; 0x32
 8000a8e:	f000 f9c7 	bl	8000e20 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000a92:	2032      	movs	r0, #50	; 0x32
 8000a94:	f000 f9e0 	bl	8000e58 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <HAL_InitTick+0xa4>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	4a1e      	ldr	r2, [pc, #120]	; (8000b1c <HAL_InitTick+0xa4>)
 8000aa2:	f043 0308 	orr.w	r3, r3, #8
 8000aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <HAL_InitTick+0xa4>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	f003 0308 	and.w	r3, r3, #8
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ab4:	f107 0210 	add.w	r2, r7, #16
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4611      	mov	r1, r2
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 f804 	bl	8001acc <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ac4:	f000 ffda 	bl	8001a7c <HAL_RCC_GetPCLK1Freq>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad0:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <HAL_InitTick+0xa8>)
 8000ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad6:	0c9b      	lsrs	r3, r3, #18
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <HAL_InitTick+0xac>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <HAL_InitTick+0xb0>)
 8000ae0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_InitTick+0xac>)
 8000ae4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ae8:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000aea:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <HAL_InitTick+0xac>)
 8000aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aee:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <HAL_InitTick+0xac>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HAL_InitTick+0xac>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000afc:	4809      	ldr	r0, [pc, #36]	; (8000b24 <HAL_InitTick+0xac>)
 8000afe:	f001 f817 	bl	8001b30 <HAL_TIM_Base_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d104      	bne.n	8000b12 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000b08:	4806      	ldr	r0, [pc, #24]	; (8000b24 <HAL_InitTick+0xac>)
 8000b0a:	f001 f86b 	bl	8001be4 <HAL_TIM_Base_Start_IT>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	e000      	b.n	8000b14 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3730      	adds	r7, #48	; 0x30
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	431bde83 	.word	0x431bde83
 8000b24:	200143bc 	.word	0x200143bc
 8000b28:	40000c00 	.word	0x40000c00

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <NMI_Handler+0x4>

08000b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <MemManage_Handler+0x4>

08000b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <TIM5_IRQHandler+0x10>)
 8000b5e:	f001 f8a3 	bl	8001ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200143bc 	.word	0x200143bc

08000b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <SystemInit+0x20>)
 8000b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b76:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <SystemInit+0x20>)
 8000b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b96:	490e      	ldr	r1, [pc, #56]	; (8000bd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b98:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0b      	ldr	r2, [pc, #44]	; (8000bd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bac:	4c0b      	ldr	r4, [pc, #44]	; (8000bdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bba:	f7ff ffd7 	bl	8000b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f006 f997 	bl	8006ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bc2:	f7ff fcd3 	bl	800056c <main>
  bx  lr    
 8000bc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bc8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000bd4:	080070ec 	.word	0x080070ec
  ldr r2, =_sbss
 8000bd8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000bdc:	200144f0 	.word	0x200144f0

08000be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC_IRQHandler>
	...

08000be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <HAL_Init+0x40>)
 8000bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <HAL_Init+0x40>)
 8000bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_Init+0x40>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_Init+0x40>)
 8000c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 f8fc 	bl	8000e0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff ff30 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c18:	f7ff feae 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023c00 	.word	0x40023c00

08000c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_IncTick+0x20>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_IncTick+0x24>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4413      	add	r3, r2
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <HAL_IncTick+0x24>)
 8000c3a:	6013      	str	r3, [r2, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	20014404 	.word	0x20014404

08000c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return uwTick;
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <HAL_GetTick+0x14>)
 8000c56:	681b      	ldr	r3, [r3, #0]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20014404 	.word	0x20014404

08000c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c70:	f7ff ffee 	bl	8000c50 <HAL_GetTick>
 8000c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c80:	d005      	beq.n	8000c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <HAL_Delay+0x44>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	461a      	mov	r2, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c8e:	bf00      	nop
 8000c90:	f7ff ffde 	bl	8000c50 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d8f7      	bhi.n	8000c90 <HAL_Delay+0x28>
  {
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000008 	.word	0x20000008

08000cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	60d3      	str	r3, [r2, #12]
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <__NVIC_GetPriorityGrouping+0x18>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	f003 0307 	and.w	r3, r3, #7
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db0b      	blt.n	8000d3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f003 021f 	and.w	r2, r3, #31
 8000d2c:	4907      	ldr	r1, [pc, #28]	; (8000d4c <__NVIC_EnableIRQ+0x38>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	095b      	lsrs	r3, r3, #5
 8000d34:	2001      	movs	r0, #1
 8000d36:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	db0a      	blt.n	8000d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	490c      	ldr	r1, [pc, #48]	; (8000d9c <__NVIC_SetPriority+0x4c>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	0112      	lsls	r2, r2, #4
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	440b      	add	r3, r1
 8000d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d78:	e00a      	b.n	8000d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4908      	ldr	r1, [pc, #32]	; (8000da0 <__NVIC_SetPriority+0x50>)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	f003 030f 	and.w	r3, r3, #15
 8000d86:	3b04      	subs	r3, #4
 8000d88:	0112      	lsls	r2, r2, #4
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	761a      	strb	r2, [r3, #24]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f1c3 0307 	rsb	r3, r3, #7
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	bf28      	it	cs
 8000dc2:	2304      	movcs	r3, #4
 8000dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	2b06      	cmp	r3, #6
 8000dcc:	d902      	bls.n	8000dd4 <NVIC_EncodePriority+0x30>
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3b03      	subs	r3, #3
 8000dd2:	e000      	b.n	8000dd6 <NVIC_EncodePriority+0x32>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43da      	mvns	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	401a      	ands	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	43d9      	mvns	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	4313      	orrs	r3, r2
         );
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3724      	adds	r7, #36	; 0x24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ff4c 	bl	8000cb0 <__NVIC_SetPriorityGrouping>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e32:	f7ff ff61 	bl	8000cf8 <__NVIC_GetPriorityGrouping>
 8000e36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	68b9      	ldr	r1, [r7, #8]
 8000e3c:	6978      	ldr	r0, [r7, #20]
 8000e3e:	f7ff ffb1 	bl	8000da4 <NVIC_EncodePriority>
 8000e42:	4602      	mov	r2, r0
 8000e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff80 	bl	8000d50 <__NVIC_SetPriority>
}
 8000e50:	bf00      	nop
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff54 	bl	8000d14 <__NVIC_EnableIRQ>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
 8000e8e:	e159      	b.n	8001144 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e90:	2201      	movs	r2, #1
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	f040 8148 	bne.w	800113e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d005      	beq.n	8000ec6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d130      	bne.n	8000f28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	68da      	ldr	r2, [r3, #12]
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000efc:	2201      	movs	r2, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	091b      	lsrs	r3, r3, #4
 8000f12:	f003 0201 	and.w	r2, r3, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d017      	beq.n	8000f64 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2203      	movs	r2, #3
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d123      	bne.n	8000fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	08da      	lsrs	r2, r3, #3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3208      	adds	r2, #8
 8000f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	f003 0307 	and.w	r3, r3, #7
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	220f      	movs	r2, #15
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	691a      	ldr	r2, [r3, #16]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	08da      	lsrs	r2, r3, #3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3208      	adds	r2, #8
 8000fb2:	69b9      	ldr	r1, [r7, #24]
 8000fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0203 	and.w	r2, r3, #3
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f000 80a2 	beq.w	800113e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b57      	ldr	r3, [pc, #348]	; (800115c <HAL_GPIO_Init+0x2e8>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a56      	ldr	r2, [pc, #344]	; (800115c <HAL_GPIO_Init+0x2e8>)
 8001004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b54      	ldr	r3, [pc, #336]	; (800115c <HAL_GPIO_Init+0x2e8>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001016:	4a52      	ldr	r2, [pc, #328]	; (8001160 <HAL_GPIO_Init+0x2ec>)
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	3302      	adds	r3, #2
 800101e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	220f      	movs	r2, #15
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a49      	ldr	r2, [pc, #292]	; (8001164 <HAL_GPIO_Init+0x2f0>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d019      	beq.n	8001076 <HAL_GPIO_Init+0x202>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a48      	ldr	r2, [pc, #288]	; (8001168 <HAL_GPIO_Init+0x2f4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d013      	beq.n	8001072 <HAL_GPIO_Init+0x1fe>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a47      	ldr	r2, [pc, #284]	; (800116c <HAL_GPIO_Init+0x2f8>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d00d      	beq.n	800106e <HAL_GPIO_Init+0x1fa>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a46      	ldr	r2, [pc, #280]	; (8001170 <HAL_GPIO_Init+0x2fc>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d007      	beq.n	800106a <HAL_GPIO_Init+0x1f6>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a45      	ldr	r2, [pc, #276]	; (8001174 <HAL_GPIO_Init+0x300>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d101      	bne.n	8001066 <HAL_GPIO_Init+0x1f2>
 8001062:	2304      	movs	r3, #4
 8001064:	e008      	b.n	8001078 <HAL_GPIO_Init+0x204>
 8001066:	2307      	movs	r3, #7
 8001068:	e006      	b.n	8001078 <HAL_GPIO_Init+0x204>
 800106a:	2303      	movs	r3, #3
 800106c:	e004      	b.n	8001078 <HAL_GPIO_Init+0x204>
 800106e:	2302      	movs	r3, #2
 8001070:	e002      	b.n	8001078 <HAL_GPIO_Init+0x204>
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <HAL_GPIO_Init+0x204>
 8001076:	2300      	movs	r3, #0
 8001078:	69fa      	ldr	r2, [r7, #28]
 800107a:	f002 0203 	and.w	r2, r2, #3
 800107e:	0092      	lsls	r2, r2, #2
 8001080:	4093      	lsls	r3, r2
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001088:	4935      	ldr	r1, [pc, #212]	; (8001160 <HAL_GPIO_Init+0x2ec>)
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001096:	4b38      	ldr	r3, [pc, #224]	; (8001178 <HAL_GPIO_Init+0x304>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ba:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <HAL_GPIO_Init+0x304>)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010c0:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <HAL_GPIO_Init+0x304>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e4:	4a24      	ldr	r2, [pc, #144]	; (8001178 <HAL_GPIO_Init+0x304>)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ea:	4b23      	ldr	r3, [pc, #140]	; (8001178 <HAL_GPIO_Init+0x304>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800110e:	4a1a      	ldr	r2, [pc, #104]	; (8001178 <HAL_GPIO_Init+0x304>)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <HAL_GPIO_Init+0x304>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001138:	4a0f      	ldr	r2, [pc, #60]	; (8001178 <HAL_GPIO_Init+0x304>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3301      	adds	r3, #1
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	2b0f      	cmp	r3, #15
 8001148:	f67f aea2 	bls.w	8000e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3724      	adds	r7, #36	; 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800
 8001160:	40013800 	.word	0x40013800
 8001164:	40020000 	.word	0x40020000
 8001168:	40020400 	.word	0x40020400
 800116c:	40020800 	.word	0x40020800
 8001170:	40020c00 	.word	0x40020c00
 8001174:	40021000 	.word	0x40021000
 8001178:	40013c00 	.word	0x40013c00

0800117c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]
 8001188:	4613      	mov	r3, r2
 800118a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800118c:	787b      	ldrb	r3, [r7, #1]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001192:	887a      	ldrh	r2, [r7, #2]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001198:	e003      	b.n	80011a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	041a      	lsls	r2, r3, #16
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	619a      	str	r2, [r3, #24]
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b085      	sub	sp, #20
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	460b      	mov	r3, r1
 80011b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011c0:	887a      	ldrh	r2, [r7, #2]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4013      	ands	r3, r2
 80011c6:	041a      	lsls	r2, r3, #16
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	43d9      	mvns	r1, r3
 80011cc:	887b      	ldrh	r3, [r7, #2]
 80011ce:	400b      	ands	r3, r1
 80011d0:	431a      	orrs	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	619a      	str	r2, [r3, #24]
}
 80011d6:	bf00      	nop
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e264      	b.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d075      	beq.n	80012ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001202:	4ba3      	ldr	r3, [pc, #652]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b04      	cmp	r3, #4
 800120c:	d00c      	beq.n	8001228 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120e:	4ba0      	ldr	r3, [pc, #640]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001216:	2b08      	cmp	r3, #8
 8001218:	d112      	bne.n	8001240 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800121a:	4b9d      	ldr	r3, [pc, #628]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001226:	d10b      	bne.n	8001240 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001228:	4b99      	ldr	r3, [pc, #612]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d05b      	beq.n	80012ec <HAL_RCC_OscConfig+0x108>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d157      	bne.n	80012ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e23f      	b.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001248:	d106      	bne.n	8001258 <HAL_RCC_OscConfig+0x74>
 800124a:	4b91      	ldr	r3, [pc, #580]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a90      	ldr	r2, [pc, #576]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	e01d      	b.n	8001294 <HAL_RCC_OscConfig+0xb0>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001260:	d10c      	bne.n	800127c <HAL_RCC_OscConfig+0x98>
 8001262:	4b8b      	ldr	r3, [pc, #556]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a8a      	ldr	r2, [pc, #552]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	4b88      	ldr	r3, [pc, #544]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a87      	ldr	r2, [pc, #540]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e00b      	b.n	8001294 <HAL_RCC_OscConfig+0xb0>
 800127c:	4b84      	ldr	r3, [pc, #528]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a83      	ldr	r2, [pc, #524]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b81      	ldr	r3, [pc, #516]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a80      	ldr	r2, [pc, #512]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 800128e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d013      	beq.n	80012c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fcd8 	bl	8000c50 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a4:	f7ff fcd4 	bl	8000c50 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b64      	cmp	r3, #100	; 0x64
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e204      	b.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b6:	4b76      	ldr	r3, [pc, #472]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f0      	beq.n	80012a4 <HAL_RCC_OscConfig+0xc0>
 80012c2:	e014      	b.n	80012ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fcc4 	bl	8000c50 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff fcc0 	bl	8000c50 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	; 0x64
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e1f0      	b.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012de:	4b6c      	ldr	r3, [pc, #432]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0xe8>
 80012ea:	e000      	b.n	80012ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d063      	beq.n	80013c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012fa:	4b65      	ldr	r3, [pc, #404]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00b      	beq.n	800131e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001306:	4b62      	ldr	r3, [pc, #392]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800130e:	2b08      	cmp	r3, #8
 8001310:	d11c      	bne.n	800134c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001312:	4b5f      	ldr	r3, [pc, #380]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d116      	bne.n	800134c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131e:	4b5c      	ldr	r3, [pc, #368]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d005      	beq.n	8001336 <HAL_RCC_OscConfig+0x152>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d001      	beq.n	8001336 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e1c4      	b.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001336:	4b56      	ldr	r3, [pc, #344]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	4952      	ldr	r1, [pc, #328]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001346:	4313      	orrs	r3, r2
 8001348:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134a:	e03a      	b.n	80013c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d020      	beq.n	8001396 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001354:	4b4f      	ldr	r3, [pc, #316]	; (8001494 <HAL_RCC_OscConfig+0x2b0>)
 8001356:	2201      	movs	r2, #1
 8001358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135a:	f7ff fc79 	bl	8000c50 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001362:	f7ff fc75 	bl	8000c50 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e1a5      	b.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001374:	4b46      	ldr	r3, [pc, #280]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001380:	4b43      	ldr	r3, [pc, #268]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	4940      	ldr	r1, [pc, #256]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	4313      	orrs	r3, r2
 8001392:	600b      	str	r3, [r1, #0]
 8001394:	e015      	b.n	80013c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001396:	4b3f      	ldr	r3, [pc, #252]	; (8001494 <HAL_RCC_OscConfig+0x2b0>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139c:	f7ff fc58 	bl	8000c50 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a4:	f7ff fc54 	bl	8000c50 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e184      	b.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b6:	4b36      	ldr	r3, [pc, #216]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d030      	beq.n	8001430 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d016      	beq.n	8001404 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d6:	4b30      	ldr	r3, [pc, #192]	; (8001498 <HAL_RCC_OscConfig+0x2b4>)
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013dc:	f7ff fc38 	bl	8000c50 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e4:	f7ff fc34 	bl	8000c50 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e164      	b.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f6:	4b26      	ldr	r3, [pc, #152]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0x200>
 8001402:	e015      	b.n	8001430 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001404:	4b24      	ldr	r3, [pc, #144]	; (8001498 <HAL_RCC_OscConfig+0x2b4>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140a:	f7ff fc21 	bl	8000c50 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001412:	f7ff fc1d 	bl	8000c50 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e14d      	b.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f0      	bne.n	8001412 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80a0 	beq.w	800157e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10f      	bne.n	800146e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <HAL_RCC_OscConfig+0x2ac>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800146a:	2301      	movs	r3, #1
 800146c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_RCC_OscConfig+0x2b8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001476:	2b00      	cmp	r3, #0
 8001478:	d121      	bne.n	80014be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <HAL_RCC_OscConfig+0x2b8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a07      	ldr	r2, [pc, #28]	; (800149c <HAL_RCC_OscConfig+0x2b8>)
 8001480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001486:	f7ff fbe3 	bl	8000c50 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148c:	e011      	b.n	80014b2 <HAL_RCC_OscConfig+0x2ce>
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	42470000 	.word	0x42470000
 8001498:	42470e80 	.word	0x42470e80
 800149c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a0:	f7ff fbd6 	bl	8000c50 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e106      	b.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b2:	4b85      	ldr	r3, [pc, #532]	; (80016c8 <HAL_RCC_OscConfig+0x4e4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d106      	bne.n	80014d4 <HAL_RCC_OscConfig+0x2f0>
 80014c6:	4b81      	ldr	r3, [pc, #516]	; (80016cc <HAL_RCC_OscConfig+0x4e8>)
 80014c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ca:	4a80      	ldr	r2, [pc, #512]	; (80016cc <HAL_RCC_OscConfig+0x4e8>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6713      	str	r3, [r2, #112]	; 0x70
 80014d2:	e01c      	b.n	800150e <HAL_RCC_OscConfig+0x32a>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b05      	cmp	r3, #5
 80014da:	d10c      	bne.n	80014f6 <HAL_RCC_OscConfig+0x312>
 80014dc:	4b7b      	ldr	r3, [pc, #492]	; (80016cc <HAL_RCC_OscConfig+0x4e8>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e0:	4a7a      	ldr	r2, [pc, #488]	; (80016cc <HAL_RCC_OscConfig+0x4e8>)
 80014e2:	f043 0304 	orr.w	r3, r3, #4
 80014e6:	6713      	str	r3, [r2, #112]	; 0x70
 80014e8:	4b78      	ldr	r3, [pc, #480]	; (80016cc <HAL_RCC_OscConfig+0x4e8>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ec:	4a77      	ldr	r2, [pc, #476]	; (80016cc <HAL_RCC_OscConfig+0x4e8>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6713      	str	r3, [r2, #112]	; 0x70
 80014f4:	e00b      	b.n	800150e <HAL_RCC_OscConfig+0x32a>
 80014f6:	4b75      	ldr	r3, [pc, #468]	; (80016cc <HAL_RCC_OscConfig+0x4e8>)
 80014f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fa:	4a74      	ldr	r2, [pc, #464]	; (80016cc <HAL_RCC_OscConfig+0x4e8>)
 80014fc:	f023 0301 	bic.w	r3, r3, #1
 8001500:	6713      	str	r3, [r2, #112]	; 0x70
 8001502:	4b72      	ldr	r3, [pc, #456]	; (80016cc <HAL_RCC_OscConfig+0x4e8>)
 8001504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001506:	4a71      	ldr	r2, [pc, #452]	; (80016cc <HAL_RCC_OscConfig+0x4e8>)
 8001508:	f023 0304 	bic.w	r3, r3, #4
 800150c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d015      	beq.n	8001542 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001516:	f7ff fb9b 	bl	8000c50 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151c:	e00a      	b.n	8001534 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800151e:	f7ff fb97 	bl	8000c50 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	f241 3288 	movw	r2, #5000	; 0x1388
 800152c:	4293      	cmp	r3, r2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e0c5      	b.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001534:	4b65      	ldr	r3, [pc, #404]	; (80016cc <HAL_RCC_OscConfig+0x4e8>)
 8001536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0ee      	beq.n	800151e <HAL_RCC_OscConfig+0x33a>
 8001540:	e014      	b.n	800156c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001542:	f7ff fb85 	bl	8000c50 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001548:	e00a      	b.n	8001560 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800154a:	f7ff fb81 	bl	8000c50 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f241 3288 	movw	r2, #5000	; 0x1388
 8001558:	4293      	cmp	r3, r2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e0af      	b.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001560:	4b5a      	ldr	r3, [pc, #360]	; (80016cc <HAL_RCC_OscConfig+0x4e8>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1ee      	bne.n	800154a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800156c:	7dfb      	ldrb	r3, [r7, #23]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d105      	bne.n	800157e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001572:	4b56      	ldr	r3, [pc, #344]	; (80016cc <HAL_RCC_OscConfig+0x4e8>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a55      	ldr	r2, [pc, #340]	; (80016cc <HAL_RCC_OscConfig+0x4e8>)
 8001578:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 809b 	beq.w	80016be <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001588:	4b50      	ldr	r3, [pc, #320]	; (80016cc <HAL_RCC_OscConfig+0x4e8>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 030c 	and.w	r3, r3, #12
 8001590:	2b08      	cmp	r3, #8
 8001592:	d05c      	beq.n	800164e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d141      	bne.n	8001620 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159c:	4b4c      	ldr	r3, [pc, #304]	; (80016d0 <HAL_RCC_OscConfig+0x4ec>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a2:	f7ff fb55 	bl	8000c50 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015aa:	f7ff fb51 	bl	8000c50 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e081      	b.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015bc:	4b43      	ldr	r3, [pc, #268]	; (80016cc <HAL_RCC_OscConfig+0x4e8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f0      	bne.n	80015aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69da      	ldr	r2, [r3, #28]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	019b      	lsls	r3, r3, #6
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	085b      	lsrs	r3, r3, #1
 80015e0:	3b01      	subs	r3, #1
 80015e2:	041b      	lsls	r3, r3, #16
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ea:	061b      	lsls	r3, r3, #24
 80015ec:	4937      	ldr	r1, [pc, #220]	; (80016cc <HAL_RCC_OscConfig+0x4e8>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f2:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <HAL_RCC_OscConfig+0x4ec>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fb2a 	bl	8000c50 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001600:	f7ff fb26 	bl	8000c50 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e056      	b.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001612:	4b2e      	ldr	r3, [pc, #184]	; (80016cc <HAL_RCC_OscConfig+0x4e8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f0      	beq.n	8001600 <HAL_RCC_OscConfig+0x41c>
 800161e:	e04e      	b.n	80016be <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001620:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <HAL_RCC_OscConfig+0x4ec>)
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001626:	f7ff fb13 	bl	8000c50 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800162e:	f7ff fb0f 	bl	8000c50 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e03f      	b.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <HAL_RCC_OscConfig+0x4e8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f0      	bne.n	800162e <HAL_RCC_OscConfig+0x44a>
 800164c:	e037      	b.n	80016be <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e032      	b.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800165a:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <HAL_RCC_OscConfig+0x4e8>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d028      	beq.n	80016ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001672:	429a      	cmp	r2, r3
 8001674:	d121      	bne.n	80016ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001680:	429a      	cmp	r2, r3
 8001682:	d11a      	bne.n	80016ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800168a:	4013      	ands	r3, r2
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001690:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001692:	4293      	cmp	r3, r2
 8001694:	d111      	bne.n	80016ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a0:	085b      	lsrs	r3, r3, #1
 80016a2:	3b01      	subs	r3, #1
 80016a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d107      	bne.n	80016ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d001      	beq.n	80016be <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40007000 	.word	0x40007000
 80016cc:	40023800 	.word	0x40023800
 80016d0:	42470060 	.word	0x42470060

080016d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0cc      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016e8:	4b68      	ldr	r3, [pc, #416]	; (800188c <HAL_RCC_ClockConfig+0x1b8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d90c      	bls.n	8001710 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f6:	4b65      	ldr	r3, [pc, #404]	; (800188c <HAL_RCC_ClockConfig+0x1b8>)
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fe:	4b63      	ldr	r3, [pc, #396]	; (800188c <HAL_RCC_ClockConfig+0x1b8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e0b8      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d020      	beq.n	800175e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001728:	4b59      	ldr	r3, [pc, #356]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	4a58      	ldr	r2, [pc, #352]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001732:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001740:	4b53      	ldr	r3, [pc, #332]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	4a52      	ldr	r2, [pc, #328]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800174a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800174c:	4b50      	ldr	r3, [pc, #320]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	494d      	ldr	r1, [pc, #308]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	4313      	orrs	r3, r2
 800175c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d044      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d107      	bne.n	8001782 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001772:	4b47      	ldr	r3, [pc, #284]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d119      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e07f      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d003      	beq.n	8001792 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800178e:	2b03      	cmp	r3, #3
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001792:	4b3f      	ldr	r3, [pc, #252]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e06f      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a2:	4b3b      	ldr	r3, [pc, #236]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e067      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017b2:	4b37      	ldr	r3, [pc, #220]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f023 0203 	bic.w	r2, r3, #3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	4934      	ldr	r1, [pc, #208]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017c4:	f7ff fa44 	bl	8000c50 <HAL_GetTick>
 80017c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ca:	e00a      	b.n	80017e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017cc:	f7ff fa40 	bl	8000c50 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017da:	4293      	cmp	r3, r2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e04f      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e2:	4b2b      	ldr	r3, [pc, #172]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 020c 	and.w	r2, r3, #12
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d1eb      	bne.n	80017cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017f4:	4b25      	ldr	r3, [pc, #148]	; (800188c <HAL_RCC_ClockConfig+0x1b8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d20c      	bcs.n	800181c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <HAL_RCC_ClockConfig+0x1b8>)
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180a:	4b20      	ldr	r3, [pc, #128]	; (800188c <HAL_RCC_ClockConfig+0x1b8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d001      	beq.n	800181c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e032      	b.n	8001882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d008      	beq.n	800183a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001828:	4b19      	ldr	r3, [pc, #100]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	4916      	ldr	r1, [pc, #88]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	4313      	orrs	r3, r2
 8001838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b00      	cmp	r3, #0
 8001844:	d009      	beq.n	800185a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001846:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	490e      	ldr	r1, [pc, #56]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	4313      	orrs	r3, r2
 8001858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800185a:	f000 f821 	bl	80018a0 <HAL_RCC_GetSysClockFreq>
 800185e:	4602      	mov	r2, r0
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	490a      	ldr	r1, [pc, #40]	; (8001894 <HAL_RCC_ClockConfig+0x1c0>)
 800186c:	5ccb      	ldrb	r3, [r1, r3]
 800186e:	fa22 f303 	lsr.w	r3, r2, r3
 8001872:	4a09      	ldr	r2, [pc, #36]	; (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 8001874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_RCC_ClockConfig+0x1c8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff f8fc 	bl	8000a78 <HAL_InitTick>

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023c00 	.word	0x40023c00
 8001890:	40023800 	.word	0x40023800
 8001894:	080070ac 	.word	0x080070ac
 8001898:	20000000 	.word	0x20000000
 800189c:	20000004 	.word	0x20000004

080018a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	2300      	movs	r3, #0
 80018b2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018b8:	4b67      	ldr	r3, [pc, #412]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d00d      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x40>
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	f200 80bd 	bhi.w	8001a44 <HAL_RCC_GetSysClockFreq+0x1a4>
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <HAL_RCC_GetSysClockFreq+0x34>
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	d003      	beq.n	80018da <HAL_RCC_GetSysClockFreq+0x3a>
 80018d2:	e0b7      	b.n	8001a44 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018d4:	4b61      	ldr	r3, [pc, #388]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018d6:	60bb      	str	r3, [r7, #8]
       break;
 80018d8:	e0b7      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018da:	4b61      	ldr	r3, [pc, #388]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80018dc:	60bb      	str	r3, [r7, #8]
      break;
 80018de:	e0b4      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018e0:	4b5d      	ldr	r3, [pc, #372]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ea:	4b5b      	ldr	r3, [pc, #364]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d04d      	beq.n	8001992 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f6:	4b58      	ldr	r3, [pc, #352]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	099b      	lsrs	r3, r3, #6
 80018fc:	461a      	mov	r2, r3
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001906:	f04f 0100 	mov.w	r1, #0
 800190a:	ea02 0800 	and.w	r8, r2, r0
 800190e:	ea03 0901 	and.w	r9, r3, r1
 8001912:	4640      	mov	r0, r8
 8001914:	4649      	mov	r1, r9
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	014b      	lsls	r3, r1, #5
 8001920:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001924:	0142      	lsls	r2, r0, #5
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	ebb0 0008 	subs.w	r0, r0, r8
 800192e:	eb61 0109 	sbc.w	r1, r1, r9
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	018b      	lsls	r3, r1, #6
 800193c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001940:	0182      	lsls	r2, r0, #6
 8001942:	1a12      	subs	r2, r2, r0
 8001944:	eb63 0301 	sbc.w	r3, r3, r1
 8001948:	f04f 0000 	mov.w	r0, #0
 800194c:	f04f 0100 	mov.w	r1, #0
 8001950:	00d9      	lsls	r1, r3, #3
 8001952:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001956:	00d0      	lsls	r0, r2, #3
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	eb12 0208 	adds.w	r2, r2, r8
 8001960:	eb43 0309 	adc.w	r3, r3, r9
 8001964:	f04f 0000 	mov.w	r0, #0
 8001968:	f04f 0100 	mov.w	r1, #0
 800196c:	0259      	lsls	r1, r3, #9
 800196e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001972:	0250      	lsls	r0, r2, #9
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	461a      	mov	r2, r3
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	f7fe fc76 	bl	8000274 <__aeabi_uldivmod>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4613      	mov	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	e04a      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001992:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	099b      	lsrs	r3, r3, #6
 8001998:	461a      	mov	r2, r3
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019a2:	f04f 0100 	mov.w	r1, #0
 80019a6:	ea02 0400 	and.w	r4, r2, r0
 80019aa:	ea03 0501 	and.w	r5, r3, r1
 80019ae:	4620      	mov	r0, r4
 80019b0:	4629      	mov	r1, r5
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	014b      	lsls	r3, r1, #5
 80019bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019c0:	0142      	lsls	r2, r0, #5
 80019c2:	4610      	mov	r0, r2
 80019c4:	4619      	mov	r1, r3
 80019c6:	1b00      	subs	r0, r0, r4
 80019c8:	eb61 0105 	sbc.w	r1, r1, r5
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	018b      	lsls	r3, r1, #6
 80019d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019da:	0182      	lsls	r2, r0, #6
 80019dc:	1a12      	subs	r2, r2, r0
 80019de:	eb63 0301 	sbc.w	r3, r3, r1
 80019e2:	f04f 0000 	mov.w	r0, #0
 80019e6:	f04f 0100 	mov.w	r1, #0
 80019ea:	00d9      	lsls	r1, r3, #3
 80019ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019f0:	00d0      	lsls	r0, r2, #3
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	1912      	adds	r2, r2, r4
 80019f8:	eb45 0303 	adc.w	r3, r5, r3
 80019fc:	f04f 0000 	mov.w	r0, #0
 8001a00:	f04f 0100 	mov.w	r1, #0
 8001a04:	0299      	lsls	r1, r3, #10
 8001a06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a0a:	0290      	lsls	r0, r2, #10
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	461a      	mov	r2, r3
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	f7fe fc2a 	bl	8000274 <__aeabi_uldivmod>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4613      	mov	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	0c1b      	lsrs	r3, r3, #16
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	3301      	adds	r3, #1
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a40:	60bb      	str	r3, [r7, #8]
      break;
 8001a42:	e002      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a46:	60bb      	str	r3, [r7, #8]
      break;
 8001a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a4a:	68bb      	ldr	r3, [r7, #8]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	00f42400 	.word	0x00f42400
 8001a60:	007a1200 	.word	0x007a1200

08001a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a68:	4b03      	ldr	r3, [pc, #12]	; (8001a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000000 	.word	0x20000000

08001a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a80:	f7ff fff0 	bl	8001a64 <HAL_RCC_GetHCLKFreq>
 8001a84:	4602      	mov	r2, r0
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	0a9b      	lsrs	r3, r3, #10
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	4903      	ldr	r1, [pc, #12]	; (8001aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a92:	5ccb      	ldrb	r3, [r1, r3]
 8001a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	080070bc 	.word	0x080070bc

08001aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001aa8:	f7ff ffdc 	bl	8001a64 <HAL_RCC_GetHCLKFreq>
 8001aac:	4602      	mov	r2, r0
 8001aae:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	0b5b      	lsrs	r3, r3, #13
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	4903      	ldr	r1, [pc, #12]	; (8001ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aba:	5ccb      	ldrb	r3, [r1, r3]
 8001abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	080070bc 	.word	0x080070bc

08001acc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	220f      	movs	r2, #15
 8001ada:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_RCC_GetClockConfig+0x5c>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0203 	and.w	r2, r3, #3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <HAL_RCC_GetClockConfig+0x5c>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <HAL_RCC_GetClockConfig+0x5c>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_RCC_GetClockConfig+0x5c>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <HAL_RCC_GetClockConfig+0x60>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0207 	and.w	r2, r3, #7
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	601a      	str	r2, [r3, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40023c00 	.word	0x40023c00

08001b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e041      	b.n	8001bc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f839 	bl	8001bce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4610      	mov	r0, r2
 8001b70:	f000 f9ca 	bl	8001f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d001      	beq.n	8001bfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e044      	b.n	8001c86 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1e      	ldr	r2, [pc, #120]	; (8001c94 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d018      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x6c>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c26:	d013      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x6c>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a1a      	ldr	r2, [pc, #104]	; (8001c98 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00e      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x6c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a19      	ldr	r2, [pc, #100]	; (8001c9c <HAL_TIM_Base_Start_IT+0xb8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d009      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x6c>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d004      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x6c>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a16      	ldr	r2, [pc, #88]	; (8001ca4 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d111      	bne.n	8001c74 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b06      	cmp	r3, #6
 8001c60:	d010      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 0201 	orr.w	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c72:	e007      	b.n	8001c84 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40010000 	.word	0x40010000
 8001c98:	40000400 	.word	0x40000400
 8001c9c:	40000800 	.word	0x40000800
 8001ca0:	40000c00 	.word	0x40000c00
 8001ca4:	40014000 	.word	0x40014000

08001ca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d122      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d11b      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0202 	mvn.w	r2, #2
 8001cd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f8ee 	bl	8001ecc <HAL_TIM_IC_CaptureCallback>
 8001cf0:	e005      	b.n	8001cfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f8e0 	bl	8001eb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f8f1 	bl	8001ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d122      	bne.n	8001d58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d11b      	bne.n	8001d58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f06f 0204 	mvn.w	r2, #4
 8001d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f8c4 	bl	8001ecc <HAL_TIM_IC_CaptureCallback>
 8001d44:	e005      	b.n	8001d52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f8b6 	bl	8001eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f8c7 	bl	8001ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d122      	bne.n	8001dac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d11b      	bne.n	8001dac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0208 	mvn.w	r2, #8
 8001d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2204      	movs	r2, #4
 8001d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f89a 	bl	8001ecc <HAL_TIM_IC_CaptureCallback>
 8001d98:	e005      	b.n	8001da6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f88c 	bl	8001eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f89d 	bl	8001ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f003 0310 	and.w	r3, r3, #16
 8001db6:	2b10      	cmp	r3, #16
 8001db8:	d122      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	2b10      	cmp	r3, #16
 8001dc6:	d11b      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0210 	mvn.w	r2, #16
 8001dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2208      	movs	r2, #8
 8001dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f870 	bl	8001ecc <HAL_TIM_IC_CaptureCallback>
 8001dec:	e005      	b.n	8001dfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f862 	bl	8001eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f873 	bl	8001ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d10e      	bne.n	8001e2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d107      	bne.n	8001e2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0201 	mvn.w	r2, #1
 8001e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7fe fd8e 	bl	8000948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e36:	2b80      	cmp	r3, #128	; 0x80
 8001e38:	d10e      	bne.n	8001e58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e44:	2b80      	cmp	r3, #128	; 0x80
 8001e46:	d107      	bne.n	8001e58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f8e2 	bl	800201c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e62:	2b40      	cmp	r3, #64	; 0x40
 8001e64:	d10e      	bne.n	8001e84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e70:	2b40      	cmp	r3, #64	; 0x40
 8001e72:	d107      	bne.n	8001e84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f838 	bl	8001ef4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0320 	and.w	r3, r3, #32
 8001e8e:	2b20      	cmp	r3, #32
 8001e90:	d10e      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0320 	and.w	r3, r3, #32
 8001e9c:	2b20      	cmp	r3, #32
 8001e9e:	d107      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0220 	mvn.w	r2, #32
 8001ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f8ac 	bl	8002008 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a34      	ldr	r2, [pc, #208]	; (8001fec <TIM_Base_SetConfig+0xe4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00f      	beq.n	8001f40 <TIM_Base_SetConfig+0x38>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f26:	d00b      	beq.n	8001f40 <TIM_Base_SetConfig+0x38>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a31      	ldr	r2, [pc, #196]	; (8001ff0 <TIM_Base_SetConfig+0xe8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d007      	beq.n	8001f40 <TIM_Base_SetConfig+0x38>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a30      	ldr	r2, [pc, #192]	; (8001ff4 <TIM_Base_SetConfig+0xec>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d003      	beq.n	8001f40 <TIM_Base_SetConfig+0x38>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a2f      	ldr	r2, [pc, #188]	; (8001ff8 <TIM_Base_SetConfig+0xf0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d108      	bne.n	8001f52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a25      	ldr	r2, [pc, #148]	; (8001fec <TIM_Base_SetConfig+0xe4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d01b      	beq.n	8001f92 <TIM_Base_SetConfig+0x8a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f60:	d017      	beq.n	8001f92 <TIM_Base_SetConfig+0x8a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a22      	ldr	r2, [pc, #136]	; (8001ff0 <TIM_Base_SetConfig+0xe8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d013      	beq.n	8001f92 <TIM_Base_SetConfig+0x8a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a21      	ldr	r2, [pc, #132]	; (8001ff4 <TIM_Base_SetConfig+0xec>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d00f      	beq.n	8001f92 <TIM_Base_SetConfig+0x8a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a20      	ldr	r2, [pc, #128]	; (8001ff8 <TIM_Base_SetConfig+0xf0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00b      	beq.n	8001f92 <TIM_Base_SetConfig+0x8a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a1f      	ldr	r2, [pc, #124]	; (8001ffc <TIM_Base_SetConfig+0xf4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d007      	beq.n	8001f92 <TIM_Base_SetConfig+0x8a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a1e      	ldr	r2, [pc, #120]	; (8002000 <TIM_Base_SetConfig+0xf8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d003      	beq.n	8001f92 <TIM_Base_SetConfig+0x8a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a1d      	ldr	r2, [pc, #116]	; (8002004 <TIM_Base_SetConfig+0xfc>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d108      	bne.n	8001fa4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a08      	ldr	r2, [pc, #32]	; (8001fec <TIM_Base_SetConfig+0xe4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d103      	bne.n	8001fd8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	615a      	str	r2, [r3, #20]
}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40010000 	.word	0x40010000
 8001ff0:	40000400 	.word	0x40000400
 8001ff4:	40000800 	.word	0x40000800
 8001ff8:	40000c00 	.word	0x40000c00
 8001ffc:	40014000 	.word	0x40014000
 8002000:	40014400 	.word	0x40014400
 8002004:	40014800 	.word	0x40014800

08002008 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e03f      	b.n	80020c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7fe fcb6 	bl	80009c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2224      	movs	r2, #36	; 0x24
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002072:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f829 	bl	80020cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002088:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695a      	ldr	r2, [r3, #20]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002098:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2220      	movs	r2, #32
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2220      	movs	r2, #32
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020d0:	b09f      	sub	sp, #124	; 0x7c
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80020e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e2:	68d9      	ldr	r1, [r3, #12]
 80020e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	ea40 0301 	orr.w	r3, r0, r1
 80020ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	431a      	orrs	r2, r3
 80020fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	4313      	orrs	r3, r2
 8002104:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002110:	f021 010c 	bic.w	r1, r1, #12
 8002114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800211a:	430b      	orrs	r3, r1
 800211c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800211e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800212a:	6999      	ldr	r1, [r3, #24]
 800212c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	ea40 0301 	orr.w	r3, r0, r1
 8002134:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	4bc5      	ldr	r3, [pc, #788]	; (8002450 <UART_SetConfig+0x384>)
 800213c:	429a      	cmp	r2, r3
 800213e:	d004      	beq.n	800214a <UART_SetConfig+0x7e>
 8002140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4bc3      	ldr	r3, [pc, #780]	; (8002454 <UART_SetConfig+0x388>)
 8002146:	429a      	cmp	r2, r3
 8002148:	d103      	bne.n	8002152 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800214a:	f7ff fcab 	bl	8001aa4 <HAL_RCC_GetPCLK2Freq>
 800214e:	6778      	str	r0, [r7, #116]	; 0x74
 8002150:	e002      	b.n	8002158 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002152:	f7ff fc93 	bl	8001a7c <HAL_RCC_GetPCLK1Freq>
 8002156:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002160:	f040 80b6 	bne.w	80022d0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002164:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002166:	461c      	mov	r4, r3
 8002168:	f04f 0500 	mov.w	r5, #0
 800216c:	4622      	mov	r2, r4
 800216e:	462b      	mov	r3, r5
 8002170:	1891      	adds	r1, r2, r2
 8002172:	6439      	str	r1, [r7, #64]	; 0x40
 8002174:	415b      	adcs	r3, r3
 8002176:	647b      	str	r3, [r7, #68]	; 0x44
 8002178:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800217c:	1912      	adds	r2, r2, r4
 800217e:	eb45 0303 	adc.w	r3, r5, r3
 8002182:	f04f 0000 	mov.w	r0, #0
 8002186:	f04f 0100 	mov.w	r1, #0
 800218a:	00d9      	lsls	r1, r3, #3
 800218c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002190:	00d0      	lsls	r0, r2, #3
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	1911      	adds	r1, r2, r4
 8002198:	6639      	str	r1, [r7, #96]	; 0x60
 800219a:	416b      	adcs	r3, r5
 800219c:	667b      	str	r3, [r7, #100]	; 0x64
 800219e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	461a      	mov	r2, r3
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	1891      	adds	r1, r2, r2
 80021aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80021ac:	415b      	adcs	r3, r3
 80021ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80021b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80021b8:	f7fe f85c 	bl	8000274 <__aeabi_uldivmod>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4ba5      	ldr	r3, [pc, #660]	; (8002458 <UART_SetConfig+0x38c>)
 80021c2:	fba3 2302 	umull	r2, r3, r3, r2
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	011e      	lsls	r6, r3, #4
 80021ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021cc:	461c      	mov	r4, r3
 80021ce:	f04f 0500 	mov.w	r5, #0
 80021d2:	4622      	mov	r2, r4
 80021d4:	462b      	mov	r3, r5
 80021d6:	1891      	adds	r1, r2, r2
 80021d8:	6339      	str	r1, [r7, #48]	; 0x30
 80021da:	415b      	adcs	r3, r3
 80021dc:	637b      	str	r3, [r7, #52]	; 0x34
 80021de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80021e2:	1912      	adds	r2, r2, r4
 80021e4:	eb45 0303 	adc.w	r3, r5, r3
 80021e8:	f04f 0000 	mov.w	r0, #0
 80021ec:	f04f 0100 	mov.w	r1, #0
 80021f0:	00d9      	lsls	r1, r3, #3
 80021f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021f6:	00d0      	lsls	r0, r2, #3
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	1911      	adds	r1, r2, r4
 80021fe:	65b9      	str	r1, [r7, #88]	; 0x58
 8002200:	416b      	adcs	r3, r5
 8002202:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	461a      	mov	r2, r3
 800220a:	f04f 0300 	mov.w	r3, #0
 800220e:	1891      	adds	r1, r2, r2
 8002210:	62b9      	str	r1, [r7, #40]	; 0x28
 8002212:	415b      	adcs	r3, r3
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002216:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800221a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800221e:	f7fe f829 	bl	8000274 <__aeabi_uldivmod>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4b8c      	ldr	r3, [pc, #560]	; (8002458 <UART_SetConfig+0x38c>)
 8002228:	fba3 1302 	umull	r1, r3, r3, r2
 800222c:	095b      	lsrs	r3, r3, #5
 800222e:	2164      	movs	r1, #100	; 0x64
 8002230:	fb01 f303 	mul.w	r3, r1, r3
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	3332      	adds	r3, #50	; 0x32
 800223a:	4a87      	ldr	r2, [pc, #540]	; (8002458 <UART_SetConfig+0x38c>)
 800223c:	fba2 2303 	umull	r2, r3, r2, r3
 8002240:	095b      	lsrs	r3, r3, #5
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002248:	441e      	add	r6, r3
 800224a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800224c:	4618      	mov	r0, r3
 800224e:	f04f 0100 	mov.w	r1, #0
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	1894      	adds	r4, r2, r2
 8002258:	623c      	str	r4, [r7, #32]
 800225a:	415b      	adcs	r3, r3
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
 800225e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002262:	1812      	adds	r2, r2, r0
 8002264:	eb41 0303 	adc.w	r3, r1, r3
 8002268:	f04f 0400 	mov.w	r4, #0
 800226c:	f04f 0500 	mov.w	r5, #0
 8002270:	00dd      	lsls	r5, r3, #3
 8002272:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002276:	00d4      	lsls	r4, r2, #3
 8002278:	4622      	mov	r2, r4
 800227a:	462b      	mov	r3, r5
 800227c:	1814      	adds	r4, r2, r0
 800227e:	653c      	str	r4, [r7, #80]	; 0x50
 8002280:	414b      	adcs	r3, r1
 8002282:	657b      	str	r3, [r7, #84]	; 0x54
 8002284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	461a      	mov	r2, r3
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	1891      	adds	r1, r2, r2
 8002290:	61b9      	str	r1, [r7, #24]
 8002292:	415b      	adcs	r3, r3
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800229a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800229e:	f7fd ffe9 	bl	8000274 <__aeabi_uldivmod>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4b6c      	ldr	r3, [pc, #432]	; (8002458 <UART_SetConfig+0x38c>)
 80022a8:	fba3 1302 	umull	r1, r3, r3, r2
 80022ac:	095b      	lsrs	r3, r3, #5
 80022ae:	2164      	movs	r1, #100	; 0x64
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	3332      	adds	r3, #50	; 0x32
 80022ba:	4a67      	ldr	r2, [pc, #412]	; (8002458 <UART_SetConfig+0x38c>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	095b      	lsrs	r3, r3, #5
 80022c2:	f003 0207 	and.w	r2, r3, #7
 80022c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4432      	add	r2, r6
 80022cc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80022ce:	e0b9      	b.n	8002444 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d2:	461c      	mov	r4, r3
 80022d4:	f04f 0500 	mov.w	r5, #0
 80022d8:	4622      	mov	r2, r4
 80022da:	462b      	mov	r3, r5
 80022dc:	1891      	adds	r1, r2, r2
 80022de:	6139      	str	r1, [r7, #16]
 80022e0:	415b      	adcs	r3, r3
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80022e8:	1912      	adds	r2, r2, r4
 80022ea:	eb45 0303 	adc.w	r3, r5, r3
 80022ee:	f04f 0000 	mov.w	r0, #0
 80022f2:	f04f 0100 	mov.w	r1, #0
 80022f6:	00d9      	lsls	r1, r3, #3
 80022f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022fc:	00d0      	lsls	r0, r2, #3
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	eb12 0804 	adds.w	r8, r2, r4
 8002306:	eb43 0905 	adc.w	r9, r3, r5
 800230a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4618      	mov	r0, r3
 8002310:	f04f 0100 	mov.w	r1, #0
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	008b      	lsls	r3, r1, #2
 800231e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002322:	0082      	lsls	r2, r0, #2
 8002324:	4640      	mov	r0, r8
 8002326:	4649      	mov	r1, r9
 8002328:	f7fd ffa4 	bl	8000274 <__aeabi_uldivmod>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4b49      	ldr	r3, [pc, #292]	; (8002458 <UART_SetConfig+0x38c>)
 8002332:	fba3 2302 	umull	r2, r3, r3, r2
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	011e      	lsls	r6, r3, #4
 800233a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800233c:	4618      	mov	r0, r3
 800233e:	f04f 0100 	mov.w	r1, #0
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	1894      	adds	r4, r2, r2
 8002348:	60bc      	str	r4, [r7, #8]
 800234a:	415b      	adcs	r3, r3
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002352:	1812      	adds	r2, r2, r0
 8002354:	eb41 0303 	adc.w	r3, r1, r3
 8002358:	f04f 0400 	mov.w	r4, #0
 800235c:	f04f 0500 	mov.w	r5, #0
 8002360:	00dd      	lsls	r5, r3, #3
 8002362:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002366:	00d4      	lsls	r4, r2, #3
 8002368:	4622      	mov	r2, r4
 800236a:	462b      	mov	r3, r5
 800236c:	1814      	adds	r4, r2, r0
 800236e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002370:	414b      	adcs	r3, r1
 8002372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4618      	mov	r0, r3
 800237a:	f04f 0100 	mov.w	r1, #0
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	008b      	lsls	r3, r1, #2
 8002388:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800238c:	0082      	lsls	r2, r0, #2
 800238e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002392:	f7fd ff6f 	bl	8000274 <__aeabi_uldivmod>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4b2f      	ldr	r3, [pc, #188]	; (8002458 <UART_SetConfig+0x38c>)
 800239c:	fba3 1302 	umull	r1, r3, r3, r2
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	2164      	movs	r1, #100	; 0x64
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	011b      	lsls	r3, r3, #4
 80023ac:	3332      	adds	r3, #50	; 0x32
 80023ae:	4a2a      	ldr	r2, [pc, #168]	; (8002458 <UART_SetConfig+0x38c>)
 80023b0:	fba2 2303 	umull	r2, r3, r2, r3
 80023b4:	095b      	lsrs	r3, r3, #5
 80023b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ba:	441e      	add	r6, r3
 80023bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023be:	4618      	mov	r0, r3
 80023c0:	f04f 0100 	mov.w	r1, #0
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	1894      	adds	r4, r2, r2
 80023ca:	603c      	str	r4, [r7, #0]
 80023cc:	415b      	adcs	r3, r3
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023d4:	1812      	adds	r2, r2, r0
 80023d6:	eb41 0303 	adc.w	r3, r1, r3
 80023da:	f04f 0400 	mov.w	r4, #0
 80023de:	f04f 0500 	mov.w	r5, #0
 80023e2:	00dd      	lsls	r5, r3, #3
 80023e4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80023e8:	00d4      	lsls	r4, r2, #3
 80023ea:	4622      	mov	r2, r4
 80023ec:	462b      	mov	r3, r5
 80023ee:	eb12 0a00 	adds.w	sl, r2, r0
 80023f2:	eb43 0b01 	adc.w	fp, r3, r1
 80023f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f04f 0100 	mov.w	r1, #0
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	008b      	lsls	r3, r1, #2
 800240a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800240e:	0082      	lsls	r2, r0, #2
 8002410:	4650      	mov	r0, sl
 8002412:	4659      	mov	r1, fp
 8002414:	f7fd ff2e 	bl	8000274 <__aeabi_uldivmod>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <UART_SetConfig+0x38c>)
 800241e:	fba3 1302 	umull	r1, r3, r3, r2
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	2164      	movs	r1, #100	; 0x64
 8002426:	fb01 f303 	mul.w	r3, r1, r3
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	3332      	adds	r3, #50	; 0x32
 8002430:	4a09      	ldr	r2, [pc, #36]	; (8002458 <UART_SetConfig+0x38c>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	f003 020f 	and.w	r2, r3, #15
 800243c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4432      	add	r2, r6
 8002442:	609a      	str	r2, [r3, #8]
}
 8002444:	bf00      	nop
 8002446:	377c      	adds	r7, #124	; 0x7c
 8002448:	46bd      	mov	sp, r7
 800244a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800244e:	bf00      	nop
 8002450:	40011000 	.word	0x40011000
 8002454:	40011400 	.word	0x40011400
 8002458:	51eb851f 	.word	0x51eb851f

0800245c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f103 0208 	add.w	r2, r3, #8
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002474:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f103 0208 	add.w	r2, r3, #8
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f103 0208 	add.w	r2, r3, #8
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80024b6:	b480      	push	{r7}
 80024b8:	b085      	sub	sp, #20
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	601a      	str	r2, [r3, #0]
}
 80024f2:	bf00      	nop
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80024fe:	b480      	push	{r7}
 8002500:	b085      	sub	sp, #20
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002514:	d103      	bne.n	800251e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	e00c      	b.n	8002538 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3308      	adds	r3, #8
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	e002      	b.n	800252c <vListInsert+0x2e>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	429a      	cmp	r2, r3
 8002536:	d2f6      	bcs.n	8002526 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	601a      	str	r2, [r3, #0]
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6892      	ldr	r2, [r2, #8]
 8002586:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6852      	ldr	r2, [r2, #4]
 8002590:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	429a      	cmp	r2, r3
 800259a:	d103      	bne.n	80025a4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	1e5a      	subs	r2, r3, #1
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10a      	bne.n	80025ee <xQueueGenericReset+0x2a>
        __asm volatile
 80025d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025dc:	f383 8811 	msr	BASEPRI, r3
 80025e0:	f3bf 8f6f 	isb	sy
 80025e4:	f3bf 8f4f 	dsb	sy
 80025e8:	60bb      	str	r3, [r7, #8]
    }
 80025ea:	bf00      	nop
 80025ec:	e7fe      	b.n	80025ec <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80025ee:	f002 f8c9 	bl	8004784 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fa:	68f9      	ldr	r1, [r7, #12]
 80025fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	441a      	add	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261e:	3b01      	subs	r3, #1
 8002620:	68f9      	ldr	r1, [r7, #12]
 8002622:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	441a      	add	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	22ff      	movs	r2, #255	; 0xff
 8002632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	22ff      	movs	r2, #255	; 0xff
 800263a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d114      	bne.n	800266e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d01a      	beq.n	8002682 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	3310      	adds	r3, #16
 8002650:	4618      	mov	r0, r3
 8002652:	f001 f91f 	bl	8003894 <xTaskRemoveFromEventList>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d012      	beq.n	8002682 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <xQueueGenericReset+0xcc>)
 800265e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	f3bf 8f4f 	dsb	sy
 8002668:	f3bf 8f6f 	isb	sy
 800266c:	e009      	b.n	8002682 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	3310      	adds	r3, #16
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fef2 	bl	800245c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3324      	adds	r3, #36	; 0x24
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff feed 	bl	800245c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002682:	f002 f8af 	bl	80047e4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002686:	2301      	movs	r3, #1
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	e000ed04 	.word	0xe000ed04

08002694 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002694:	b580      	push	{r7, lr}
 8002696:	b08c      	sub	sp, #48	; 0x30
 8002698:	af02      	add	r7, sp, #8
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	4613      	mov	r3, r2
 80026a0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10a      	bne.n	80026be <xQueueGenericCreate+0x2a>
        __asm volatile
 80026a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ac:	f383 8811 	msr	BASEPRI, r3
 80026b0:	f3bf 8f6f 	isb	sy
 80026b4:	f3bf 8f4f 	dsb	sy
 80026b8:	61bb      	str	r3, [r7, #24]
    }
 80026ba:	bf00      	nop
 80026bc:	e7fe      	b.n	80026bc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	fb02 f303 	mul.w	r3, r2, r3
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d006      	beq.n	80026dc <xQueueGenericCreate+0x48>
 80026ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d101      	bne.n	80026e0 <xQueueGenericCreate+0x4c>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <xQueueGenericCreate+0x4e>
 80026e0:	2300      	movs	r3, #0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10a      	bne.n	80026fc <xQueueGenericCreate+0x68>
        __asm volatile
 80026e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ea:	f383 8811 	msr	BASEPRI, r3
 80026ee:	f3bf 8f6f 	isb	sy
 80026f2:	f3bf 8f4f 	dsb	sy
 80026f6:	617b      	str	r3, [r7, #20]
    }
 80026f8:	bf00      	nop
 80026fa:	e7fe      	b.n	80026fa <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002702:	d90a      	bls.n	800271a <xQueueGenericCreate+0x86>
        __asm volatile
 8002704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002708:	f383 8811 	msr	BASEPRI, r3
 800270c:	f3bf 8f6f 	isb	sy
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	613b      	str	r3, [r7, #16]
    }
 8002716:	bf00      	nop
 8002718:	e7fe      	b.n	8002718 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	3350      	adds	r3, #80	; 0x50
 800271e:	4618      	mov	r0, r3
 8002720:	f002 f95c 	bl	80049dc <pvPortMalloc>
 8002724:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00d      	beq.n	8002748 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	3350      	adds	r3, #80	; 0x50
 8002734:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002736:	79fa      	ldrb	r2, [r7, #7]
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	4613      	mov	r3, r2
 800273e:	69fa      	ldr	r2, [r7, #28]
 8002740:	68b9      	ldr	r1, [r7, #8]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f805 	bl	8002752 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002748:	6a3b      	ldr	r3, [r7, #32]
    }
 800274a:	4618      	mov	r0, r3
 800274c:	3728      	adds	r7, #40	; 0x28
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d103      	bne.n	800276e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	e002      	b.n	8002774 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002780:	2101      	movs	r1, #1
 8002782:	69b8      	ldr	r0, [r7, #24]
 8002784:	f7ff ff1e 	bl	80025c4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	78fa      	ldrb	r2, [r7, #3]
 800278c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	68f9      	ldr	r1, [r7, #12]
 8002796:	2073      	movs	r0, #115	; 0x73
 8002798:	f003 fca6 	bl	80060e8 <SEGGER_SYSVIEW_RecordU32x3>
}
 800279c:	bf00      	nop
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b090      	sub	sp, #64	; 0x40
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80027b2:	2300      	movs	r3, #0
 80027b4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80027ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10a      	bne.n	80027d6 <xQueueGenericSend+0x32>
        __asm volatile
 80027c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c4:	f383 8811 	msr	BASEPRI, r3
 80027c8:	f3bf 8f6f 	isb	sy
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80027d2:	bf00      	nop
 80027d4:	e7fe      	b.n	80027d4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d103      	bne.n	80027e4 <xQueueGenericSend+0x40>
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <xQueueGenericSend+0x44>
 80027e4:	2301      	movs	r3, #1
 80027e6:	e000      	b.n	80027ea <xQueueGenericSend+0x46>
 80027e8:	2300      	movs	r3, #0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10a      	bne.n	8002804 <xQueueGenericSend+0x60>
        __asm volatile
 80027ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f2:	f383 8811 	msr	BASEPRI, r3
 80027f6:	f3bf 8f6f 	isb	sy
 80027fa:	f3bf 8f4f 	dsb	sy
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002800:	bf00      	nop
 8002802:	e7fe      	b.n	8002802 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d103      	bne.n	8002812 <xQueueGenericSend+0x6e>
 800280a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <xQueueGenericSend+0x72>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <xQueueGenericSend+0x74>
 8002816:	2300      	movs	r3, #0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10a      	bne.n	8002832 <xQueueGenericSend+0x8e>
        __asm volatile
 800281c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002820:	f383 8811 	msr	BASEPRI, r3
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	623b      	str	r3, [r7, #32]
    }
 800282e:	bf00      	nop
 8002830:	e7fe      	b.n	8002830 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002832:	f001 f9cf 	bl	8003bd4 <xTaskGetSchedulerState>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d102      	bne.n	8002842 <xQueueGenericSend+0x9e>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <xQueueGenericSend+0xa2>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <xQueueGenericSend+0xa4>
 8002846:	2300      	movs	r3, #0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10a      	bne.n	8002862 <xQueueGenericSend+0xbe>
        __asm volatile
 800284c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002850:	f383 8811 	msr	BASEPRI, r3
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	61fb      	str	r3, [r7, #28]
    }
 800285e:	bf00      	nop
 8002860:	e7fe      	b.n	8002860 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002862:	f001 ff8f 	bl	8004784 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800286a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286e:	429a      	cmp	r2, r3
 8002870:	d302      	bcc.n	8002878 <xQueueGenericSend+0xd4>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d136      	bne.n	80028e6 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287a:	4618      	mov	r0, r3
 800287c:	f004 f9c2 	bl	8006c04 <SEGGER_SYSVIEW_ShrinkId>
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	460b      	mov	r3, r1
 800288a:	4601      	mov	r1, r0
 800288c:	205a      	movs	r0, #90	; 0x5a
 800288e:	f003 fca1 	bl	80061d4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002898:	f000 fa78 	bl	8002d8c <prvCopyDataToQueue>
 800289c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800289e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d010      	beq.n	80028c8 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a8:	3324      	adds	r3, #36	; 0x24
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fff2 	bl	8003894 <xTaskRemoveFromEventList>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d013      	beq.n	80028de <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80028b6:	4b4d      	ldr	r3, [pc, #308]	; (80029ec <xQueueGenericSend+0x248>)
 80028b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	e00a      	b.n	80028de <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80028c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80028ce:	4b47      	ldr	r3, [pc, #284]	; (80029ec <xQueueGenericSend+0x248>)
 80028d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	f3bf 8f4f 	dsb	sy
 80028da:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80028de:	f001 ff81 	bl	80047e4 <vPortExitCritical>
                return pdPASS;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e07d      	b.n	80029e2 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d110      	bne.n	800290e <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80028ec:	f001 ff7a 	bl	80047e4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80028f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f2:	4618      	mov	r0, r3
 80028f4:	f004 f986 	bl	8006c04 <SEGGER_SYSVIEW_ShrinkId>
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	460b      	mov	r3, r1
 8002902:	4601      	mov	r1, r0
 8002904:	205a      	movs	r0, #90	; 0x5a
 8002906:	f003 fc65 	bl	80061d4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800290a:	2300      	movs	r3, #0
 800290c:	e069      	b.n	80029e2 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800290e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002910:	2b00      	cmp	r3, #0
 8002912:	d106      	bne.n	8002922 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	4618      	mov	r0, r3
 800291a:	f001 f821 	bl	8003960 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800291e:	2301      	movs	r3, #1
 8002920:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002922:	f001 ff5f 	bl	80047e4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002926:	f000 fd6d 	bl	8003404 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800292a:	f001 ff2b 	bl	8004784 <vPortEnterCritical>
 800292e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002930:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002934:	b25b      	sxtb	r3, r3
 8002936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800293a:	d103      	bne.n	8002944 <xQueueGenericSend+0x1a0>
 800293c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002946:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800294a:	b25b      	sxtb	r3, r3
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002950:	d103      	bne.n	800295a <xQueueGenericSend+0x1b6>
 8002952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800295a:	f001 ff43 	bl	80047e4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800295e:	1d3a      	adds	r2, r7, #4
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	4611      	mov	r1, r2
 8002966:	4618      	mov	r0, r3
 8002968:	f001 f810 	bl	800398c <xTaskCheckForTimeOut>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d124      	bne.n	80029bc <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002972:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002974:	f000 fb02 	bl	8002f7c <prvIsQueueFull>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d018      	beq.n	80029b0 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002980:	3310      	adds	r3, #16
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	4611      	mov	r1, r2
 8002986:	4618      	mov	r0, r3
 8002988:	f000 ff32 	bl	80037f0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800298c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800298e:	f000 fa8d 	bl	8002eac <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002992:	f000 fd45 	bl	8003420 <xTaskResumeAll>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	f47f af62 	bne.w	8002862 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800299e:	4b13      	ldr	r3, [pc, #76]	; (80029ec <xQueueGenericSend+0x248>)
 80029a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	f3bf 8f4f 	dsb	sy
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	e758      	b.n	8002862 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80029b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029b2:	f000 fa7b 	bl	8002eac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029b6:	f000 fd33 	bl	8003420 <xTaskResumeAll>
 80029ba:	e752      	b.n	8002862 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80029bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029be:	f000 fa75 	bl	8002eac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80029c2:	f000 fd2d 	bl	8003420 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80029c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c8:	4618      	mov	r0, r3
 80029ca:	f004 f91b 	bl	8006c04 <SEGGER_SYSVIEW_ShrinkId>
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	460b      	mov	r3, r1
 80029d8:	4601      	mov	r1, r0
 80029da:	205a      	movs	r0, #90	; 0x5a
 80029dc:	f003 fbfa 	bl	80061d4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80029e0:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3738      	adds	r7, #56	; 0x38
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	e000ed04 	.word	0xe000ed04

080029f0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b090      	sub	sp, #64	; 0x40
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10a      	bne.n	8002a1e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0c:	f383 8811 	msr	BASEPRI, r3
 8002a10:	f3bf 8f6f 	isb	sy
 8002a14:	f3bf 8f4f 	dsb	sy
 8002a18:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002a1a:	bf00      	nop
 8002a1c:	e7fe      	b.n	8002a1c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d103      	bne.n	8002a2c <xQueueGenericSendFromISR+0x3c>
 8002a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <xQueueGenericSendFromISR+0x40>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <xQueueGenericSendFromISR+0x42>
 8002a30:	2300      	movs	r3, #0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10a      	bne.n	8002a4c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3a:	f383 8811 	msr	BASEPRI, r3
 8002a3e:	f3bf 8f6f 	isb	sy
 8002a42:	f3bf 8f4f 	dsb	sy
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002a48:	bf00      	nop
 8002a4a:	e7fe      	b.n	8002a4a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d103      	bne.n	8002a5a <xQueueGenericSendFromISR+0x6a>
 8002a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <xQueueGenericSendFromISR+0x6e>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <xQueueGenericSendFromISR+0x70>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	623b      	str	r3, [r7, #32]
    }
 8002a76:	bf00      	nop
 8002a78:	e7fe      	b.n	8002a78 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a7a:	f001 ff6f 	bl	800495c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002a7e:	f3ef 8211 	mrs	r2, BASEPRI
 8002a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	61fa      	str	r2, [r7, #28]
 8002a94:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002a96:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a98:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d302      	bcc.n	8002aac <xQueueGenericSendFromISR+0xbc>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d148      	bne.n	8002b3e <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aba:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f004 f8a0 	bl	8006c04 <SEGGER_SYSVIEW_ShrinkId>
 8002ac4:	4601      	mov	r1, r0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2060      	movs	r0, #96	; 0x60
 8002acc:	f003 fab2 	bl	8006034 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	68b9      	ldr	r1, [r7, #8]
 8002ad4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002ad6:	f000 f959 	bl	8002d8c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002ada:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ae2:	d112      	bne.n	8002b0a <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d025      	beq.n	8002b38 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aee:	3324      	adds	r3, #36	; 0x24
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fecf 	bl	8003894 <xTaskRemoveFromEventList>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d01d      	beq.n	8002b38 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d01a      	beq.n	8002b38 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	e016      	b.n	8002b38 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002b0a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8002b10:	d10a      	bne.n	8002b28 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b16:	f383 8811 	msr	BASEPRI, r3
 8002b1a:	f3bf 8f6f 	isb	sy
 8002b1e:	f3bf 8f4f 	dsb	sy
 8002b22:	617b      	str	r3, [r7, #20]
    }
 8002b24:	bf00      	nop
 8002b26:	e7fe      	b.n	8002b26 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	b25a      	sxtb	r2, r3
 8002b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002b3c:	e00b      	b.n	8002b56 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b40:	4618      	mov	r0, r3
 8002b42:	f004 f85f 	bl	8006c04 <SEGGER_SYSVIEW_ShrinkId>
 8002b46:	4601      	mov	r1, r0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	2060      	movs	r0, #96	; 0x60
 8002b4e:	f003 fa71 	bl	8006034 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b58:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002b60:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3740      	adds	r7, #64	; 0x40
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002b6c:	b590      	push	{r4, r7, lr}
 8002b6e:	b08f      	sub	sp, #60	; 0x3c
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10a      	bne.n	8002b9c <xQueueReceive+0x30>
        __asm volatile
 8002b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8a:	f383 8811 	msr	BASEPRI, r3
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	623b      	str	r3, [r7, #32]
    }
 8002b98:	bf00      	nop
 8002b9a:	e7fe      	b.n	8002b9a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d103      	bne.n	8002baa <xQueueReceive+0x3e>
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <xQueueReceive+0x42>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <xQueueReceive+0x44>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10a      	bne.n	8002bca <xQueueReceive+0x5e>
        __asm volatile
 8002bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb8:	f383 8811 	msr	BASEPRI, r3
 8002bbc:	f3bf 8f6f 	isb	sy
 8002bc0:	f3bf 8f4f 	dsb	sy
 8002bc4:	61fb      	str	r3, [r7, #28]
    }
 8002bc6:	bf00      	nop
 8002bc8:	e7fe      	b.n	8002bc8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bca:	f001 f803 	bl	8003bd4 <xTaskGetSchedulerState>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d102      	bne.n	8002bda <xQueueReceive+0x6e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <xQueueReceive+0x72>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <xQueueReceive+0x74>
 8002bde:	2300      	movs	r3, #0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10a      	bne.n	8002bfa <xQueueReceive+0x8e>
        __asm volatile
 8002be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	61bb      	str	r3, [r7, #24]
    }
 8002bf6:	bf00      	nop
 8002bf8:	e7fe      	b.n	8002bf8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002bfa:	f001 fdc3 	bl	8004784 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d02f      	beq.n	8002c6a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c0e:	f000 f927 	bl	8002e60 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c14:	4618      	mov	r0, r3
 8002c16:	f003 fff5 	bl	8006c04 <SEGGER_SYSVIEW_ShrinkId>
 8002c1a:	4604      	mov	r4, r0
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	f003 fff1 	bl	8006c04 <SEGGER_SYSVIEW_ShrinkId>
 8002c22:	4602      	mov	r2, r0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2101      	movs	r1, #1
 8002c28:	9100      	str	r1, [sp, #0]
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	205c      	movs	r0, #92	; 0x5c
 8002c2e:	f003 fad1 	bl	80061d4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	1e5a      	subs	r2, r3, #1
 8002c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c38:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00f      	beq.n	8002c62 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c44:	3310      	adds	r3, #16
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fe24 	bl	8003894 <xTaskRemoveFromEventList>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d007      	beq.n	8002c62 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002c52:	4b4d      	ldr	r3, [pc, #308]	; (8002d88 <xQueueReceive+0x21c>)
 8002c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	f3bf 8f4f 	dsb	sy
 8002c5e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002c62:	f001 fdbf 	bl	80047e4 <vPortExitCritical>
                return pdPASS;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e08a      	b.n	8002d80 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d113      	bne.n	8002c98 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002c70:	f001 fdb8 	bl	80047e4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c76:	4618      	mov	r0, r3
 8002c78:	f003 ffc4 	bl	8006c04 <SEGGER_SYSVIEW_ShrinkId>
 8002c7c:	4604      	mov	r4, r0
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f003 ffc0 	bl	8006c04 <SEGGER_SYSVIEW_ShrinkId>
 8002c84:	4602      	mov	r2, r0
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2101      	movs	r1, #1
 8002c8a:	9100      	str	r1, [sp, #0]
 8002c8c:	4621      	mov	r1, r4
 8002c8e:	205c      	movs	r0, #92	; 0x5c
 8002c90:	f003 faa0 	bl	80061d4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002c94:	2300      	movs	r3, #0
 8002c96:	e073      	b.n	8002d80 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c9e:	f107 0310 	add.w	r3, r7, #16
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fe5c 	bl	8003960 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002cac:	f001 fd9a 	bl	80047e4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002cb0:	f000 fba8 	bl	8003404 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002cb4:	f001 fd66 	bl	8004784 <vPortEnterCritical>
 8002cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cbe:	b25b      	sxtb	r3, r3
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cc4:	d103      	bne.n	8002cce <xQueueReceive+0x162>
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cd4:	b25b      	sxtb	r3, r3
 8002cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cda:	d103      	bne.n	8002ce4 <xQueueReceive+0x178>
 8002cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ce4:	f001 fd7e 	bl	80047e4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ce8:	1d3a      	adds	r2, r7, #4
 8002cea:	f107 0310 	add.w	r3, r7, #16
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 fe4b 	bl	800398c <xTaskCheckForTimeOut>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d124      	bne.n	8002d46 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cfe:	f000 f927 	bl	8002f50 <prvIsQueueEmpty>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d018      	beq.n	8002d3a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0a:	3324      	adds	r3, #36	; 0x24
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fd6d 	bl	80037f0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d18:	f000 f8c8 	bl	8002eac <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002d1c:	f000 fb80 	bl	8003420 <xTaskResumeAll>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f47f af69 	bne.w	8002bfa <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002d28:	4b17      	ldr	r3, [pc, #92]	; (8002d88 <xQueueReceive+0x21c>)
 8002d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	e75f      	b.n	8002bfa <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002d3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d3c:	f000 f8b6 	bl	8002eac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002d40:	f000 fb6e 	bl	8003420 <xTaskResumeAll>
 8002d44:	e759      	b.n	8002bfa <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d48:	f000 f8b0 	bl	8002eac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d4c:	f000 fb68 	bl	8003420 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d52:	f000 f8fd 	bl	8002f50 <prvIsQueueEmpty>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f43f af4e 	beq.w	8002bfa <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d60:	4618      	mov	r0, r3
 8002d62:	f003 ff4f 	bl	8006c04 <SEGGER_SYSVIEW_ShrinkId>
 8002d66:	4604      	mov	r4, r0
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f003 ff4b 	bl	8006c04 <SEGGER_SYSVIEW_ShrinkId>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2101      	movs	r1, #1
 8002d74:	9100      	str	r1, [sp, #0]
 8002d76:	4621      	mov	r1, r4
 8002d78:	205c      	movs	r0, #92	; 0x5c
 8002d7a:	f003 fa2b 	bl	80061d4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002d7e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3734      	adds	r7, #52	; 0x34
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd90      	pop	{r4, r7, pc}
 8002d88:	e000ed04 	.word	0xe000ed04

08002d8c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10d      	bne.n	8002dc6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d14d      	bne.n	8002e4e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 ff2a 	bl	8003c10 <xTaskPriorityDisinherit>
 8002dbc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	e043      	b.n	8002e4e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d119      	bne.n	8002e00 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6858      	ldr	r0, [r3, #4]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	68b9      	ldr	r1, [r7, #8]
 8002dd8:	f004 f8bc 	bl	8006f54 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	441a      	add	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d32b      	bcc.n	8002e4e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	e026      	b.n	8002e4e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	68d8      	ldr	r0, [r3, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	f004 f8a2 	bl	8006f54 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	425b      	negs	r3, r3
 8002e1a:	441a      	add	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d207      	bcs.n	8002e3c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	425b      	negs	r3, r3
 8002e36:	441a      	add	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d105      	bne.n	8002e4e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002e56:	697b      	ldr	r3, [r7, #20]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d018      	beq.n	8002ea4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	441a      	add	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d303      	bcc.n	8002e94 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68d9      	ldr	r1, [r3, #12]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	6838      	ldr	r0, [r7, #0]
 8002ea0:	f004 f858 	bl	8006f54 <memcpy>
    }
}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002eb4:	f001 fc66 	bl	8004784 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ebe:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ec0:	e011      	b.n	8002ee6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d012      	beq.n	8002ef0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3324      	adds	r3, #36	; 0x24
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fce0 	bl	8003894 <xTaskRemoveFromEventList>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002eda:	f000 fdbd 	bl	8003a58 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	dce9      	bgt.n	8002ec2 <prvUnlockQueue+0x16>
 8002eee:	e000      	b.n	8002ef2 <prvUnlockQueue+0x46>
                        break;
 8002ef0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	22ff      	movs	r2, #255	; 0xff
 8002ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002efa:	f001 fc73 	bl	80047e4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002efe:	f001 fc41 	bl	8004784 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f08:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f0a:	e011      	b.n	8002f30 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d012      	beq.n	8002f3a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3310      	adds	r3, #16
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 fcbb 	bl	8003894 <xTaskRemoveFromEventList>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002f24:	f000 fd98 	bl	8003a58 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002f28:	7bbb      	ldrb	r3, [r7, #14]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	dce9      	bgt.n	8002f0c <prvUnlockQueue+0x60>
 8002f38:	e000      	b.n	8002f3c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002f3a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	22ff      	movs	r2, #255	; 0xff
 8002f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002f44:	f001 fc4e 	bl	80047e4 <vPortExitCritical>
}
 8002f48:	bf00      	nop
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f58:	f001 fc14 	bl	8004784 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d102      	bne.n	8002f6a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002f64:	2301      	movs	r3, #1
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	e001      	b.n	8002f6e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f6e:	f001 fc39 	bl	80047e4 <vPortExitCritical>

    return xReturn;
 8002f72:	68fb      	ldr	r3, [r7, #12]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f84:	f001 fbfe 	bl	8004784 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d102      	bne.n	8002f9a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002f94:	2301      	movs	r3, #1
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	e001      	b.n	8002f9e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f9e:	f001 fc21 	bl	80047e4 <vPortExitCritical>

    return xReturn;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	e01e      	b.n	8002ffa <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002fbc:	4a13      	ldr	r2, [pc, #76]	; (800300c <vQueueAddToRegistry+0x60>)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d115      	bne.n	8002ff4 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002fc8:	4910      	ldr	r1, [pc, #64]	; (800300c <vQueueAddToRegistry+0x60>)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002fd2:	4a0e      	ldr	r2, [pc, #56]	; (800300c <vQueueAddToRegistry+0x60>)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4413      	add	r3, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f003 fe0f 	bl	8006c04 <SEGGER_SYSVIEW_ShrinkId>
 8002fe6:	4601      	mov	r1, r0
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	2071      	movs	r0, #113	; 0x71
 8002fee:	f003 f821 	bl	8006034 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002ff2:	e006      	b.n	8003002 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b07      	cmp	r3, #7
 8002ffe:	d9dd      	bls.n	8002fbc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003000:	bf00      	nop
 8003002:	bf00      	nop
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20014408 	.word	0x20014408

08003010 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003020:	f001 fbb0 	bl	8004784 <vPortEnterCritical>
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800302a:	b25b      	sxtb	r3, r3
 800302c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003030:	d103      	bne.n	800303a <vQueueWaitForMessageRestricted+0x2a>
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003040:	b25b      	sxtb	r3, r3
 8003042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003046:	d103      	bne.n	8003050 <vQueueWaitForMessageRestricted+0x40>
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003050:	f001 fbc8 	bl	80047e4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003058:	2b00      	cmp	r3, #0
 800305a:	d106      	bne.n	800306a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	3324      	adds	r3, #36	; 0x24
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	68b9      	ldr	r1, [r7, #8]
 8003064:	4618      	mov	r0, r3
 8003066:	f000 fbe7 	bl	8003838 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800306a:	6978      	ldr	r0, [r7, #20]
 800306c:	f7ff ff1e 	bl	8002eac <prvUnlockQueue>
    }
 8003070:	bf00      	nop
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003078:	b580      	push	{r7, lr}
 800307a:	b08c      	sub	sp, #48	; 0x30
 800307c:	af04      	add	r7, sp, #16
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	4613      	mov	r3, r2
 8003086:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003088:	88fb      	ldrh	r3, [r7, #6]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4618      	mov	r0, r3
 800308e:	f001 fca5 	bl	80049dc <pvPortMalloc>
 8003092:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00e      	beq.n	80030b8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800309a:	2058      	movs	r0, #88	; 0x58
 800309c:	f001 fc9e 	bl	80049dc <pvPortMalloc>
 80030a0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	631a      	str	r2, [r3, #48]	; 0x30
 80030ae:	e005      	b.n	80030bc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80030b0:	6978      	ldr	r0, [r7, #20]
 80030b2:	f001 fd73 	bl	8004b9c <vPortFree>
 80030b6:	e001      	b.n	80030bc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d013      	beq.n	80030ea <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030c2:	88fa      	ldrh	r2, [r7, #6]
 80030c4:	2300      	movs	r3, #0
 80030c6:	9303      	str	r3, [sp, #12]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	9302      	str	r3, [sp, #8]
 80030cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ce:	9301      	str	r3, [sp, #4]
 80030d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f80e 	bl	80030fa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80030de:	69f8      	ldr	r0, [r7, #28]
 80030e0:	f000 f8a2 	bl	8003228 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80030e4:	2301      	movs	r3, #1
 80030e6:	61bb      	str	r3, [r7, #24]
 80030e8:	e002      	b.n	80030f0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030ee:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80030f0:	69bb      	ldr	r3, [r7, #24]
    }
 80030f2:	4618      	mov	r0, r3
 80030f4:	3720      	adds	r7, #32
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b088      	sub	sp, #32
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	461a      	mov	r2, r3
 8003112:	21a5      	movs	r1, #165	; 0xa5
 8003114:	f003 ff2c 	bl	8006f70 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003122:	3b01      	subs	r3, #1
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	f023 0307 	bic.w	r3, r3, #7
 8003130:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <prvInitialiseNewTask+0x58>
        __asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	617b      	str	r3, [r7, #20]
    }
 800314e:	bf00      	nop
 8003150:	e7fe      	b.n	8003150 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01f      	beq.n	8003198 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003158:	2300      	movs	r3, #0
 800315a:	61fb      	str	r3, [r7, #28]
 800315c:	e012      	b.n	8003184 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	4413      	add	r3, r2
 8003164:	7819      	ldrb	r1, [r3, #0]
 8003166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	4413      	add	r3, r2
 800316c:	3334      	adds	r3, #52	; 0x34
 800316e:	460a      	mov	r2, r1
 8003170:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	4413      	add	r3, r2
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d006      	beq.n	800318c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3301      	adds	r3, #1
 8003182:	61fb      	str	r3, [r7, #28]
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	2b09      	cmp	r3, #9
 8003188:	d9e9      	bls.n	800315e <prvInitialiseNewTask+0x64>
 800318a:	e000      	b.n	800318e <prvInitialiseNewTask+0x94>
            {
                break;
 800318c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800318e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003196:	e003      	b.n	80031a0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80031a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d901      	bls.n	80031aa <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80031a6:	2304      	movs	r3, #4
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80031aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ae:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80031b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031b4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	2200      	movs	r2, #0
 80031ba:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031be:	3304      	adds	r3, #4
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff f96b 	bl	800249c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c8:	3318      	adds	r3, #24
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff f966 	bl	800249c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031d4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d8:	f1c3 0205 	rsb	r2, r3, #5
 80031dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031de:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80031e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e8:	3350      	adds	r3, #80	; 0x50
 80031ea:	2204      	movs	r2, #4
 80031ec:	2100      	movs	r1, #0
 80031ee:	4618      	mov	r0, r3
 80031f0:	f003 febe 	bl	8006f70 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80031f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f6:	3354      	adds	r3, #84	; 0x54
 80031f8:	2201      	movs	r2, #1
 80031fa:	2100      	movs	r1, #0
 80031fc:	4618      	mov	r0, r3
 80031fe:	f003 feb7 	bl	8006f70 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	68f9      	ldr	r1, [r7, #12]
 8003206:	69b8      	ldr	r0, [r7, #24]
 8003208:	f001 f90c 	bl	8004424 <pxPortInitialiseStack>
 800320c:	4602      	mov	r2, r0
 800320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003210:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003214:	2b00      	cmp	r3, #0
 8003216:	d002      	beq.n	800321e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800321c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800321e:	bf00      	nop
 8003220:	3720      	adds	r7, #32
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003228:	b5b0      	push	{r4, r5, r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af02      	add	r7, sp, #8
 800322e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003230:	f001 faa8 	bl	8004784 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003234:	4b3b      	ldr	r3, [pc, #236]	; (8003324 <prvAddNewTaskToReadyList+0xfc>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3301      	adds	r3, #1
 800323a:	4a3a      	ldr	r2, [pc, #232]	; (8003324 <prvAddNewTaskToReadyList+0xfc>)
 800323c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800323e:	4b3a      	ldr	r3, [pc, #232]	; (8003328 <prvAddNewTaskToReadyList+0x100>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003246:	4a38      	ldr	r2, [pc, #224]	; (8003328 <prvAddNewTaskToReadyList+0x100>)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800324c:	4b35      	ldr	r3, [pc, #212]	; (8003324 <prvAddNewTaskToReadyList+0xfc>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d110      	bne.n	8003276 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003254:	f000 fc24 	bl	8003aa0 <prvInitialiseTaskLists>
 8003258:	e00d      	b.n	8003276 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800325a:	4b34      	ldr	r3, [pc, #208]	; (800332c <prvAddNewTaskToReadyList+0x104>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003262:	4b31      	ldr	r3, [pc, #196]	; (8003328 <prvAddNewTaskToReadyList+0x100>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	429a      	cmp	r2, r3
 800326e:	d802      	bhi.n	8003276 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003270:	4a2d      	ldr	r2, [pc, #180]	; (8003328 <prvAddNewTaskToReadyList+0x100>)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003276:	4b2e      	ldr	r3, [pc, #184]	; (8003330 <prvAddNewTaskToReadyList+0x108>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3301      	adds	r3, #1
 800327c:	4a2c      	ldr	r2, [pc, #176]	; (8003330 <prvAddNewTaskToReadyList+0x108>)
 800327e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003280:	4b2b      	ldr	r3, [pc, #172]	; (8003330 <prvAddNewTaskToReadyList+0x108>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d016      	beq.n	80032bc <prvAddNewTaskToReadyList+0x94>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4618      	mov	r0, r3
 8003292:	f003 fb91 	bl	80069b8 <SEGGER_SYSVIEW_OnTaskCreate>
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	461d      	mov	r5, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	461c      	mov	r4, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	1ae3      	subs	r3, r4, r3
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	462b      	mov	r3, r5
 80032b8:	f001 fe36 	bl	8004f28 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4618      	mov	r0, r3
 80032c0:	f003 fbfe 	bl	8006ac0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	2201      	movs	r2, #1
 80032ca:	409a      	lsls	r2, r3
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <prvAddNewTaskToReadyList+0x10c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	4a18      	ldr	r2, [pc, #96]	; (8003334 <prvAddNewTaskToReadyList+0x10c>)
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4a15      	ldr	r2, [pc, #84]	; (8003338 <prvAddNewTaskToReadyList+0x110>)
 80032e4:	441a      	add	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3304      	adds	r3, #4
 80032ea:	4619      	mov	r1, r3
 80032ec:	4610      	mov	r0, r2
 80032ee:	f7ff f8e2 	bl	80024b6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80032f2:	f001 fa77 	bl	80047e4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80032f6:	4b0d      	ldr	r3, [pc, #52]	; (800332c <prvAddNewTaskToReadyList+0x104>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00e      	beq.n	800331c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032fe:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <prvAddNewTaskToReadyList+0x100>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	429a      	cmp	r2, r3
 800330a:	d207      	bcs.n	800331c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800330c:	4b0b      	ldr	r3, [pc, #44]	; (800333c <prvAddNewTaskToReadyList+0x114>)
 800330e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800331c:	bf00      	nop
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bdb0      	pop	{r4, r5, r7, pc}
 8003324:	20000110 	.word	0x20000110
 8003328:	20000038 	.word	0x20000038
 800332c:	2000011c 	.word	0x2000011c
 8003330:	2000012c 	.word	0x2000012c
 8003334:	20000118 	.word	0x20000118
 8003338:	2000003c 	.word	0x2000003c
 800333c:	e000ed04 	.word	0xe000ed04

08003340 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003346:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <vTaskStartScheduler+0xa4>)
 8003348:	9301      	str	r3, [sp, #4]
 800334a:	2300      	movs	r3, #0
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	2300      	movs	r3, #0
 8003350:	2282      	movs	r2, #130	; 0x82
 8003352:	4925      	ldr	r1, [pc, #148]	; (80033e8 <vTaskStartScheduler+0xa8>)
 8003354:	4825      	ldr	r0, [pc, #148]	; (80033ec <vTaskStartScheduler+0xac>)
 8003356:	f7ff fe8f 	bl	8003078 <xTaskCreate>
 800335a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d102      	bne.n	8003368 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003362:	f000 fd4d 	bl	8003e00 <xTimerCreateTimerTask>
 8003366:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d124      	bne.n	80033b8 <vTaskStartScheduler+0x78>
        __asm volatile
 800336e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	60bb      	str	r3, [r7, #8]
    }
 8003380:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003382:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <vTaskStartScheduler+0xb0>)
 8003384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003388:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800338a:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <vTaskStartScheduler+0xb4>)
 800338c:	2201      	movs	r2, #1
 800338e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003390:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <vTaskStartScheduler+0xb8>)
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003396:	4b19      	ldr	r3, [pc, #100]	; (80033fc <vTaskStartScheduler+0xbc>)
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	4b12      	ldr	r3, [pc, #72]	; (80033e4 <vTaskStartScheduler+0xa4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d102      	bne.n	80033a8 <vTaskStartScheduler+0x68>
 80033a2:	f003 faed 	bl	8006980 <SEGGER_SYSVIEW_OnIdle>
 80033a6:	e004      	b.n	80033b2 <vTaskStartScheduler+0x72>
 80033a8:	4b14      	ldr	r3, [pc, #80]	; (80033fc <vTaskStartScheduler+0xbc>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f003 fb45 	bl	8006a3c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80033b2:	f001 f8c7 	bl	8004544 <xPortStartScheduler>
 80033b6:	e00e      	b.n	80033d6 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033be:	d10a      	bne.n	80033d6 <vTaskStartScheduler+0x96>
        __asm volatile
 80033c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	607b      	str	r3, [r7, #4]
    }
 80033d2:	bf00      	nop
 80033d4:	e7fe      	b.n	80033d4 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <vTaskStartScheduler+0xc0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
}
 80033da:	bf00      	nop
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000134 	.word	0x20000134
 80033e8:	08006fd0 	.word	0x08006fd0
 80033ec:	08003a71 	.word	0x08003a71
 80033f0:	20000130 	.word	0x20000130
 80033f4:	2000011c 	.word	0x2000011c
 80033f8:	20000114 	.word	0x20000114
 80033fc:	20000038 	.word	0x20000038
 8003400:	2000000c 	.word	0x2000000c

08003404 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003408:	4b04      	ldr	r3, [pc, #16]	; (800341c <vTaskSuspendAll+0x18>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3301      	adds	r3, #1
 800340e:	4a03      	ldr	r2, [pc, #12]	; (800341c <vTaskSuspendAll+0x18>)
 8003410:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003412:	bf00      	nop
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	20000138 	.word	0x20000138

08003420 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800342a:	2300      	movs	r3, #0
 800342c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800342e:	4b43      	ldr	r3, [pc, #268]	; (800353c <xTaskResumeAll+0x11c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10a      	bne.n	800344c <xTaskResumeAll+0x2c>
        __asm volatile
 8003436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	603b      	str	r3, [r7, #0]
    }
 8003448:	bf00      	nop
 800344a:	e7fe      	b.n	800344a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800344c:	f001 f99a 	bl	8004784 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003450:	4b3a      	ldr	r3, [pc, #232]	; (800353c <xTaskResumeAll+0x11c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3b01      	subs	r3, #1
 8003456:	4a39      	ldr	r2, [pc, #228]	; (800353c <xTaskResumeAll+0x11c>)
 8003458:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800345a:	4b38      	ldr	r3, [pc, #224]	; (800353c <xTaskResumeAll+0x11c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d165      	bne.n	800352e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003462:	4b37      	ldr	r3, [pc, #220]	; (8003540 <xTaskResumeAll+0x120>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d061      	beq.n	800352e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800346a:	e032      	b.n	80034d2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800346c:	4b35      	ldr	r3, [pc, #212]	; (8003544 <xTaskResumeAll+0x124>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	3318      	adds	r3, #24
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff f879 	bl	8002570 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	3304      	adds	r3, #4
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff f874 	bl	8002570 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4618      	mov	r0, r3
 800348c:	f003 fb18 	bl	8006ac0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	2201      	movs	r2, #1
 8003496:	409a      	lsls	r2, r3
 8003498:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <xTaskResumeAll+0x128>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4313      	orrs	r3, r2
 800349e:	4a2a      	ldr	r2, [pc, #168]	; (8003548 <xTaskResumeAll+0x128>)
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4a27      	ldr	r2, [pc, #156]	; (800354c <xTaskResumeAll+0x12c>)
 80034b0:	441a      	add	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	3304      	adds	r3, #4
 80034b6:	4619      	mov	r1, r3
 80034b8:	4610      	mov	r0, r2
 80034ba:	f7fe fffc 	bl	80024b6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c2:	4b23      	ldr	r3, [pc, #140]	; (8003550 <xTaskResumeAll+0x130>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d302      	bcc.n	80034d2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80034cc:	4b21      	ldr	r3, [pc, #132]	; (8003554 <xTaskResumeAll+0x134>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034d2:	4b1c      	ldr	r3, [pc, #112]	; (8003544 <xTaskResumeAll+0x124>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1c8      	bne.n	800346c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80034e0:	f000 fb5c 	bl	8003b9c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80034e4:	4b1c      	ldr	r3, [pc, #112]	; (8003558 <xTaskResumeAll+0x138>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d010      	beq.n	8003512 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80034f0:	f000 f858 	bl	80035a4 <xTaskIncrementTick>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80034fa:	4b16      	ldr	r3, [pc, #88]	; (8003554 <xTaskResumeAll+0x134>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3b01      	subs	r3, #1
 8003504:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f1      	bne.n	80034f0 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800350c:	4b12      	ldr	r3, [pc, #72]	; (8003558 <xTaskResumeAll+0x138>)
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003512:	4b10      	ldr	r3, [pc, #64]	; (8003554 <xTaskResumeAll+0x134>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800351a:	2301      	movs	r3, #1
 800351c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800351e:	4b0f      	ldr	r3, [pc, #60]	; (800355c <xTaskResumeAll+0x13c>)
 8003520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800352e:	f001 f959 	bl	80047e4 <vPortExitCritical>

    return xAlreadyYielded;
 8003532:	68bb      	ldr	r3, [r7, #8]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	20000138 	.word	0x20000138
 8003540:	20000110 	.word	0x20000110
 8003544:	200000d0 	.word	0x200000d0
 8003548:	20000118 	.word	0x20000118
 800354c:	2000003c 	.word	0x2000003c
 8003550:	20000038 	.word	0x20000038
 8003554:	20000124 	.word	0x20000124
 8003558:	20000120 	.word	0x20000120
 800355c:	e000ed04 	.word	0xe000ed04

08003560 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003566:	4b05      	ldr	r3, [pc, #20]	; (800357c <xTaskGetTickCount+0x1c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800356c:	687b      	ldr	r3, [r7, #4]
}
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	20000114 	.word	0x20000114

08003580 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003586:	f001 f9e9 	bl	800495c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800358a:	2300      	movs	r3, #0
 800358c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800358e:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <xTaskGetTickCountFromISR+0x20>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003594:	683b      	ldr	r3, [r7, #0]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20000114 	.word	0x20000114

080035a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035ae:	4b50      	ldr	r3, [pc, #320]	; (80036f0 <xTaskIncrementTick+0x14c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f040 8092 	bne.w	80036dc <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035b8:	4b4e      	ldr	r3, [pc, #312]	; (80036f4 <xTaskIncrementTick+0x150>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3301      	adds	r3, #1
 80035be:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80035c0:	4a4c      	ldr	r2, [pc, #304]	; (80036f4 <xTaskIncrementTick+0x150>)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d120      	bne.n	800360e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80035cc:	4b4a      	ldr	r3, [pc, #296]	; (80036f8 <xTaskIncrementTick+0x154>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <xTaskIncrementTick+0x48>
        __asm volatile
 80035d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035da:	f383 8811 	msr	BASEPRI, r3
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	603b      	str	r3, [r7, #0]
    }
 80035e8:	bf00      	nop
 80035ea:	e7fe      	b.n	80035ea <xTaskIncrementTick+0x46>
 80035ec:	4b42      	ldr	r3, [pc, #264]	; (80036f8 <xTaskIncrementTick+0x154>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	4b42      	ldr	r3, [pc, #264]	; (80036fc <xTaskIncrementTick+0x158>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a40      	ldr	r2, [pc, #256]	; (80036f8 <xTaskIncrementTick+0x154>)
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	4a40      	ldr	r2, [pc, #256]	; (80036fc <xTaskIncrementTick+0x158>)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	4b3f      	ldr	r3, [pc, #252]	; (8003700 <xTaskIncrementTick+0x15c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3301      	adds	r3, #1
 8003606:	4a3e      	ldr	r2, [pc, #248]	; (8003700 <xTaskIncrementTick+0x15c>)
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	f000 fac7 	bl	8003b9c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800360e:	4b3d      	ldr	r3, [pc, #244]	; (8003704 <xTaskIncrementTick+0x160>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	429a      	cmp	r2, r3
 8003616:	d34c      	bcc.n	80036b2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003618:	4b37      	ldr	r3, [pc, #220]	; (80036f8 <xTaskIncrementTick+0x154>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d104      	bne.n	800362c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003622:	4b38      	ldr	r3, [pc, #224]	; (8003704 <xTaskIncrementTick+0x160>)
 8003624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003628:	601a      	str	r2, [r3, #0]
                    break;
 800362a:	e042      	b.n	80036b2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800362c:	4b32      	ldr	r3, [pc, #200]	; (80036f8 <xTaskIncrementTick+0x154>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	429a      	cmp	r2, r3
 8003642:	d203      	bcs.n	800364c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003644:	4a2f      	ldr	r2, [pc, #188]	; (8003704 <xTaskIncrementTick+0x160>)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800364a:	e032      	b.n	80036b2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	3304      	adds	r3, #4
 8003650:	4618      	mov	r0, r3
 8003652:	f7fe ff8d 	bl	8002570 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	2b00      	cmp	r3, #0
 800365c:	d004      	beq.n	8003668 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	3318      	adds	r3, #24
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe ff84 	bl	8002570 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4618      	mov	r0, r3
 800366c:	f003 fa28 	bl	8006ac0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	2201      	movs	r2, #1
 8003676:	409a      	lsls	r2, r3
 8003678:	4b23      	ldr	r3, [pc, #140]	; (8003708 <xTaskIncrementTick+0x164>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4313      	orrs	r3, r2
 800367e:	4a22      	ldr	r2, [pc, #136]	; (8003708 <xTaskIncrementTick+0x164>)
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4a1f      	ldr	r2, [pc, #124]	; (800370c <xTaskIncrementTick+0x168>)
 8003690:	441a      	add	r2, r3
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	3304      	adds	r3, #4
 8003696:	4619      	mov	r1, r3
 8003698:	4610      	mov	r0, r2
 800369a:	f7fe ff0c 	bl	80024b6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a2:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <xTaskIncrementTick+0x16c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3b5      	bcc.n	8003618 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80036ac:	2301      	movs	r3, #1
 80036ae:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036b0:	e7b2      	b.n	8003618 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036b2:	4b17      	ldr	r3, [pc, #92]	; (8003710 <xTaskIncrementTick+0x16c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b8:	4914      	ldr	r1, [pc, #80]	; (800370c <xTaskIncrementTick+0x168>)
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d901      	bls.n	80036ce <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80036ca:	2301      	movs	r3, #1
 80036cc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80036ce:	4b11      	ldr	r3, [pc, #68]	; (8003714 <xTaskIncrementTick+0x170>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d007      	beq.n	80036e6 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80036d6:	2301      	movs	r3, #1
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	e004      	b.n	80036e6 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80036dc:	4b0e      	ldr	r3, [pc, #56]	; (8003718 <xTaskIncrementTick+0x174>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3301      	adds	r3, #1
 80036e2:	4a0d      	ldr	r2, [pc, #52]	; (8003718 <xTaskIncrementTick+0x174>)
 80036e4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80036e6:	697b      	ldr	r3, [r7, #20]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20000138 	.word	0x20000138
 80036f4:	20000114 	.word	0x20000114
 80036f8:	200000c8 	.word	0x200000c8
 80036fc:	200000cc 	.word	0x200000cc
 8003700:	20000128 	.word	0x20000128
 8003704:	20000130 	.word	0x20000130
 8003708:	20000118 	.word	0x20000118
 800370c:	2000003c 	.word	0x2000003c
 8003710:	20000038 	.word	0x20000038
 8003714:	20000124 	.word	0x20000124
 8003718:	20000120 	.word	0x20000120

0800371c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003722:	4b2d      	ldr	r3, [pc, #180]	; (80037d8 <vTaskSwitchContext+0xbc>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800372a:	4b2c      	ldr	r3, [pc, #176]	; (80037dc <vTaskSwitchContext+0xc0>)
 800372c:	2201      	movs	r2, #1
 800372e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003730:	e04d      	b.n	80037ce <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003732:	4b2a      	ldr	r3, [pc, #168]	; (80037dc <vTaskSwitchContext+0xc0>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003738:	4b29      	ldr	r3, [pc, #164]	; (80037e0 <vTaskSwitchContext+0xc4>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	fab3 f383 	clz	r3, r3
 8003744:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003746:	7afb      	ldrb	r3, [r7, #11]
 8003748:	f1c3 031f 	rsb	r3, r3, #31
 800374c:	617b      	str	r3, [r7, #20]
 800374e:	4925      	ldr	r1, [pc, #148]	; (80037e4 <vTaskSwitchContext+0xc8>)
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10a      	bne.n	8003778 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003766:	f383 8811 	msr	BASEPRI, r3
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	607b      	str	r3, [r7, #4]
    }
 8003774:	bf00      	nop
 8003776:	e7fe      	b.n	8003776 <vTaskSwitchContext+0x5a>
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4a18      	ldr	r2, [pc, #96]	; (80037e4 <vTaskSwitchContext+0xc8>)
 8003784:	4413      	add	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	3308      	adds	r3, #8
 800379a:	429a      	cmp	r2, r3
 800379c:	d104      	bne.n	80037a8 <vTaskSwitchContext+0x8c>
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	605a      	str	r2, [r3, #4]
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	4a0e      	ldr	r2, [pc, #56]	; (80037e8 <vTaskSwitchContext+0xcc>)
 80037b0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80037b2:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <vTaskSwitchContext+0xcc>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <vTaskSwitchContext+0xd0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d102      	bne.n	80037c4 <vTaskSwitchContext+0xa8>
 80037be:	f003 f8df 	bl	8006980 <SEGGER_SYSVIEW_OnIdle>
}
 80037c2:	e004      	b.n	80037ce <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80037c4:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <vTaskSwitchContext+0xcc>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f003 f937 	bl	8006a3c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80037ce:	bf00      	nop
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20000138 	.word	0x20000138
 80037dc:	20000124 	.word	0x20000124
 80037e0:	20000118 	.word	0x20000118
 80037e4:	2000003c 	.word	0x2000003c
 80037e8:	20000038 	.word	0x20000038
 80037ec:	20000134 	.word	0x20000134

080037f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10a      	bne.n	8003816 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	60fb      	str	r3, [r7, #12]
    }
 8003812:	bf00      	nop
 8003814:	e7fe      	b.n	8003814 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003816:	4b07      	ldr	r3, [pc, #28]	; (8003834 <vTaskPlaceOnEventList+0x44>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3318      	adds	r3, #24
 800381c:	4619      	mov	r1, r3
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fe fe6d 	bl	80024fe <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003824:	2101      	movs	r1, #1
 8003826:	6838      	ldr	r0, [r7, #0]
 8003828:	f000 fa72 	bl	8003d10 <prvAddCurrentTaskToDelayedList>
}
 800382c:	bf00      	nop
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	20000038 	.word	0x20000038

08003838 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10a      	bne.n	8003860 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800384a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384e:	f383 8811 	msr	BASEPRI, r3
 8003852:	f3bf 8f6f 	isb	sy
 8003856:	f3bf 8f4f 	dsb	sy
 800385a:	617b      	str	r3, [r7, #20]
    }
 800385c:	bf00      	nop
 800385e:	e7fe      	b.n	800385e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003860:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <vTaskPlaceOnEventListRestricted+0x58>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3318      	adds	r3, #24
 8003866:	4619      	mov	r1, r3
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f7fe fe24 	bl	80024b6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003878:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800387a:	2024      	movs	r0, #36	; 0x24
 800387c:	f002 fb80 	bl	8005f80 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	68b8      	ldr	r0, [r7, #8]
 8003884:	f000 fa44 	bl	8003d10 <prvAddCurrentTaskToDelayedList>
    }
 8003888:	bf00      	nop
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	20000038 	.word	0x20000038

08003894 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10a      	bne.n	80038c0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80038aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ae:	f383 8811 	msr	BASEPRI, r3
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	60fb      	str	r3, [r7, #12]
    }
 80038bc:	bf00      	nop
 80038be:	e7fe      	b.n	80038be <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	3318      	adds	r3, #24
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fe fe53 	bl	8002570 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038ca:	4b1f      	ldr	r3, [pc, #124]	; (8003948 <xTaskRemoveFromEventList+0xb4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d120      	bne.n	8003914 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	3304      	adds	r3, #4
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fe fe4a 	bl	8002570 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4618      	mov	r0, r3
 80038e0:	f003 f8ee 	bl	8006ac0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	2201      	movs	r2, #1
 80038ea:	409a      	lsls	r2, r3
 80038ec:	4b17      	ldr	r3, [pc, #92]	; (800394c <xTaskRemoveFromEventList+0xb8>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	4a16      	ldr	r2, [pc, #88]	; (800394c <xTaskRemoveFromEventList+0xb8>)
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4a13      	ldr	r2, [pc, #76]	; (8003950 <xTaskRemoveFromEventList+0xbc>)
 8003904:	441a      	add	r2, r3
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	3304      	adds	r3, #4
 800390a:	4619      	mov	r1, r3
 800390c:	4610      	mov	r0, r2
 800390e:	f7fe fdd2 	bl	80024b6 <vListInsertEnd>
 8003912:	e005      	b.n	8003920 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	3318      	adds	r3, #24
 8003918:	4619      	mov	r1, r3
 800391a:	480e      	ldr	r0, [pc, #56]	; (8003954 <xTaskRemoveFromEventList+0xc0>)
 800391c:	f7fe fdcb 	bl	80024b6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003924:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <xTaskRemoveFromEventList+0xc4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	429a      	cmp	r2, r3
 800392c:	d905      	bls.n	800393a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800392e:	2301      	movs	r3, #1
 8003930:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003932:	4b0a      	ldr	r3, [pc, #40]	; (800395c <xTaskRemoveFromEventList+0xc8>)
 8003934:	2201      	movs	r2, #1
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e001      	b.n	800393e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800393e:	697b      	ldr	r3, [r7, #20]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	20000138 	.word	0x20000138
 800394c:	20000118 	.word	0x20000118
 8003950:	2000003c 	.word	0x2000003c
 8003954:	200000d0 	.word	0x200000d0
 8003958:	20000038 	.word	0x20000038
 800395c:	20000124 	.word	0x20000124

08003960 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003968:	4b06      	ldr	r3, [pc, #24]	; (8003984 <vTaskInternalSetTimeOutState+0x24>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <vTaskInternalSetTimeOutState+0x28>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	605a      	str	r2, [r3, #4]
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	20000128 	.word	0x20000128
 8003988:	20000114 	.word	0x20000114

0800398c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10a      	bne.n	80039b2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800399c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a0:	f383 8811 	msr	BASEPRI, r3
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	613b      	str	r3, [r7, #16]
    }
 80039ae:	bf00      	nop
 80039b0:	e7fe      	b.n	80039b0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10a      	bne.n	80039ce <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80039b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	60fb      	str	r3, [r7, #12]
    }
 80039ca:	bf00      	nop
 80039cc:	e7fe      	b.n	80039cc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80039ce:	f000 fed9 	bl	8004784 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80039d2:	4b1f      	ldr	r3, [pc, #124]	; (8003a50 <xTaskCheckForTimeOut+0xc4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ea:	d102      	bne.n	80039f2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61fb      	str	r3, [r7, #28]
 80039f0:	e026      	b.n	8003a40 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4b17      	ldr	r3, [pc, #92]	; (8003a54 <xTaskCheckForTimeOut+0xc8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d00a      	beq.n	8003a14 <xTaskCheckForTimeOut+0x88>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d305      	bcc.n	8003a14 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	e015      	b.n	8003a40 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d20b      	bcs.n	8003a36 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	1ad2      	subs	r2, r2, r3
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff ff98 	bl	8003960 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	e004      	b.n	8003a40 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003a40:	f000 fed0 	bl	80047e4 <vPortExitCritical>

    return xReturn;
 8003a44:	69fb      	ldr	r3, [r7, #28]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3720      	adds	r7, #32
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000114 	.word	0x20000114
 8003a54:	20000128 	.word	0x20000128

08003a58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003a5c:	4b03      	ldr	r3, [pc, #12]	; (8003a6c <vTaskMissedYield+0x14>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	601a      	str	r2, [r3, #0]
}
 8003a62:	bf00      	nop
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	20000124 	.word	0x20000124

08003a70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003a78:	f000 f852 	bl	8003b20 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a7c:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <prvIdleTask+0x28>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d9f9      	bls.n	8003a78 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003a84:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <prvIdleTask+0x2c>)
 8003a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003a94:	e7f0      	b.n	8003a78 <prvIdleTask+0x8>
 8003a96:	bf00      	nop
 8003a98:	2000003c 	.word	0x2000003c
 8003a9c:	e000ed04 	.word	0xe000ed04

08003aa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	607b      	str	r3, [r7, #4]
 8003aaa:	e00c      	b.n	8003ac6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4a12      	ldr	r2, [pc, #72]	; (8003b00 <prvInitialiseTaskLists+0x60>)
 8003ab8:	4413      	add	r3, r2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe fcce 	bl	800245c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	607b      	str	r3, [r7, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d9ef      	bls.n	8003aac <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003acc:	480d      	ldr	r0, [pc, #52]	; (8003b04 <prvInitialiseTaskLists+0x64>)
 8003ace:	f7fe fcc5 	bl	800245c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003ad2:	480d      	ldr	r0, [pc, #52]	; (8003b08 <prvInitialiseTaskLists+0x68>)
 8003ad4:	f7fe fcc2 	bl	800245c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003ad8:	480c      	ldr	r0, [pc, #48]	; (8003b0c <prvInitialiseTaskLists+0x6c>)
 8003ada:	f7fe fcbf 	bl	800245c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003ade:	480c      	ldr	r0, [pc, #48]	; (8003b10 <prvInitialiseTaskLists+0x70>)
 8003ae0:	f7fe fcbc 	bl	800245c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003ae4:	480b      	ldr	r0, [pc, #44]	; (8003b14 <prvInitialiseTaskLists+0x74>)
 8003ae6:	f7fe fcb9 	bl	800245c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003aea:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <prvInitialiseTaskLists+0x78>)
 8003aec:	4a05      	ldr	r2, [pc, #20]	; (8003b04 <prvInitialiseTaskLists+0x64>)
 8003aee:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003af0:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <prvInitialiseTaskLists+0x7c>)
 8003af2:	4a05      	ldr	r2, [pc, #20]	; (8003b08 <prvInitialiseTaskLists+0x68>)
 8003af4:	601a      	str	r2, [r3, #0]
}
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	2000003c 	.word	0x2000003c
 8003b04:	200000a0 	.word	0x200000a0
 8003b08:	200000b4 	.word	0x200000b4
 8003b0c:	200000d0 	.word	0x200000d0
 8003b10:	200000e4 	.word	0x200000e4
 8003b14:	200000fc 	.word	0x200000fc
 8003b18:	200000c8 	.word	0x200000c8
 8003b1c:	200000cc 	.word	0x200000cc

08003b20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b26:	e019      	b.n	8003b5c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003b28:	f000 fe2c 	bl	8004784 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b2c:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <prvCheckTasksWaitingTermination+0x50>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3304      	adds	r3, #4
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fe fd19 	bl	8002570 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003b3e:	4b0d      	ldr	r3, [pc, #52]	; (8003b74 <prvCheckTasksWaitingTermination+0x54>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	4a0b      	ldr	r2, [pc, #44]	; (8003b74 <prvCheckTasksWaitingTermination+0x54>)
 8003b46:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <prvCheckTasksWaitingTermination+0x58>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	4a0a      	ldr	r2, [pc, #40]	; (8003b78 <prvCheckTasksWaitingTermination+0x58>)
 8003b50:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003b52:	f000 fe47 	bl	80047e4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f810 	bl	8003b7c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b5c:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <prvCheckTasksWaitingTermination+0x58>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e1      	bne.n	8003b28 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	200000e4 	.word	0x200000e4
 8003b74:	20000110 	.word	0x20000110
 8003b78:	200000f8 	.word	0x200000f8

08003b7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f001 f807 	bl	8004b9c <vPortFree>
                vPortFree( pxTCB );
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f001 f804 	bl	8004b9c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003b94:	bf00      	nop
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ba0:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <prvResetNextTaskUnblockTime+0x30>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d104      	bne.n	8003bb4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <prvResetNextTaskUnblockTime+0x34>)
 8003bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bb0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003bb2:	e005      	b.n	8003bc0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003bb4:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <prvResetNextTaskUnblockTime+0x30>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a04      	ldr	r2, [pc, #16]	; (8003bd0 <prvResetNextTaskUnblockTime+0x34>)
 8003bbe:	6013      	str	r3, [r2, #0]
}
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	200000c8 	.word	0x200000c8
 8003bd0:	20000130 	.word	0x20000130

08003bd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003bda:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <xTaskGetSchedulerState+0x34>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d102      	bne.n	8003be8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003be2:	2301      	movs	r3, #1
 8003be4:	607b      	str	r3, [r7, #4]
 8003be6:	e008      	b.n	8003bfa <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003be8:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <xTaskGetSchedulerState+0x38>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d102      	bne.n	8003bf6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	607b      	str	r3, [r7, #4]
 8003bf4:	e001      	b.n	8003bfa <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003bfa:	687b      	ldr	r3, [r7, #4]
    }
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	2000011c 	.word	0x2000011c
 8003c0c:	20000138 	.word	0x20000138

08003c10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d068      	beq.n	8003cf8 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003c26:	4b37      	ldr	r3, [pc, #220]	; (8003d04 <xTaskPriorityDisinherit+0xf4>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d00a      	beq.n	8003c46 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	60fb      	str	r3, [r7, #12]
    }
 8003c42:	bf00      	nop
 8003c44:	e7fe      	b.n	8003c44 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c52:	f383 8811 	msr	BASEPRI, r3
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	f3bf 8f4f 	dsb	sy
 8003c5e:	60bb      	str	r3, [r7, #8]
    }
 8003c60:	bf00      	nop
 8003c62:	e7fe      	b.n	8003c62 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c68:	1e5a      	subs	r2, r3, #1
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d03e      	beq.n	8003cf8 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d13a      	bne.n	8003cf8 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	3304      	adds	r3, #4
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe fc72 	bl	8002570 <uxListRemove>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	2201      	movs	r2, #1
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43da      	mvns	r2, r3
 8003c9e:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <xTaskPriorityDisinherit+0xf8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	4a18      	ldr	r2, [pc, #96]	; (8003d08 <xTaskPriorityDisinherit+0xf8>)
 8003ca6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4619      	mov	r1, r3
 8003cac:	204a      	movs	r0, #74	; 0x4a
 8003cae:	f002 f985 	bl	8005fbc <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbe:	f1c3 0205 	rsb	r2, r3, #5
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cca:	2201      	movs	r2, #1
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	4b0e      	ldr	r3, [pc, #56]	; (8003d08 <xTaskPriorityDisinherit+0xf8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	4a0c      	ldr	r2, [pc, #48]	; (8003d08 <xTaskPriorityDisinherit+0xf8>)
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4a09      	ldr	r2, [pc, #36]	; (8003d0c <xTaskPriorityDisinherit+0xfc>)
 8003ce6:	441a      	add	r2, r3
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	3304      	adds	r3, #4
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f7fe fbe1 	bl	80024b6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003cf8:	697b      	ldr	r3, [r7, #20]
    }
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20000038 	.word	0x20000038
 8003d08:	20000118 	.word	0x20000118
 8003d0c:	2000003c 	.word	0x2000003c

08003d10 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003d1a:	4b32      	ldr	r3, [pc, #200]	; (8003de4 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d20:	4b31      	ldr	r3, [pc, #196]	; (8003de8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3304      	adds	r3, #4
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fe fc22 	bl	8002570 <uxListRemove>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10b      	bne.n	8003d4a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003d32:	4b2d      	ldr	r3, [pc, #180]	; (8003de8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	2201      	movs	r2, #1
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43da      	mvns	r2, r3
 8003d40:	4b2a      	ldr	r3, [pc, #168]	; (8003dec <prvAddCurrentTaskToDelayedList+0xdc>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4013      	ands	r3, r2
 8003d46:	4a29      	ldr	r2, [pc, #164]	; (8003dec <prvAddCurrentTaskToDelayedList+0xdc>)
 8003d48:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d50:	d110      	bne.n	8003d74 <prvAddCurrentTaskToDelayedList+0x64>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00d      	beq.n	8003d74 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003d58:	4b23      	ldr	r3, [pc, #140]	; (8003de8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	211b      	movs	r1, #27
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f002 fef0 	bl	8006b44 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d64:	4b20      	ldr	r3, [pc, #128]	; (8003de8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4820      	ldr	r0, [pc, #128]	; (8003df0 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003d6e:	f7fe fba2 	bl	80024b6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003d72:	e032      	b.n	8003dda <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4413      	add	r3, r2
 8003d7a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d7c:	4b1a      	ldr	r3, [pc, #104]	; (8003de8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d20f      	bcs.n	8003dac <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003d8c:	4b16      	ldr	r3, [pc, #88]	; (8003de8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2104      	movs	r1, #4
 8003d92:	4618      	mov	r0, r3
 8003d94:	f002 fed6 	bl	8006b44 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d98:	4b16      	ldr	r3, [pc, #88]	; (8003df4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	4b12      	ldr	r3, [pc, #72]	; (8003de8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3304      	adds	r3, #4
 8003da2:	4619      	mov	r1, r3
 8003da4:	4610      	mov	r0, r2
 8003da6:	f7fe fbaa 	bl	80024fe <vListInsert>
}
 8003daa:	e016      	b.n	8003dda <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003dac:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2104      	movs	r1, #4
 8003db2:	4618      	mov	r0, r3
 8003db4:	f002 fec6 	bl	8006b44 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003db8:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	f7fe fb9a 	bl	80024fe <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003dca:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <prvAddCurrentTaskToDelayedList+0xec>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d202      	bcs.n	8003dda <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003dd4:	4a09      	ldr	r2, [pc, #36]	; (8003dfc <prvAddCurrentTaskToDelayedList+0xec>)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	6013      	str	r3, [r2, #0]
}
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000114 	.word	0x20000114
 8003de8:	20000038 	.word	0x20000038
 8003dec:	20000118 	.word	0x20000118
 8003df0:	200000fc 	.word	0x200000fc
 8003df4:	200000cc 	.word	0x200000cc
 8003df8:	200000c8 	.word	0x200000c8
 8003dfc:	20000130 	.word	0x20000130

08003e00 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003e0a:	f000 fad5 	bl	80043b8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003e0e:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <xTimerCreateTimerTask+0x54>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00b      	beq.n	8003e2e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003e16:	4b10      	ldr	r3, [pc, #64]	; (8003e58 <xTimerCreateTimerTask+0x58>)
 8003e18:	9301      	str	r3, [sp, #4]
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e24:	490d      	ldr	r1, [pc, #52]	; (8003e5c <xTimerCreateTimerTask+0x5c>)
 8003e26:	480e      	ldr	r0, [pc, #56]	; (8003e60 <xTimerCreateTimerTask+0x60>)
 8003e28:	f7ff f926 	bl	8003078 <xTaskCreate>
 8003e2c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10a      	bne.n	8003e4a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e38:	f383 8811 	msr	BASEPRI, r3
 8003e3c:	f3bf 8f6f 	isb	sy
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	603b      	str	r3, [r7, #0]
    }
 8003e46:	bf00      	nop
 8003e48:	e7fe      	b.n	8003e48 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003e4a:	687b      	ldr	r3, [r7, #4]
    }
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	2000016c 	.word	0x2000016c
 8003e58:	20000170 	.word	0x20000170
 8003e5c:	08006fd8 	.word	0x08006fd8
 8003e60:	08003f99 	.word	0x08003f99

08003e64 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08a      	sub	sp, #40	; 0x28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10a      	bne.n	8003e92 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	623b      	str	r3, [r7, #32]
    }
 8003e8e:	bf00      	nop
 8003e90:	e7fe      	b.n	8003e90 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003e92:	4b1a      	ldr	r3, [pc, #104]	; (8003efc <xTimerGenericCommand+0x98>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d02a      	beq.n	8003ef0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b05      	cmp	r3, #5
 8003eaa:	dc18      	bgt.n	8003ede <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003eac:	f7ff fe92 	bl	8003bd4 <xTaskGetSchedulerState>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d109      	bne.n	8003eca <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003eb6:	4b11      	ldr	r3, [pc, #68]	; (8003efc <xTimerGenericCommand+0x98>)
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	f107 0114 	add.w	r1, r7, #20
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ec2:	f7fe fc6f 	bl	80027a4 <xQueueGenericSend>
 8003ec6:	6278      	str	r0, [r7, #36]	; 0x24
 8003ec8:	e012      	b.n	8003ef0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003eca:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <xTimerGenericCommand+0x98>)
 8003ecc:	6818      	ldr	r0, [r3, #0]
 8003ece:	f107 0114 	add.w	r1, r7, #20
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f7fe fc65 	bl	80027a4 <xQueueGenericSend>
 8003eda:	6278      	str	r0, [r7, #36]	; 0x24
 8003edc:	e008      	b.n	8003ef0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ede:	4b07      	ldr	r3, [pc, #28]	; (8003efc <xTimerGenericCommand+0x98>)
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	f107 0114 	add.w	r1, r7, #20
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	f7fe fd81 	bl	80029f0 <xQueueGenericSendFromISR>
 8003eee:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3728      	adds	r7, #40	; 0x28
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	2000016c 	.word	0x2000016c

08003f00 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f0a:	4b22      	ldr	r3, [pc, #136]	; (8003f94 <prvProcessExpiredTimer+0x94>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	3304      	adds	r3, #4
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fe fb29 	bl	8002570 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d022      	beq.n	8003f72 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	699a      	ldr	r2, [r3, #24]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	18d1      	adds	r1, r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	6978      	ldr	r0, [r7, #20]
 8003f3a:	f000 f8d1 	bl	80040e0 <prvInsertTimerInActiveList>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d01f      	beq.n	8003f84 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f44:	2300      	movs	r3, #0
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	2300      	movs	r3, #0
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	6978      	ldr	r0, [r7, #20]
 8003f50:	f7ff ff88 	bl	8003e64 <xTimerGenericCommand>
 8003f54:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d113      	bne.n	8003f84 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	60fb      	str	r3, [r7, #12]
    }
 8003f6e:	bf00      	nop
 8003f70:	e7fe      	b.n	8003f70 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	6978      	ldr	r0, [r7, #20]
 8003f8a:	4798      	blx	r3
    }
 8003f8c:	bf00      	nop
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000164 	.word	0x20000164

08003f98 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fa0:	f107 0308 	add.w	r3, r7, #8
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 f857 	bl	8004058 <prvGetNextExpireTime>
 8003faa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4619      	mov	r1, r3
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 f803 	bl	8003fbc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003fb6:	f000 f8d5 	bl	8004164 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fba:	e7f1      	b.n	8003fa0 <prvTimerTask+0x8>

08003fbc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003fc6:	f7ff fa1d 	bl	8003404 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fca:	f107 0308 	add.w	r3, r7, #8
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 f866 	bl	80040a0 <prvSampleTimeNow>
 8003fd4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d130      	bne.n	800403e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10a      	bne.n	8003ff8 <prvProcessTimerOrBlockTask+0x3c>
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d806      	bhi.n	8003ff8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003fea:	f7ff fa19 	bl	8003420 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003fee:	68f9      	ldr	r1, [r7, #12]
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff ff85 	bl	8003f00 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003ff6:	e024      	b.n	8004042 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d008      	beq.n	8004010 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003ffe:	4b13      	ldr	r3, [pc, #76]	; (800404c <prvProcessTimerOrBlockTask+0x90>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <prvProcessTimerOrBlockTask+0x50>
 8004008:	2301      	movs	r3, #1
 800400a:	e000      	b.n	800400e <prvProcessTimerOrBlockTask+0x52>
 800400c:	2300      	movs	r3, #0
 800400e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004010:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <prvProcessTimerOrBlockTask+0x94>)
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	4619      	mov	r1, r3
 800401e:	f7fe fff7 	bl	8003010 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004022:	f7ff f9fd 	bl	8003420 <xTaskResumeAll>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10a      	bne.n	8004042 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800402c:	4b09      	ldr	r3, [pc, #36]	; (8004054 <prvProcessTimerOrBlockTask+0x98>)
 800402e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	f3bf 8f6f 	isb	sy
    }
 800403c:	e001      	b.n	8004042 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800403e:	f7ff f9ef 	bl	8003420 <xTaskResumeAll>
    }
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000168 	.word	0x20000168
 8004050:	2000016c 	.word	0x2000016c
 8004054:	e000ed04 	.word	0xe000ed04

08004058 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004060:	4b0e      	ldr	r3, [pc, #56]	; (800409c <prvGetNextExpireTime+0x44>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <prvGetNextExpireTime+0x16>
 800406a:	2201      	movs	r2, #1
 800406c:	e000      	b.n	8004070 <prvGetNextExpireTime+0x18>
 800406e:	2200      	movs	r2, #0
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d105      	bne.n	8004088 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800407c:	4b07      	ldr	r3, [pc, #28]	; (800409c <prvGetNextExpireTime+0x44>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	e001      	b.n	800408c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004088:	2300      	movs	r3, #0
 800408a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800408c:	68fb      	ldr	r3, [r7, #12]
    }
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	20000164 	.word	0x20000164

080040a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80040a8:	f7ff fa5a 	bl	8003560 <xTaskGetTickCount>
 80040ac:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80040ae:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <prvSampleTimeNow+0x3c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d205      	bcs.n	80040c4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80040b8:	f000 f91a 	bl	80042f0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	e002      	b.n	80040ca <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80040ca:	4a04      	ldr	r2, [pc, #16]	; (80040dc <prvSampleTimeNow+0x3c>)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80040d0:	68fb      	ldr	r3, [r7, #12]
    }
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000174 	.word	0x20000174

080040e0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	429a      	cmp	r2, r3
 8004104:	d812      	bhi.n	800412c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	1ad2      	subs	r2, r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	429a      	cmp	r2, r3
 8004112:	d302      	bcc.n	800411a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004114:	2301      	movs	r3, #1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	e01b      	b.n	8004152 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800411a:	4b10      	ldr	r3, [pc, #64]	; (800415c <prvInsertTimerInActiveList+0x7c>)
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	3304      	adds	r3, #4
 8004122:	4619      	mov	r1, r3
 8004124:	4610      	mov	r0, r2
 8004126:	f7fe f9ea 	bl	80024fe <vListInsert>
 800412a:	e012      	b.n	8004152 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d206      	bcs.n	8004142 <prvInsertTimerInActiveList+0x62>
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d302      	bcc.n	8004142 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800413c:	2301      	movs	r3, #1
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	e007      	b.n	8004152 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004142:	4b07      	ldr	r3, [pc, #28]	; (8004160 <prvInsertTimerInActiveList+0x80>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	3304      	adds	r3, #4
 800414a:	4619      	mov	r1, r3
 800414c:	4610      	mov	r0, r2
 800414e:	f7fe f9d6 	bl	80024fe <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004152:	697b      	ldr	r3, [r7, #20]
    }
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	20000168 	.word	0x20000168
 8004160:	20000164 	.word	0x20000164

08004164 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004164:	b580      	push	{r7, lr}
 8004166:	b08c      	sub	sp, #48	; 0x30
 8004168:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800416a:	e0ae      	b.n	80042ca <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	f2c0 80aa 	blt.w	80042c8 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d004      	beq.n	800418a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	3304      	adds	r3, #4
 8004184:	4618      	mov	r0, r3
 8004186:	f7fe f9f3 	bl	8002570 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800418a:	1d3b      	adds	r3, r7, #4
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff ff87 	bl	80040a0 <prvSampleTimeNow>
 8004192:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b09      	cmp	r3, #9
 8004198:	f200 8097 	bhi.w	80042ca <prvProcessReceivedCommands+0x166>
 800419c:	a201      	add	r2, pc, #4	; (adr r2, 80041a4 <prvProcessReceivedCommands+0x40>)
 800419e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a2:	bf00      	nop
 80041a4:	080041cd 	.word	0x080041cd
 80041a8:	080041cd 	.word	0x080041cd
 80041ac:	080041cd 	.word	0x080041cd
 80041b0:	08004241 	.word	0x08004241
 80041b4:	08004255 	.word	0x08004255
 80041b8:	0800429f 	.word	0x0800429f
 80041bc:	080041cd 	.word	0x080041cd
 80041c0:	080041cd 	.word	0x080041cd
 80041c4:	08004241 	.word	0x08004241
 80041c8:	08004255 	.word	0x08004255
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041d2:	f043 0301 	orr.w	r3, r3, #1
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	18d1      	adds	r1, r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a3a      	ldr	r2, [r7, #32]
 80041ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041ec:	f7ff ff78 	bl	80040e0 <prvInsertTimerInActiveList>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d069      	beq.n	80042ca <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041fc:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d05e      	beq.n	80042ca <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	441a      	add	r2, r3
 8004214:	2300      	movs	r3, #0
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	2300      	movs	r3, #0
 800421a:	2100      	movs	r1, #0
 800421c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800421e:	f7ff fe21 	bl	8003e64 <xTimerGenericCommand>
 8004222:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d14f      	bne.n	80042ca <prvProcessReceivedCommands+0x166>
        __asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	61bb      	str	r3, [r7, #24]
    }
 800423c:	bf00      	nop
 800423e:	e7fe      	b.n	800423e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004246:	f023 0301 	bic.w	r3, r3, #1
 800424a:	b2da      	uxtb	r2, r3
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004252:	e03a      	b.n	80042ca <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800425a:	f043 0301 	orr.w	r3, r3, #1
 800425e:	b2da      	uxtb	r2, r3
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10a      	bne.n	800428a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	617b      	str	r3, [r7, #20]
    }
 8004286:	bf00      	nop
 8004288:	e7fe      	b.n	8004288 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	699a      	ldr	r2, [r3, #24]
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	18d1      	adds	r1, r2, r3
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	6a3a      	ldr	r2, [r7, #32]
 8004296:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004298:	f7ff ff22 	bl	80040e0 <prvInsertTimerInActiveList>
                        break;
 800429c:	e015      	b.n	80042ca <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d103      	bne.n	80042b4 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80042ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042ae:	f000 fc75 	bl	8004b9c <vPortFree>
 80042b2:	e00a      	b.n	80042ca <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042ba:	f023 0301 	bic.w	r3, r3, #1
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80042c6:	e000      	b.n	80042ca <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80042c8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042ca:	4b08      	ldr	r3, [pc, #32]	; (80042ec <prvProcessReceivedCommands+0x188>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f107 0108 	add.w	r1, r7, #8
 80042d2:	2200      	movs	r2, #0
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fe fc49 	bl	8002b6c <xQueueReceive>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f47f af45 	bne.w	800416c <prvProcessReceivedCommands+0x8>
        }
    }
 80042e2:	bf00      	nop
 80042e4:	bf00      	nop
 80042e6:	3728      	adds	r7, #40	; 0x28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	2000016c 	.word	0x2000016c

080042f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042f6:	e048      	b.n	800438a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042f8:	4b2d      	ldr	r3, [pc, #180]	; (80043b0 <prvSwitchTimerLists+0xc0>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004302:	4b2b      	ldr	r3, [pc, #172]	; (80043b0 <prvSwitchTimerLists+0xc0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	3304      	adds	r3, #4
 8004310:	4618      	mov	r0, r3
 8004312:	f7fe f92d 	bl	8002570 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d02e      	beq.n	800438a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4413      	add	r3, r2
 8004334:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	429a      	cmp	r2, r3
 800433c:	d90e      	bls.n	800435c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800434a:	4b19      	ldr	r3, [pc, #100]	; (80043b0 <prvSwitchTimerLists+0xc0>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	3304      	adds	r3, #4
 8004352:	4619      	mov	r1, r3
 8004354:	4610      	mov	r0, r2
 8004356:	f7fe f8d2 	bl	80024fe <vListInsert>
 800435a:	e016      	b.n	800438a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800435c:	2300      	movs	r3, #0
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	2300      	movs	r3, #0
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	2100      	movs	r1, #0
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f7ff fd7c 	bl	8003e64 <xTimerGenericCommand>
 800436c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10a      	bne.n	800438a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	603b      	str	r3, [r7, #0]
    }
 8004386:	bf00      	nop
 8004388:	e7fe      	b.n	8004388 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800438a:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <prvSwitchTimerLists+0xc0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1b1      	bne.n	80042f8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004394:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <prvSwitchTimerLists+0xc0>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800439a:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <prvSwitchTimerLists+0xc4>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a04      	ldr	r2, [pc, #16]	; (80043b0 <prvSwitchTimerLists+0xc0>)
 80043a0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80043a2:	4a04      	ldr	r2, [pc, #16]	; (80043b4 <prvSwitchTimerLists+0xc4>)
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	6013      	str	r3, [r2, #0]
    }
 80043a8:	bf00      	nop
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000164 	.word	0x20000164
 80043b4:	20000168 	.word	0x20000168

080043b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80043bc:	f000 f9e2 	bl	8004784 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80043c0:	4b12      	ldr	r3, [pc, #72]	; (800440c <prvCheckForValidListAndQueue+0x54>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d11d      	bne.n	8004404 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80043c8:	4811      	ldr	r0, [pc, #68]	; (8004410 <prvCheckForValidListAndQueue+0x58>)
 80043ca:	f7fe f847 	bl	800245c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80043ce:	4811      	ldr	r0, [pc, #68]	; (8004414 <prvCheckForValidListAndQueue+0x5c>)
 80043d0:	f7fe f844 	bl	800245c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80043d4:	4b10      	ldr	r3, [pc, #64]	; (8004418 <prvCheckForValidListAndQueue+0x60>)
 80043d6:	4a0e      	ldr	r2, [pc, #56]	; (8004410 <prvCheckForValidListAndQueue+0x58>)
 80043d8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80043da:	4b10      	ldr	r3, [pc, #64]	; (800441c <prvCheckForValidListAndQueue+0x64>)
 80043dc:	4a0d      	ldr	r2, [pc, #52]	; (8004414 <prvCheckForValidListAndQueue+0x5c>)
 80043de:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80043e0:	2200      	movs	r2, #0
 80043e2:	210c      	movs	r1, #12
 80043e4:	200a      	movs	r0, #10
 80043e6:	f7fe f955 	bl	8002694 <xQueueGenericCreate>
 80043ea:	4603      	mov	r3, r0
 80043ec:	4a07      	ldr	r2, [pc, #28]	; (800440c <prvCheckForValidListAndQueue+0x54>)
 80043ee:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80043f0:	4b06      	ldr	r3, [pc, #24]	; (800440c <prvCheckForValidListAndQueue+0x54>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d005      	beq.n	8004404 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80043f8:	4b04      	ldr	r3, [pc, #16]	; (800440c <prvCheckForValidListAndQueue+0x54>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4908      	ldr	r1, [pc, #32]	; (8004420 <prvCheckForValidListAndQueue+0x68>)
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fe fdd4 	bl	8002fac <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004404:	f000 f9ee 	bl	80047e4 <vPortExitCritical>
    }
 8004408:	bf00      	nop
 800440a:	bd80      	pop	{r7, pc}
 800440c:	2000016c 	.word	0x2000016c
 8004410:	2000013c 	.word	0x2000013c
 8004414:	20000150 	.word	0x20000150
 8004418:	20000164 	.word	0x20000164
 800441c:	20000168 	.word	0x20000168
 8004420:	08006fe0 	.word	0x08006fe0

08004424 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3b04      	subs	r3, #4
 8004434:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800443c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	3b04      	subs	r3, #4
 8004442:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f023 0201 	bic.w	r2, r3, #1
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3b04      	subs	r3, #4
 8004452:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004454:	4a0c      	ldr	r2, [pc, #48]	; (8004488 <pxPortInitialiseStack+0x64>)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	3b14      	subs	r3, #20
 800445e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3b04      	subs	r3, #4
 800446a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f06f 0202 	mvn.w	r2, #2
 8004472:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	3b20      	subs	r3, #32
 8004478:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800447a:	68fb      	ldr	r3, [r7, #12]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	0800448d 	.word	0x0800448d

0800448c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004496:	4b12      	ldr	r3, [pc, #72]	; (80044e0 <prvTaskExitError+0x54>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800449e:	d00a      	beq.n	80044b6 <prvTaskExitError+0x2a>
        __asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	60fb      	str	r3, [r7, #12]
    }
 80044b2:	bf00      	nop
 80044b4:	e7fe      	b.n	80044b4 <prvTaskExitError+0x28>
        __asm volatile
 80044b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	60bb      	str	r3, [r7, #8]
    }
 80044c8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80044ca:	bf00      	nop
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0fc      	beq.n	80044cc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80044d2:	bf00      	nop
 80044d4:	bf00      	nop
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	20000010 	.word	0x20000010
	...

080044f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80044f0:	4b07      	ldr	r3, [pc, #28]	; (8004510 <pxCurrentTCBConst2>)
 80044f2:	6819      	ldr	r1, [r3, #0]
 80044f4:	6808      	ldr	r0, [r1, #0]
 80044f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fa:	f380 8809 	msr	PSP, r0
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f04f 0000 	mov.w	r0, #0
 8004506:	f380 8811 	msr	BASEPRI, r0
 800450a:	4770      	bx	lr
 800450c:	f3af 8000 	nop.w

08004510 <pxCurrentTCBConst2>:
 8004510:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop

08004518 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004518:	4808      	ldr	r0, [pc, #32]	; (800453c <prvPortStartFirstTask+0x24>)
 800451a:	6800      	ldr	r0, [r0, #0]
 800451c:	6800      	ldr	r0, [r0, #0]
 800451e:	f380 8808 	msr	MSP, r0
 8004522:	f04f 0000 	mov.w	r0, #0
 8004526:	f380 8814 	msr	CONTROL, r0
 800452a:	b662      	cpsie	i
 800452c:	b661      	cpsie	f
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	df00      	svc	0
 8004538:	bf00      	nop
 800453a:	0000      	.short	0x0000
 800453c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop

08004544 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800454a:	4b46      	ldr	r3, [pc, #280]	; (8004664 <xPortStartScheduler+0x120>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a46      	ldr	r2, [pc, #280]	; (8004668 <xPortStartScheduler+0x124>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d10a      	bne.n	800456a <xPortStartScheduler+0x26>
        __asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	613b      	str	r3, [r7, #16]
    }
 8004566:	bf00      	nop
 8004568:	e7fe      	b.n	8004568 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800456a:	4b3e      	ldr	r3, [pc, #248]	; (8004664 <xPortStartScheduler+0x120>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a3f      	ldr	r2, [pc, #252]	; (800466c <xPortStartScheduler+0x128>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d10a      	bne.n	800458a <xPortStartScheduler+0x46>
        __asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	60fb      	str	r3, [r7, #12]
    }
 8004586:	bf00      	nop
 8004588:	e7fe      	b.n	8004588 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800458a:	4b39      	ldr	r3, [pc, #228]	; (8004670 <xPortStartScheduler+0x12c>)
 800458c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	22ff      	movs	r2, #255	; 0xff
 800459a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	4b31      	ldr	r3, [pc, #196]	; (8004674 <xPortStartScheduler+0x130>)
 80045b0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045b2:	4b31      	ldr	r3, [pc, #196]	; (8004678 <xPortStartScheduler+0x134>)
 80045b4:	2207      	movs	r2, #7
 80045b6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045b8:	e009      	b.n	80045ce <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80045ba:	4b2f      	ldr	r3, [pc, #188]	; (8004678 <xPortStartScheduler+0x134>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3b01      	subs	r3, #1
 80045c0:	4a2d      	ldr	r2, [pc, #180]	; (8004678 <xPortStartScheduler+0x134>)
 80045c2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045ce:	78fb      	ldrb	r3, [r7, #3]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d6:	2b80      	cmp	r3, #128	; 0x80
 80045d8:	d0ef      	beq.n	80045ba <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045da:	4b27      	ldr	r3, [pc, #156]	; (8004678 <xPortStartScheduler+0x134>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f1c3 0307 	rsb	r3, r3, #7
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d00a      	beq.n	80045fc <xPortStartScheduler+0xb8>
        __asm volatile
 80045e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	60bb      	str	r3, [r7, #8]
    }
 80045f8:	bf00      	nop
 80045fa:	e7fe      	b.n	80045fa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045fc:	4b1e      	ldr	r3, [pc, #120]	; (8004678 <xPortStartScheduler+0x134>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	021b      	lsls	r3, r3, #8
 8004602:	4a1d      	ldr	r2, [pc, #116]	; (8004678 <xPortStartScheduler+0x134>)
 8004604:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004606:	4b1c      	ldr	r3, [pc, #112]	; (8004678 <xPortStartScheduler+0x134>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800460e:	4a1a      	ldr	r2, [pc, #104]	; (8004678 <xPortStartScheduler+0x134>)
 8004610:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	b2da      	uxtb	r2, r3
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800461a:	4b18      	ldr	r3, [pc, #96]	; (800467c <xPortStartScheduler+0x138>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a17      	ldr	r2, [pc, #92]	; (800467c <xPortStartScheduler+0x138>)
 8004620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004624:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004626:	4b15      	ldr	r3, [pc, #84]	; (800467c <xPortStartScheduler+0x138>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a14      	ldr	r2, [pc, #80]	; (800467c <xPortStartScheduler+0x138>)
 800462c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004630:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004632:	f000 f963 	bl	80048fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004636:	4b12      	ldr	r3, [pc, #72]	; (8004680 <xPortStartScheduler+0x13c>)
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800463c:	f000 f982 	bl	8004944 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004640:	4b10      	ldr	r3, [pc, #64]	; (8004684 <xPortStartScheduler+0x140>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a0f      	ldr	r2, [pc, #60]	; (8004684 <xPortStartScheduler+0x140>)
 8004646:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800464a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800464c:	f7ff ff64 	bl	8004518 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004650:	f7ff f864 	bl	800371c <vTaskSwitchContext>
    prvTaskExitError();
 8004654:	f7ff ff1a 	bl	800448c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	e000ed00 	.word	0xe000ed00
 8004668:	410fc271 	.word	0x410fc271
 800466c:	410fc270 	.word	0x410fc270
 8004670:	e000e400 	.word	0xe000e400
 8004674:	20000178 	.word	0x20000178
 8004678:	2000017c 	.word	0x2000017c
 800467c:	e000ed20 	.word	0xe000ed20
 8004680:	20000010 	.word	0x20000010
 8004684:	e000ef34 	.word	0xe000ef34

08004688 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800468e:	4b37      	ldr	r3, [pc, #220]	; (800476c <vInitPrioGroupValue+0xe4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a37      	ldr	r2, [pc, #220]	; (8004770 <vInitPrioGroupValue+0xe8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d10a      	bne.n	80046ae <vInitPrioGroupValue+0x26>
        __asm volatile
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	613b      	str	r3, [r7, #16]
    }
 80046aa:	bf00      	nop
 80046ac:	e7fe      	b.n	80046ac <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046ae:	4b2f      	ldr	r3, [pc, #188]	; (800476c <vInitPrioGroupValue+0xe4>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a30      	ldr	r2, [pc, #192]	; (8004774 <vInitPrioGroupValue+0xec>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d10a      	bne.n	80046ce <vInitPrioGroupValue+0x46>
        __asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	60fb      	str	r3, [r7, #12]
    }
 80046ca:	bf00      	nop
 80046cc:	e7fe      	b.n	80046cc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046ce:	4b2a      	ldr	r3, [pc, #168]	; (8004778 <vInitPrioGroupValue+0xf0>)
 80046d0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	22ff      	movs	r2, #255	; 0xff
 80046de:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046e8:	78fb      	ldrb	r3, [r7, #3]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	4b22      	ldr	r3, [pc, #136]	; (800477c <vInitPrioGroupValue+0xf4>)
 80046f4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046f6:	4b22      	ldr	r3, [pc, #136]	; (8004780 <vInitPrioGroupValue+0xf8>)
 80046f8:	2207      	movs	r2, #7
 80046fa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046fc:	e009      	b.n	8004712 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80046fe:	4b20      	ldr	r3, [pc, #128]	; (8004780 <vInitPrioGroupValue+0xf8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3b01      	subs	r3, #1
 8004704:	4a1e      	ldr	r2, [pc, #120]	; (8004780 <vInitPrioGroupValue+0xf8>)
 8004706:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004708:	78fb      	ldrb	r3, [r7, #3]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	b2db      	uxtb	r3, r3
 8004710:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471a:	2b80      	cmp	r3, #128	; 0x80
 800471c:	d0ef      	beq.n	80046fe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800471e:	4b18      	ldr	r3, [pc, #96]	; (8004780 <vInitPrioGroupValue+0xf8>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f1c3 0307 	rsb	r3, r3, #7
 8004726:	2b04      	cmp	r3, #4
 8004728:	d00a      	beq.n	8004740 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	60bb      	str	r3, [r7, #8]
    }
 800473c:	bf00      	nop
 800473e:	e7fe      	b.n	800473e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004740:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <vInitPrioGroupValue+0xf8>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	021b      	lsls	r3, r3, #8
 8004746:	4a0e      	ldr	r2, [pc, #56]	; (8004780 <vInitPrioGroupValue+0xf8>)
 8004748:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800474a:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <vInitPrioGroupValue+0xf8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004752:	4a0b      	ldr	r2, [pc, #44]	; (8004780 <vInitPrioGroupValue+0xf8>)
 8004754:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	b2da      	uxtb	r2, r3
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800475e:	bf00      	nop
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	e000ed00 	.word	0xe000ed00
 8004770:	410fc271 	.word	0x410fc271
 8004774:	410fc270 	.word	0x410fc270
 8004778:	e000e400 	.word	0xe000e400
 800477c:	20000178 	.word	0x20000178
 8004780:	2000017c 	.word	0x2000017c

08004784 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
        __asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	607b      	str	r3, [r7, #4]
    }
 800479c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800479e:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <vPortEnterCritical+0x58>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3301      	adds	r3, #1
 80047a4:	4a0d      	ldr	r2, [pc, #52]	; (80047dc <vPortEnterCritical+0x58>)
 80047a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80047a8:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <vPortEnterCritical+0x58>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d10f      	bne.n	80047d0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047b0:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <vPortEnterCritical+0x5c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <vPortEnterCritical+0x4c>
        __asm volatile
 80047ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	603b      	str	r3, [r7, #0]
    }
 80047cc:	bf00      	nop
 80047ce:	e7fe      	b.n	80047ce <vPortEnterCritical+0x4a>
    }
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	20000010 	.word	0x20000010
 80047e0:	e000ed04 	.word	0xe000ed04

080047e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80047ea:	4b12      	ldr	r3, [pc, #72]	; (8004834 <vPortExitCritical+0x50>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10a      	bne.n	8004808 <vPortExitCritical+0x24>
        __asm volatile
 80047f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	607b      	str	r3, [r7, #4]
    }
 8004804:	bf00      	nop
 8004806:	e7fe      	b.n	8004806 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004808:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <vPortExitCritical+0x50>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3b01      	subs	r3, #1
 800480e:	4a09      	ldr	r2, [pc, #36]	; (8004834 <vPortExitCritical+0x50>)
 8004810:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004812:	4b08      	ldr	r3, [pc, #32]	; (8004834 <vPortExitCritical+0x50>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d105      	bne.n	8004826 <vPortExitCritical+0x42>
 800481a:	2300      	movs	r3, #0
 800481c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	f383 8811 	msr	BASEPRI, r3
    }
 8004824:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	20000010 	.word	0x20000010
	...

08004840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004840:	f3ef 8009 	mrs	r0, PSP
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <pxCurrentTCBConst>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	f01e 0f10 	tst.w	lr, #16
 8004850:	bf08      	it	eq
 8004852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800485a:	6010      	str	r0, [r2, #0]
 800485c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004860:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004864:	f380 8811 	msr	BASEPRI, r0
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f7fe ff54 	bl	800371c <vTaskSwitchContext>
 8004874:	f04f 0000 	mov.w	r0, #0
 8004878:	f380 8811 	msr	BASEPRI, r0
 800487c:	bc09      	pop	{r0, r3}
 800487e:	6819      	ldr	r1, [r3, #0]
 8004880:	6808      	ldr	r0, [r1, #0]
 8004882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004886:	f01e 0f10 	tst.w	lr, #16
 800488a:	bf08      	it	eq
 800488c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004890:	f380 8809 	msr	PSP, r0
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	f3af 8000 	nop.w

080048a0 <pxCurrentTCBConst>:
 80048a0:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop

080048a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
        __asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	607b      	str	r3, [r7, #4]
    }
 80048c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80048c2:	f001 ffe3 	bl	800688c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80048c6:	f7fe fe6d 	bl	80035a4 <xTaskIncrementTick>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d006      	beq.n	80048de <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80048d0:	f002 f83a 	bl	8006948 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048d4:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <SysTick_Handler+0x50>)
 80048d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	e001      	b.n	80048e2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80048de:	f002 f817 	bl	8006910 <SEGGER_SYSVIEW_RecordExitISR>
 80048e2:	2300      	movs	r3, #0
 80048e4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	f383 8811 	msr	BASEPRI, r3
    }
 80048ec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	e000ed04 	.word	0xe000ed04

080048fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004900:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <vPortSetupTimerInterrupt+0x34>)
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004906:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <vPortSetupTimerInterrupt+0x38>)
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800490c:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <vPortSetupTimerInterrupt+0x3c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a0a      	ldr	r2, [pc, #40]	; (800493c <vPortSetupTimerInterrupt+0x40>)
 8004912:	fba2 2303 	umull	r2, r3, r2, r3
 8004916:	099b      	lsrs	r3, r3, #6
 8004918:	4a09      	ldr	r2, [pc, #36]	; (8004940 <vPortSetupTimerInterrupt+0x44>)
 800491a:	3b01      	subs	r3, #1
 800491c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800491e:	4b04      	ldr	r3, [pc, #16]	; (8004930 <vPortSetupTimerInterrupt+0x34>)
 8004920:	2207      	movs	r2, #7
 8004922:	601a      	str	r2, [r3, #0]
}
 8004924:	bf00      	nop
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	e000e010 	.word	0xe000e010
 8004934:	e000e018 	.word	0xe000e018
 8004938:	20000000 	.word	0x20000000
 800493c:	10624dd3 	.word	0x10624dd3
 8004940:	e000e014 	.word	0xe000e014

08004944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004944:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004954 <vPortEnableVFP+0x10>
 8004948:	6801      	ldr	r1, [r0, #0]
 800494a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800494e:	6001      	str	r1, [r0, #0]
 8004950:	4770      	bx	lr
 8004952:	0000      	.short	0x0000
 8004954:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004958:	bf00      	nop
 800495a:	bf00      	nop

0800495c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004962:	f3ef 8305 	mrs	r3, IPSR
 8004966:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b0f      	cmp	r3, #15
 800496c:	d914      	bls.n	8004998 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800496e:	4a17      	ldr	r2, [pc, #92]	; (80049cc <vPortValidateInterruptPriority+0x70>)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004978:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <vPortValidateInterruptPriority+0x74>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	7afa      	ldrb	r2, [r7, #11]
 800497e:	429a      	cmp	r2, r3
 8004980:	d20a      	bcs.n	8004998 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	607b      	str	r3, [r7, #4]
    }
 8004994:	bf00      	nop
 8004996:	e7fe      	b.n	8004996 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004998:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <vPortValidateInterruptPriority+0x78>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049a0:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <vPortValidateInterruptPriority+0x7c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d90a      	bls.n	80049be <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	603b      	str	r3, [r7, #0]
    }
 80049ba:	bf00      	nop
 80049bc:	e7fe      	b.n	80049bc <vPortValidateInterruptPriority+0x60>
    }
 80049be:	bf00      	nop
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	e000e3f0 	.word	0xe000e3f0
 80049d0:	20000178 	.word	0x20000178
 80049d4:	e000ed0c 	.word	0xe000ed0c
 80049d8:	2000017c 	.word	0x2000017c

080049dc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08a      	sub	sp, #40	; 0x28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80049e8:	f7fe fd0c 	bl	8003404 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80049ec:	4b65      	ldr	r3, [pc, #404]	; (8004b84 <pvPortMalloc+0x1a8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80049f4:	f000 f934 	bl	8004c60 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80049f8:	4b63      	ldr	r3, [pc, #396]	; (8004b88 <pvPortMalloc+0x1ac>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4013      	ands	r3, r2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f040 80a7 	bne.w	8004b54 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d02d      	beq.n	8004a68 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d227      	bcs.n	8004a68 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004a18:	2208      	movs	r2, #8
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d021      	beq.n	8004a6e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f023 0307 	bic.w	r3, r3, #7
 8004a30:	3308      	adds	r3, #8
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d214      	bcs.n	8004a62 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f023 0307 	bic.w	r3, r3, #7
 8004a3e:	3308      	adds	r3, #8
 8004a40:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d010      	beq.n	8004a6e <pvPortMalloc+0x92>
        __asm volatile
 8004a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	617b      	str	r3, [r7, #20]
    }
 8004a5e:	bf00      	nop
 8004a60:	e7fe      	b.n	8004a60 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004a62:	2300      	movs	r3, #0
 8004a64:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a66:	e002      	b.n	8004a6e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	607b      	str	r3, [r7, #4]
 8004a6c:	e000      	b.n	8004a70 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a6e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d06e      	beq.n	8004b54 <pvPortMalloc+0x178>
 8004a76:	4b45      	ldr	r3, [pc, #276]	; (8004b8c <pvPortMalloc+0x1b0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d869      	bhi.n	8004b54 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004a80:	4b43      	ldr	r3, [pc, #268]	; (8004b90 <pvPortMalloc+0x1b4>)
 8004a82:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004a84:	4b42      	ldr	r3, [pc, #264]	; (8004b90 <pvPortMalloc+0x1b4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a8a:	e004      	b.n	8004a96 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d903      	bls.n	8004aa8 <pvPortMalloc+0xcc>
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f1      	bne.n	8004a8c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004aa8:	4b36      	ldr	r3, [pc, #216]	; (8004b84 <pvPortMalloc+0x1a8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d050      	beq.n	8004b54 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2208      	movs	r2, #8
 8004ab8:	4413      	add	r3, r2
 8004aba:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	1ad2      	subs	r2, r2, r3
 8004acc:	2308      	movs	r3, #8
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d91f      	bls.n	8004b14 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4413      	add	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <pvPortMalloc+0x120>
        __asm volatile
 8004ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	613b      	str	r3, [r7, #16]
    }
 8004af8:	bf00      	nop
 8004afa:	e7fe      	b.n	8004afa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	1ad2      	subs	r2, r2, r3
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b0e:	69b8      	ldr	r0, [r7, #24]
 8004b10:	f000 f908 	bl	8004d24 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b14:	4b1d      	ldr	r3, [pc, #116]	; (8004b8c <pvPortMalloc+0x1b0>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	4a1b      	ldr	r2, [pc, #108]	; (8004b8c <pvPortMalloc+0x1b0>)
 8004b20:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b22:	4b1a      	ldr	r3, [pc, #104]	; (8004b8c <pvPortMalloc+0x1b0>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	4b1b      	ldr	r3, [pc, #108]	; (8004b94 <pvPortMalloc+0x1b8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d203      	bcs.n	8004b36 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b2e:	4b17      	ldr	r3, [pc, #92]	; (8004b8c <pvPortMalloc+0x1b0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a18      	ldr	r2, [pc, #96]	; (8004b94 <pvPortMalloc+0x1b8>)
 8004b34:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	4b13      	ldr	r3, [pc, #76]	; (8004b88 <pvPortMalloc+0x1ac>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004b4a:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <pvPortMalloc+0x1bc>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	4a11      	ldr	r2, [pc, #68]	; (8004b98 <pvPortMalloc+0x1bc>)
 8004b52:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004b54:	f7fe fc64 	bl	8003420 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <pvPortMalloc+0x19c>
        __asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	60fb      	str	r3, [r7, #12]
    }
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <pvPortMalloc+0x19a>
    return pvReturn;
 8004b78:	69fb      	ldr	r3, [r7, #28]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3728      	adds	r7, #40	; 0x28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20012d88 	.word	0x20012d88
 8004b88:	20012d9c 	.word	0x20012d9c
 8004b8c:	20012d8c 	.word	0x20012d8c
 8004b90:	20012d80 	.word	0x20012d80
 8004b94:	20012d90 	.word	0x20012d90
 8004b98:	20012d94 	.word	0x20012d94

08004b9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d04d      	beq.n	8004c4a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004bae:	2308      	movs	r3, #8
 8004bb0:	425b      	negs	r3, r3
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	4b24      	ldr	r3, [pc, #144]	; (8004c54 <vPortFree+0xb8>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10a      	bne.n	8004be0 <vPortFree+0x44>
        __asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	60fb      	str	r3, [r7, #12]
    }
 8004bdc:	bf00      	nop
 8004bde:	e7fe      	b.n	8004bde <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <vPortFree+0x62>
        __asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	60bb      	str	r3, [r7, #8]
    }
 8004bfa:	bf00      	nop
 8004bfc:	e7fe      	b.n	8004bfc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	4b14      	ldr	r3, [pc, #80]	; (8004c54 <vPortFree+0xb8>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4013      	ands	r3, r2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01e      	beq.n	8004c4a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d11a      	bne.n	8004c4a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	4b0e      	ldr	r3, [pc, #56]	; (8004c54 <vPortFree+0xb8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	401a      	ands	r2, r3
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004c24:	f7fe fbee 	bl	8003404 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <vPortFree+0xbc>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4413      	add	r3, r2
 8004c32:	4a09      	ldr	r2, [pc, #36]	; (8004c58 <vPortFree+0xbc>)
 8004c34:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c36:	6938      	ldr	r0, [r7, #16]
 8004c38:	f000 f874 	bl	8004d24 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004c3c:	4b07      	ldr	r3, [pc, #28]	; (8004c5c <vPortFree+0xc0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3301      	adds	r3, #1
 8004c42:	4a06      	ldr	r2, [pc, #24]	; (8004c5c <vPortFree+0xc0>)
 8004c44:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004c46:	f7fe fbeb 	bl	8003420 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004c4a:	bf00      	nop
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20012d9c 	.word	0x20012d9c
 8004c58:	20012d8c 	.word	0x20012d8c
 8004c5c:	20012d98 	.word	0x20012d98

08004c60 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c66:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004c6a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004c6c:	4b27      	ldr	r3, [pc, #156]	; (8004d0c <prvHeapInit+0xac>)
 8004c6e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00c      	beq.n	8004c94 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	3307      	adds	r3, #7
 8004c7e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 0307 	bic.w	r3, r3, #7
 8004c86:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	4a1f      	ldr	r2, [pc, #124]	; (8004d0c <prvHeapInit+0xac>)
 8004c90:	4413      	add	r3, r2
 8004c92:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c98:	4a1d      	ldr	r2, [pc, #116]	; (8004d10 <prvHeapInit+0xb0>)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004c9e:	4b1c      	ldr	r3, [pc, #112]	; (8004d10 <prvHeapInit+0xb0>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	4413      	add	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004cac:	2208      	movs	r2, #8
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0307 	bic.w	r3, r3, #7
 8004cba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4a15      	ldr	r2, [pc, #84]	; (8004d14 <prvHeapInit+0xb4>)
 8004cc0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004cc2:	4b14      	ldr	r3, [pc, #80]	; (8004d14 <prvHeapInit+0xb4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004cca:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <prvHeapInit+0xb4>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	1ad2      	subs	r2, r2, r3
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ce0:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <prvHeapInit+0xb4>)
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	4a0a      	ldr	r2, [pc, #40]	; (8004d18 <prvHeapInit+0xb8>)
 8004cee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	4a09      	ldr	r2, [pc, #36]	; (8004d1c <prvHeapInit+0xbc>)
 8004cf6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004cf8:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <prvHeapInit+0xc0>)
 8004cfa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004cfe:	601a      	str	r2, [r3, #0]
}
 8004d00:	bf00      	nop
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	20000180 	.word	0x20000180
 8004d10:	20012d80 	.word	0x20012d80
 8004d14:	20012d88 	.word	0x20012d88
 8004d18:	20012d90 	.word	0x20012d90
 8004d1c:	20012d8c 	.word	0x20012d8c
 8004d20:	20012d9c 	.word	0x20012d9c

08004d24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d2c:	4b28      	ldr	r3, [pc, #160]	; (8004dd0 <prvInsertBlockIntoFreeList+0xac>)
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	e002      	b.n	8004d38 <prvInsertBlockIntoFreeList+0x14>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d8f7      	bhi.n	8004d32 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d108      	bne.n	8004d66 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	441a      	add	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	441a      	add	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d118      	bne.n	8004dac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	4b15      	ldr	r3, [pc, #84]	; (8004dd4 <prvInsertBlockIntoFreeList+0xb0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d00d      	beq.n	8004da2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	441a      	add	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	e008      	b.n	8004db4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004da2:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <prvInsertBlockIntoFreeList+0xb0>)
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	e003      	b.n	8004db4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d002      	beq.n	8004dc2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	20012d80 	.word	0x20012d80
 8004dd4:	20012d88 	.word	0x20012d88

08004dd8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004ddc:	4803      	ldr	r0, [pc, #12]	; (8004dec <_cbSendSystemDesc+0x14>)
 8004dde:	f001 fcff 	bl	80067e0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004de2:	4803      	ldr	r0, [pc, #12]	; (8004df0 <_cbSendSystemDesc+0x18>)
 8004de4:	f001 fcfc 	bl	80067e0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004de8:	bf00      	nop
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	08006fe8 	.word	0x08006fe8
 8004df0:	08007024 	.word	0x08007024

08004df4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004df8:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <SEGGER_SYSVIEW_Conf+0x20>)
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <SEGGER_SYSVIEW_Conf+0x20>)
 8004dfe:	6819      	ldr	r1, [r3, #0]
 8004e00:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <SEGGER_SYSVIEW_Conf+0x24>)
 8004e02:	4a06      	ldr	r2, [pc, #24]	; (8004e1c <SEGGER_SYSVIEW_Conf+0x28>)
 8004e04:	f001 f868 	bl	8005ed8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004e08:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004e0c:	f001 f8a8 	bl	8005f60 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004e10:	bf00      	nop
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	20000000 	.word	0x20000000
 8004e18:	08004dd9 	.word	0x08004dd9
 8004e1c:	080070c4 	.word	0x080070c4

08004e20 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004e26:	2300      	movs	r3, #0
 8004e28:	607b      	str	r3, [r7, #4]
 8004e2a:	e033      	b.n	8004e94 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004e2c:	491e      	ldr	r1, [pc, #120]	; (8004ea8 <_cbSendTaskList+0x88>)
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	4613      	mov	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	491a      	ldr	r1, [pc, #104]	; (8004ea8 <_cbSendTaskList+0x88>)
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	6819      	ldr	r1, [r3, #0]
 8004e4e:	4c16      	ldr	r4, [pc, #88]	; (8004ea8 <_cbSendTaskList+0x88>)
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4423      	add	r3, r4
 8004e5c:	3308      	adds	r3, #8
 8004e5e:	681c      	ldr	r4, [r3, #0]
 8004e60:	4d11      	ldr	r5, [pc, #68]	; (8004ea8 <_cbSendTaskList+0x88>)
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	4613      	mov	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	442b      	add	r3, r5
 8004e6e:	330c      	adds	r3, #12
 8004e70:	681d      	ldr	r5, [r3, #0]
 8004e72:	4e0d      	ldr	r6, [pc, #52]	; (8004ea8 <_cbSendTaskList+0x88>)
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4433      	add	r3, r6
 8004e80:	3310      	adds	r3, #16
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	462b      	mov	r3, r5
 8004e88:	4622      	mov	r2, r4
 8004e8a:	f000 f8b5 	bl	8004ff8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	3301      	adds	r3, #1
 8004e92:	607b      	str	r3, [r7, #4]
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <_cbSendTaskList+0x8c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d3c6      	bcc.n	8004e2c <_cbSendTaskList+0xc>
  }
}
 8004e9e:	bf00      	nop
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ea8:	20012da0 	.word	0x20012da0
 8004eac:	20012e40 	.word	0x20012e40

08004eb0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004eb0:	b5b0      	push	{r4, r5, r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004eb6:	f7fe fb63 	bl	8003580 <xTaskGetTickCountFromISR>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f04f 0300 	mov.w	r3, #0
 8004ec2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004ec6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	f04f 0400 	mov.w	r4, #0
 8004ed2:	f04f 0500 	mov.w	r5, #0
 8004ed6:	015d      	lsls	r5, r3, #5
 8004ed8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004edc:	0154      	lsls	r4, r2, #5
 8004ede:	4622      	mov	r2, r4
 8004ee0:	462b      	mov	r3, r5
 8004ee2:	1a12      	subs	r2, r2, r0
 8004ee4:	eb63 0301 	sbc.w	r3, r3, r1
 8004ee8:	f04f 0400 	mov.w	r4, #0
 8004eec:	f04f 0500 	mov.w	r5, #0
 8004ef0:	009d      	lsls	r5, r3, #2
 8004ef2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004ef6:	0094      	lsls	r4, r2, #2
 8004ef8:	4622      	mov	r2, r4
 8004efa:	462b      	mov	r3, r5
 8004efc:	1812      	adds	r2, r2, r0
 8004efe:	eb41 0303 	adc.w	r3, r1, r3
 8004f02:	f04f 0000 	mov.w	r0, #0
 8004f06:	f04f 0100 	mov.w	r1, #0
 8004f0a:	00d9      	lsls	r1, r3, #3
 8004f0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f10:	00d0      	lsls	r0, r2, #3
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004f1a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004f1e:	4610      	mov	r0, r2
 8004f20:	4619      	mov	r1, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bdb0      	pop	{r4, r5, r7, pc}

08004f28 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004f36:	2205      	movs	r2, #5
 8004f38:	492b      	ldr	r1, [pc, #172]	; (8004fe8 <SYSVIEW_AddTask+0xc0>)
 8004f3a:	68b8      	ldr	r0, [r7, #8]
 8004f3c:	f001 fffc 	bl	8006f38 <memcmp>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d04b      	beq.n	8004fde <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004f46:	4b29      	ldr	r3, [pc, #164]	; (8004fec <SYSVIEW_AddTask+0xc4>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b07      	cmp	r3, #7
 8004f4c:	d903      	bls.n	8004f56 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004f4e:	4828      	ldr	r0, [pc, #160]	; (8004ff0 <SYSVIEW_AddTask+0xc8>)
 8004f50:	f001 ff44 	bl	8006ddc <SEGGER_SYSVIEW_Warn>
    return;
 8004f54:	e044      	b.n	8004fe0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004f56:	4b25      	ldr	r3, [pc, #148]	; (8004fec <SYSVIEW_AddTask+0xc4>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	4926      	ldr	r1, [pc, #152]	; (8004ff4 <SYSVIEW_AddTask+0xcc>)
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004f6a:	4b20      	ldr	r3, [pc, #128]	; (8004fec <SYSVIEW_AddTask+0xc4>)
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	4921      	ldr	r1, [pc, #132]	; (8004ff4 <SYSVIEW_AddTask+0xcc>)
 8004f70:	4613      	mov	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004f80:	4b1a      	ldr	r3, [pc, #104]	; (8004fec <SYSVIEW_AddTask+0xc4>)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	491b      	ldr	r1, [pc, #108]	; (8004ff4 <SYSVIEW_AddTask+0xcc>)
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	3308      	adds	r3, #8
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004f96:	4b15      	ldr	r3, [pc, #84]	; (8004fec <SYSVIEW_AddTask+0xc4>)
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	4916      	ldr	r1, [pc, #88]	; (8004ff4 <SYSVIEW_AddTask+0xcc>)
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	330c      	adds	r3, #12
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004fac:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <SYSVIEW_AddTask+0xc4>)
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	4910      	ldr	r1, [pc, #64]	; (8004ff4 <SYSVIEW_AddTask+0xcc>)
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	440b      	add	r3, r1
 8004fbc:	3310      	adds	r3, #16
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004fc2:	4b0a      	ldr	r3, [pc, #40]	; (8004fec <SYSVIEW_AddTask+0xc4>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	4a08      	ldr	r2, [pc, #32]	; (8004fec <SYSVIEW_AddTask+0xc4>)
 8004fca:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	68b9      	ldr	r1, [r7, #8]
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 f80e 	bl	8004ff8 <SYSVIEW_SendTaskInfo>
 8004fdc:	e000      	b.n	8004fe0 <SYSVIEW_AddTask+0xb8>
    return;
 8004fde:	bf00      	nop

}
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	08007034 	.word	0x08007034
 8004fec:	20012e40 	.word	0x20012e40
 8004ff0:	0800703c 	.word	0x0800703c
 8004ff4:	20012da0 	.word	0x20012da0

08004ff8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b08a      	sub	sp, #40	; 0x28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
 8005004:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005006:	f107 0314 	add.w	r3, r7, #20
 800500a:	2214      	movs	r2, #20
 800500c:	2100      	movs	r1, #0
 800500e:	4618      	mov	r0, r3
 8005010:	f001 ffae 	bl	8006f70 <memset>
  TaskInfo.TaskID     = TaskID;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005028:	f107 0314 	add.w	r3, r7, #20
 800502c:	4618      	mov	r0, r3
 800502e:	f001 fadf 	bl	80065f0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005032:	bf00      	nop
 8005034:	3728      	adds	r7, #40	; 0x28
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <__NVIC_EnableIRQ>:
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	4603      	mov	r3, r0
 8005044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800504a:	2b00      	cmp	r3, #0
 800504c:	db0b      	blt.n	8005066 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	f003 021f 	and.w	r2, r3, #31
 8005054:	4907      	ldr	r1, [pc, #28]	; (8005074 <__NVIC_EnableIRQ+0x38>)
 8005056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	2001      	movs	r0, #1
 800505e:	fa00 f202 	lsl.w	r2, r0, r2
 8005062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	e000e100 	.word	0xe000e100

08005078 <__NVIC_SetPriority>:
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	6039      	str	r1, [r7, #0]
 8005082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005088:	2b00      	cmp	r3, #0
 800508a:	db0a      	blt.n	80050a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	b2da      	uxtb	r2, r3
 8005090:	490c      	ldr	r1, [pc, #48]	; (80050c4 <__NVIC_SetPriority+0x4c>)
 8005092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005096:	0112      	lsls	r2, r2, #4
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	440b      	add	r3, r1
 800509c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80050a0:	e00a      	b.n	80050b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	4908      	ldr	r1, [pc, #32]	; (80050c8 <__NVIC_SetPriority+0x50>)
 80050a8:	79fb      	ldrb	r3, [r7, #7]
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	3b04      	subs	r3, #4
 80050b0:	0112      	lsls	r2, r2, #4
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	440b      	add	r3, r1
 80050b6:	761a      	strb	r2, [r3, #24]
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	e000e100 	.word	0xe000e100
 80050c8:	e000ed00 	.word	0xe000ed00

080050cc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80050d2:	f001 fedf 	bl	8006e94 <SEGGER_SYSVIEW_IsStarted>
 80050d6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80050de:	f001 f90b 	bl	80062f8 <SEGGER_SYSVIEW_Start>
  }
}
 80050e2:	bf00      	nop
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	4603      	mov	r3, r0
 80050f4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80050f6:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <_cbOnUARTRx+0x3c>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d806      	bhi.n	800510c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80050fe:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <_cbOnUARTRx+0x3c>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	3301      	adds	r3, #1
 8005104:	b2da      	uxtb	r2, r3
 8005106:	4b08      	ldr	r3, [pc, #32]	; (8005128 <_cbOnUARTRx+0x3c>)
 8005108:	701a      	strb	r2, [r3, #0]
    goto Done;
 800510a:	e009      	b.n	8005120 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800510c:	f7ff ffde 	bl	80050cc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005110:	4b05      	ldr	r3, [pc, #20]	; (8005128 <_cbOnUARTRx+0x3c>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	4618      	mov	r0, r3
 8005116:	1dfb      	adds	r3, r7, #7
 8005118:	2201      	movs	r2, #1
 800511a:	4619      	mov	r1, r3
 800511c:	f000 fb9a 	bl	8005854 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005120:	bf00      	nop
}
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	20000014 	.word	0x20000014

0800512c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005134:	4b14      	ldr	r3, [pc, #80]	; (8005188 <_cbOnUARTTx+0x5c>)
 8005136:	785b      	ldrb	r3, [r3, #1]
 8005138:	2b03      	cmp	r3, #3
 800513a:	d80f      	bhi.n	800515c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800513c:	4b12      	ldr	r3, [pc, #72]	; (8005188 <_cbOnUARTTx+0x5c>)
 800513e:	785b      	ldrb	r3, [r3, #1]
 8005140:	461a      	mov	r2, r3
 8005142:	4b12      	ldr	r3, [pc, #72]	; (800518c <_cbOnUARTTx+0x60>)
 8005144:	5c9a      	ldrb	r2, [r3, r2]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800514a:	4b0f      	ldr	r3, [pc, #60]	; (8005188 <_cbOnUARTTx+0x5c>)
 800514c:	785b      	ldrb	r3, [r3, #1]
 800514e:	3301      	adds	r3, #1
 8005150:	b2da      	uxtb	r2, r3
 8005152:	4b0d      	ldr	r3, [pc, #52]	; (8005188 <_cbOnUARTTx+0x5c>)
 8005154:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005156:	2301      	movs	r3, #1
 8005158:	60fb      	str	r3, [r7, #12]
    goto Done;
 800515a:	e00f      	b.n	800517c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800515c:	4b0a      	ldr	r3, [pc, #40]	; (8005188 <_cbOnUARTTx+0x5c>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	4618      	mov	r0, r3
 8005166:	f000 fa19 	bl	800559c <SEGGER_RTT_ReadUpBufferNoLock>
 800516a:	4603      	mov	r3, r0
 800516c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	da02      	bge.n	800517a <_cbOnUARTTx+0x4e>
    r = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	e000      	b.n	800517c <_cbOnUARTTx+0x50>
  }
Done:
 800517a:	bf00      	nop
  return r;
 800517c:	68fb      	ldr	r3, [r7, #12]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20000014 	.word	0x20000014
 800518c:	080070cc 	.word	0x080070cc

08005190 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005198:	4a04      	ldr	r2, [pc, #16]	; (80051ac <SEGGER_UART_init+0x1c>)
 800519a:	4905      	ldr	r1, [pc, #20]	; (80051b0 <SEGGER_UART_init+0x20>)
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f863 	bl	8005268 <HIF_UART_Init>
}
 80051a2:	bf00      	nop
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	080050ed 	.word	0x080050ed
 80051b0:	0800512d 	.word	0x0800512d

080051b4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80051ba:	4b1e      	ldr	r3, [pc, #120]	; (8005234 <USART2_IRQHandler+0x80>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f003 0320 	and.w	r3, r3, #32
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d011      	beq.n	80051ee <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80051ca:	4b1b      	ldr	r3, [pc, #108]	; (8005238 <USART2_IRQHandler+0x84>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f003 030b 	and.w	r3, r3, #11
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d108      	bne.n	80051ee <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80051dc:	4b17      	ldr	r3, [pc, #92]	; (800523c <USART2_IRQHandler+0x88>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d004      	beq.n	80051ee <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80051e4:	4b15      	ldr	r3, [pc, #84]	; (800523c <USART2_IRQHandler+0x88>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	79fa      	ldrb	r2, [r7, #7]
 80051ea:	4610      	mov	r0, r2
 80051ec:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01a      	beq.n	800522e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80051f8:	4b11      	ldr	r3, [pc, #68]	; (8005240 <USART2_IRQHandler+0x8c>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d015      	beq.n	800522c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005200:	4b0f      	ldr	r3, [pc, #60]	; (8005240 <USART2_IRQHandler+0x8c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	1dfa      	adds	r2, r7, #7
 8005206:	4610      	mov	r0, r2
 8005208:	4798      	blx	r3
 800520a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005212:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <USART2_IRQHandler+0x90>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a0b      	ldr	r2, [pc, #44]	; (8005244 <USART2_IRQHandler+0x90>)
 8005218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800521c:	6013      	str	r3, [r2, #0]
 800521e:	e006      	b.n	800522e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005220:	4b04      	ldr	r3, [pc, #16]	; (8005234 <USART2_IRQHandler+0x80>)
 8005222:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005224:	79fa      	ldrb	r2, [r7, #7]
 8005226:	4b04      	ldr	r3, [pc, #16]	; (8005238 <USART2_IRQHandler+0x84>)
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	e000      	b.n	800522e <USART2_IRQHandler+0x7a>
      return;
 800522c:	bf00      	nop
    }
  }
}
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	40004400 	.word	0x40004400
 8005238:	40004404 	.word	0x40004404
 800523c:	20012e44 	.word	0x20012e44
 8005240:	20012e48 	.word	0x20012e48
 8005244:	4000440c 	.word	0x4000440c

08005248 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800524c:	4b05      	ldr	r3, [pc, #20]	; (8005264 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a04      	ldr	r2, [pc, #16]	; (8005264 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005256:	6013      	str	r3, [r2, #0]
}
 8005258:	bf00      	nop
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	4000440c 	.word	0x4000440c

08005268 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005274:	4b2e      	ldr	r3, [pc, #184]	; (8005330 <HIF_UART_Init+0xc8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a2d      	ldr	r2, [pc, #180]	; (8005330 <HIF_UART_Init+0xc8>)
 800527a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800527e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005280:	4b2c      	ldr	r3, [pc, #176]	; (8005334 <HIF_UART_Init+0xcc>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a2b      	ldr	r2, [pc, #172]	; (8005334 <HIF_UART_Init+0xcc>)
 8005286:	f043 0301 	orr.w	r3, r3, #1
 800528a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800528c:	4b2a      	ldr	r3, [pc, #168]	; (8005338 <HIF_UART_Init+0xd0>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005298:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80052a0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80052a2:	4a25      	ldr	r2, [pc, #148]	; (8005338 <HIF_UART_Init+0xd0>)
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80052a8:	4b24      	ldr	r3, [pc, #144]	; (800533c <HIF_UART_Init+0xd4>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052b4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80052bc:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80052be:	4a1f      	ldr	r2, [pc, #124]	; (800533c <HIF_UART_Init+0xd4>)
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80052c4:	4b1e      	ldr	r3, [pc, #120]	; (8005340 <HIF_UART_Init+0xd8>)
 80052c6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80052ca:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80052cc:	4b1d      	ldr	r3, [pc, #116]	; (8005344 <HIF_UART_Init+0xdc>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80052d2:	4b1d      	ldr	r3, [pc, #116]	; (8005348 <HIF_UART_Init+0xe0>)
 80052d4:	2280      	movs	r2, #128	; 0x80
 80052d6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80052de:	4a1b      	ldr	r2, [pc, #108]	; (800534c <HIF_UART_Init+0xe4>)
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e6:	3301      	adds	r3, #1
 80052e8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	085b      	lsrs	r3, r3, #1
 80052ee:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f6:	d302      	bcc.n	80052fe <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80052f8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80052fc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d004      	beq.n	800530e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	4a11      	ldr	r2, [pc, #68]	; (8005350 <HIF_UART_Init+0xe8>)
 800530a:	b29b      	uxth	r3, r3
 800530c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800530e:	4a11      	ldr	r2, [pc, #68]	; (8005354 <HIF_UART_Init+0xec>)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005314:	4a10      	ldr	r2, [pc, #64]	; (8005358 <HIF_UART_Init+0xf0>)
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800531a:	2106      	movs	r1, #6
 800531c:	2026      	movs	r0, #38	; 0x26
 800531e:	f7ff feab 	bl	8005078 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005322:	2026      	movs	r0, #38	; 0x26
 8005324:	f7ff fe8a 	bl	800503c <__NVIC_EnableIRQ>
}
 8005328:	bf00      	nop
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40023840 	.word	0x40023840
 8005334:	40023830 	.word	0x40023830
 8005338:	40020020 	.word	0x40020020
 800533c:	40020000 	.word	0x40020000
 8005340:	4000440c 	.word	0x4000440c
 8005344:	40004410 	.word	0x40004410
 8005348:	40004414 	.word	0x40004414
 800534c:	0501bd00 	.word	0x0501bd00
 8005350:	40004408 	.word	0x40004408
 8005354:	20012e44 	.word	0x20012e44
 8005358:	20012e48 	.word	0x20012e48

0800535c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005362:	4b24      	ldr	r3, [pc, #144]	; (80053f4 <_DoInit+0x98>)
 8005364:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2203      	movs	r2, #3
 800536a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2203      	movs	r2, #3
 8005370:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a20      	ldr	r2, [pc, #128]	; (80053f8 <_DoInit+0x9c>)
 8005376:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a20      	ldr	r2, [pc, #128]	; (80053fc <_DoInit+0xa0>)
 800537c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005384:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a17      	ldr	r2, [pc, #92]	; (80053f8 <_DoInit+0x9c>)
 800539c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a17      	ldr	r2, [pc, #92]	; (8005400 <_DoInit+0xa4>)
 80053a2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2210      	movs	r2, #16
 80053a8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3307      	adds	r3, #7
 80053c0:	4a10      	ldr	r2, [pc, #64]	; (8005404 <_DoInit+0xa8>)
 80053c2:	6810      	ldr	r0, [r2, #0]
 80053c4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80053c6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a0e      	ldr	r2, [pc, #56]	; (8005408 <_DoInit+0xac>)
 80053ce:	6810      	ldr	r0, [r2, #0]
 80053d0:	6018      	str	r0, [r3, #0]
 80053d2:	8891      	ldrh	r1, [r2, #4]
 80053d4:	7992      	ldrb	r2, [r2, #6]
 80053d6:	8099      	strh	r1, [r3, #4]
 80053d8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80053da:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2220      	movs	r2, #32
 80053e2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80053e4:	f3bf 8f5f 	dmb	sy
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	20014448 	.word	0x20014448
 80053f8:	0800708c 	.word	0x0800708c
 80053fc:	20012e4c 	.word	0x20012e4c
 8005400:	2001324c 	.word	0x2001324c
 8005404:	08007098 	.word	0x08007098
 8005408:	0800709c 	.word	0x0800709c

0800540c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800540c:	b580      	push	{r7, lr}
 800540e:	b08a      	sub	sp, #40	; 0x28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005418:	2300      	movs	r3, #0
 800541a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	429a      	cmp	r2, r3
 800542e:	d905      	bls.n	800543c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	3b01      	subs	r3, #1
 8005438:	627b      	str	r3, [r7, #36]	; 0x24
 800543a:	e007      	b.n	800544c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	69b9      	ldr	r1, [r7, #24]
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	1acb      	subs	r3, r1, r3
 8005446:	4413      	add	r3, r2
 8005448:	3b01      	subs	r3, #1
 800544a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005456:	4293      	cmp	r3, r2
 8005458:	bf28      	it	cs
 800545a:	4613      	movcs	r3, r2
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800545e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4293      	cmp	r3, r2
 8005464:	bf28      	it	cs
 8005466:	4613      	movcs	r3, r2
 8005468:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	4413      	add	r3, r2
 8005472:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005476:	68b9      	ldr	r1, [r7, #8]
 8005478:	6978      	ldr	r0, [r7, #20]
 800547a:	f001 fd6b 	bl	8006f54 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800547e:	6a3a      	ldr	r2, [r7, #32]
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	4413      	add	r3, r2
 8005484:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	4413      	add	r3, r2
 800548c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005496:	69fa      	ldr	r2, [r7, #28]
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	4413      	add	r3, r2
 800549c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	69fa      	ldr	r2, [r7, #28]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d101      	bne.n	80054ac <_WriteBlocking+0xa0>
      WrOff = 0u;
 80054a8:	2300      	movs	r3, #0
 80054aa:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80054ac:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	69fa      	ldr	r2, [r7, #28]
 80054b4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1b2      	bne.n	8005422 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80054bc:	6a3b      	ldr	r3, [r7, #32]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3728      	adds	r7, #40	; 0x28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b088      	sub	sp, #32
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d911      	bls.n	800550e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	4413      	add	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	68b9      	ldr	r1, [r7, #8]
 80054f8:	6938      	ldr	r0, [r7, #16]
 80054fa:	f001 fd2b 	bl	8006f54 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80054fe:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005502:	69fa      	ldr	r2, [r7, #28]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	441a      	add	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800550c:	e01f      	b.n	800554e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	4413      	add	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	6938      	ldr	r0, [r7, #16]
 8005522:	f001 fd17 	bl	8006f54 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	4413      	add	r3, r2
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	4619      	mov	r1, r3
 800553e:	6938      	ldr	r0, [r7, #16]
 8005540:	f001 fd08 	bl	8006f54 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005544:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	60da      	str	r2, [r3, #12]
}
 800554e:	bf00      	nop
 8005550:	3720      	adds	r7, #32
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005556:	b480      	push	{r7}
 8005558:	b087      	sub	sp, #28
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	429a      	cmp	r2, r3
 8005570:	d808      	bhi.n	8005584 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	1ad2      	subs	r2, r2, r3
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	4413      	add	r3, r2
 800557e:	3b01      	subs	r3, #1
 8005580:	617b      	str	r3, [r7, #20]
 8005582:	e004      	b.n	800558e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	3b01      	subs	r3, #1
 800558c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800558e:	697b      	ldr	r3, [r7, #20]
}
 8005590:	4618      	mov	r0, r3
 8005592:	371c      	adds	r7, #28
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800559c:	b580      	push	{r7, lr}
 800559e:	b08c      	sub	sp, #48	; 0x30
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80055a8:	4b3e      	ldr	r3, [pc, #248]	; (80056a4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80055aa:	623b      	str	r3, [r7, #32]
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80055b6:	f7ff fed1 	bl	800535c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	4613      	mov	r3, r2
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	4413      	add	r3, r2
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	4a37      	ldr	r2, [pc, #220]	; (80056a4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80055c8:	4413      	add	r3, r2
 80055ca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80055dc:	2300      	movs	r3, #0
 80055de:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80055e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d92b      	bls.n	8005640 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4293      	cmp	r3, r2
 80055f8:	bf28      	it	cs
 80055fa:	4613      	movcs	r3, r2
 80055fc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005604:	4413      	add	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	6939      	ldr	r1, [r7, #16]
 800560c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800560e:	f001 fca1 	bl	8006f54 <memcpy>
    NumBytesRead += NumBytesRem;
 8005612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	4413      	add	r3, r2
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800561a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	4413      	add	r3, r2
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800562a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	4413      	add	r3, r2
 8005630:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005638:	429a      	cmp	r2, r3
 800563a:	d101      	bne.n	8005640 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800563c:	2300      	movs	r3, #0
 800563e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4293      	cmp	r3, r2
 800564e:	bf28      	it	cs
 8005650:	4613      	movcs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d019      	beq.n	800568e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005660:	4413      	add	r3, r2
 8005662:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	6939      	ldr	r1, [r7, #16]
 8005668:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800566a:	f001 fc73 	bl	8006f54 <memcpy>
    NumBytesRead += NumBytesRem;
 800566e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	4413      	add	r3, r2
 8005674:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	4413      	add	r3, r2
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	4413      	add	r3, r2
 800568c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800568e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005698:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800569a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800569c:	4618      	mov	r0, r3
 800569e:	3730      	adds	r7, #48	; 0x30
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20014448 	.word	0x20014448

080056a8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08c      	sub	sp, #48	; 0x30
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80056b4:	4b3e      	ldr	r3, [pc, #248]	; (80057b0 <SEGGER_RTT_ReadNoLock+0x108>)
 80056b6:	623b      	str	r3, [r7, #32]
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <SEGGER_RTT_ReadNoLock+0x1e>
 80056c2:	f7ff fe4b 	bl	800535c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4613      	mov	r3, r2
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	4413      	add	r3, r2
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	3360      	adds	r3, #96	; 0x60
 80056d2:	4a37      	ldr	r2, [pc, #220]	; (80057b0 <SEGGER_RTT_ReadNoLock+0x108>)
 80056d4:	4413      	add	r3, r2
 80056d6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80056e8:	2300      	movs	r3, #0
 80056ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80056ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d92b      	bls.n	800574c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4293      	cmp	r3, r2
 8005704:	bf28      	it	cs
 8005706:	4613      	movcs	r3, r2
 8005708:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005710:	4413      	add	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	6939      	ldr	r1, [r7, #16]
 8005718:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800571a:	f001 fc1b 	bl	8006f54 <memcpy>
    NumBytesRead += NumBytesRem;
 800571e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	4413      	add	r3, r2
 8005724:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	4413      	add	r3, r2
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005736:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	4413      	add	r3, r2
 800573c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005744:	429a      	cmp	r2, r3
 8005746:	d101      	bne.n	800574c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005748:	2300      	movs	r3, #0
 800574a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4293      	cmp	r3, r2
 800575a:	bf28      	it	cs
 800575c:	4613      	movcs	r3, r2
 800575e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d019      	beq.n	800579a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576c:	4413      	add	r3, r2
 800576e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	6939      	ldr	r1, [r7, #16]
 8005774:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005776:	f001 fbed 	bl	8006f54 <memcpy>
    NumBytesRead += NumBytesRem;
 800577a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	4413      	add	r3, r2
 8005780:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	4413      	add	r3, r2
 8005788:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	4413      	add	r3, r2
 8005798:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800579a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057a4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80057a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3730      	adds	r7, #48	; 0x30
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20014448 	.word	0x20014448

080057b4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b088      	sub	sp, #32
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4613      	mov	r3, r2
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	4413      	add	r3, r2
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	3360      	adds	r3, #96	; 0x60
 80057d0:	4a1f      	ldr	r2, [pc, #124]	; (8005850 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80057d2:	4413      	add	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d029      	beq.n	8005832 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d82e      	bhi.n	8005840 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d013      	beq.n	8005812 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80057ea:	e029      	b.n	8005840 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80057ec:	6978      	ldr	r0, [r7, #20]
 80057ee:	f7ff feb2 	bl	8005556 <_GetAvailWriteSpace>
 80057f2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d202      	bcs.n	8005802 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80057fc:	2300      	movs	r3, #0
 80057fe:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005800:	e021      	b.n	8005846 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	69b9      	ldr	r1, [r7, #24]
 800580a:	6978      	ldr	r0, [r7, #20]
 800580c:	f7ff fe5b 	bl	80054c6 <_WriteNoCheck>
    break;
 8005810:	e019      	b.n	8005846 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005812:	6978      	ldr	r0, [r7, #20]
 8005814:	f7ff fe9f 	bl	8005556 <_GetAvailWriteSpace>
 8005818:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	4293      	cmp	r3, r2
 8005820:	bf28      	it	cs
 8005822:	4613      	movcs	r3, r2
 8005824:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005826:	69fa      	ldr	r2, [r7, #28]
 8005828:	69b9      	ldr	r1, [r7, #24]
 800582a:	6978      	ldr	r0, [r7, #20]
 800582c:	f7ff fe4b 	bl	80054c6 <_WriteNoCheck>
    break;
 8005830:	e009      	b.n	8005846 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	69b9      	ldr	r1, [r7, #24]
 8005836:	6978      	ldr	r0, [r7, #20]
 8005838:	f7ff fde8 	bl	800540c <_WriteBlocking>
 800583c:	61f8      	str	r0, [r7, #28]
    break;
 800583e:	e002      	b.n	8005846 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005840:	2300      	movs	r3, #0
 8005842:	61fb      	str	r3, [r7, #28]
    break;
 8005844:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005846:	69fb      	ldr	r3, [r7, #28]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3720      	adds	r7, #32
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	20014448 	.word	0x20014448

08005854 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005854:	b580      	push	{r7, lr}
 8005856:	b088      	sub	sp, #32
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005860:	4b0e      	ldr	r3, [pc, #56]	; (800589c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005862:	61fb      	str	r3, [r7, #28]
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800586e:	f7ff fd75 	bl	800535c <_DoInit>
  SEGGER_RTT_LOCK();
 8005872:	f3ef 8311 	mrs	r3, BASEPRI
 8005876:	f04f 0120 	mov.w	r1, #32
 800587a:	f381 8811 	msr	BASEPRI, r1
 800587e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	68b9      	ldr	r1, [r7, #8]
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f7ff ff95 	bl	80057b4 <SEGGER_RTT_WriteDownBufferNoLock>
 800588a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005892:	697b      	ldr	r3, [r7, #20]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3720      	adds	r7, #32
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	20014448 	.word	0x20014448

080058a0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b088      	sub	sp, #32
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80058ae:	4b3d      	ldr	r3, [pc, #244]	; (80059a4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80058bc:	f7ff fd4e 	bl	800535c <_DoInit>
  SEGGER_RTT_LOCK();
 80058c0:	f3ef 8311 	mrs	r3, BASEPRI
 80058c4:	f04f 0120 	mov.w	r1, #32
 80058c8:	f381 8811 	msr	BASEPRI, r1
 80058cc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80058ce:	4b35      	ldr	r3, [pc, #212]	; (80059a4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80058d0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80058d2:	2300      	movs	r3, #0
 80058d4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80058d6:	6939      	ldr	r1, [r7, #16]
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	4613      	mov	r3, r2
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	4413      	add	r3, r2
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	440b      	add	r3, r1
 80058e6:	3304      	adds	r3, #4
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d008      	beq.n	8005900 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	3301      	adds	r3, #1
 80058f2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	dbeb      	blt.n	80058d6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80058fe:	e000      	b.n	8005902 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005900:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	69fa      	ldr	r2, [r7, #28]
 8005908:	429a      	cmp	r2, r3
 800590a:	da3f      	bge.n	800598c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800590c:	6939      	ldr	r1, [r7, #16]
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	4613      	mov	r3, r2
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	4413      	add	r3, r2
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	440b      	add	r3, r1
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005920:	6939      	ldr	r1, [r7, #16]
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	1c5a      	adds	r2, r3, #1
 8005926:	4613      	mov	r3, r2
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	4413      	add	r3, r2
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	440b      	add	r3, r1
 8005930:	3304      	adds	r3, #4
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005936:	6939      	ldr	r1, [r7, #16]
 8005938:	69fa      	ldr	r2, [r7, #28]
 800593a:	4613      	mov	r3, r2
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	4413      	add	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	440b      	add	r3, r1
 8005944:	3320      	adds	r3, #32
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800594a:	6939      	ldr	r1, [r7, #16]
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	4613      	mov	r3, r2
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	4413      	add	r3, r2
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	440b      	add	r3, r1
 8005958:	3328      	adds	r3, #40	; 0x28
 800595a:	2200      	movs	r2, #0
 800595c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800595e:	6939      	ldr	r1, [r7, #16]
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	4613      	mov	r3, r2
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	4413      	add	r3, r2
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	440b      	add	r3, r1
 800596c:	3324      	adds	r3, #36	; 0x24
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005972:	6939      	ldr	r1, [r7, #16]
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	4613      	mov	r3, r2
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	4413      	add	r3, r2
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	440b      	add	r3, r1
 8005980:	332c      	adds	r3, #44	; 0x2c
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005986:	f3bf 8f5f 	dmb	sy
 800598a:	e002      	b.n	8005992 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800598c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005990:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005998:	69fb      	ldr	r3, [r7, #28]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3720      	adds	r7, #32
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20014448 	.word	0x20014448

080059a8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80059b6:	4b33      	ldr	r3, [pc, #204]	; (8005a84 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80059b8:	61bb      	str	r3, [r7, #24]
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80059c4:	f7ff fcca 	bl	800535c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80059c8:	4b2e      	ldr	r3, [pc, #184]	; (8005a84 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80059ca:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	461a      	mov	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d24d      	bcs.n	8005a74 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80059d8:	f3ef 8311 	mrs	r3, BASEPRI
 80059dc:	f04f 0120 	mov.w	r1, #32
 80059e0:	f381 8811 	msr	BASEPRI, r1
 80059e4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d031      	beq.n	8005a50 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80059ec:	6979      	ldr	r1, [r7, #20]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4613      	mov	r3, r2
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	4413      	add	r3, r2
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	440b      	add	r3, r1
 80059fa:	3360      	adds	r3, #96	; 0x60
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005a00:	6979      	ldr	r1, [r7, #20]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	4613      	mov	r3, r2
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	4413      	add	r3, r2
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	440b      	add	r3, r1
 8005a0e:	3364      	adds	r3, #100	; 0x64
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005a14:	6979      	ldr	r1, [r7, #20]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	4413      	add	r3, r2
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	440b      	add	r3, r1
 8005a22:	3368      	adds	r3, #104	; 0x68
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005a28:	6979      	ldr	r1, [r7, #20]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	4413      	add	r3, r2
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	440b      	add	r3, r1
 8005a36:	3370      	adds	r3, #112	; 0x70
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005a3c:	6979      	ldr	r1, [r7, #20]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	4613      	mov	r3, r2
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	4413      	add	r3, r2
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	440b      	add	r3, r1
 8005a4a:	336c      	adds	r3, #108	; 0x6c
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005a50:	6979      	ldr	r1, [r7, #20]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	4613      	mov	r3, r2
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	4413      	add	r3, r2
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	440b      	add	r3, r1
 8005a5e:	3374      	adds	r3, #116	; 0x74
 8005a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a62:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a64:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61fb      	str	r3, [r7, #28]
 8005a72:	e002      	b.n	8005a7a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005a74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a78:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005a7a:	69fb      	ldr	r3, [r7, #28]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3720      	adds	r7, #32
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	20014448 	.word	0x20014448

08005a88 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005a98:	e002      	b.n	8005aa0 <_EncodeStr+0x18>
    Len++;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1f6      	bne.n	8005a9a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d901      	bls.n	8005ab8 <_EncodeStr+0x30>
    Len = Limit;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	2bfe      	cmp	r3, #254	; 0xfe
 8005abc:	d806      	bhi.n	8005acc <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	60fa      	str	r2, [r7, #12]
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	701a      	strb	r2, [r3, #0]
 8005aca:	e011      	b.n	8005af0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	60fa      	str	r2, [r7, #12]
 8005ad2:	22ff      	movs	r2, #255	; 0xff
 8005ad4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	60fa      	str	r2, [r7, #12]
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	b2d2      	uxtb	r2, r2
 8005ae0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	0a19      	lsrs	r1, r3, #8
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	1c5a      	adds	r2, r3, #1
 8005aea:	60fa      	str	r2, [r7, #12]
 8005aec:	b2ca      	uxtb	r2, r1
 8005aee:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005af0:	2300      	movs	r3, #0
 8005af2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005af4:	e00a      	b.n	8005b0c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	1c53      	adds	r3, r2, #1
 8005afa:	60bb      	str	r3, [r7, #8]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	1c59      	adds	r1, r3, #1
 8005b00:	60f9      	str	r1, [r7, #12]
 8005b02:	7812      	ldrb	r2, [r2, #0]
 8005b04:	701a      	strb	r2, [r3, #0]
    n++;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d3f0      	bcc.n	8005af6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005b14:	68fb      	ldr	r3, [r7, #12]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	371c      	adds	r7, #28
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3304      	adds	r3, #4
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
	...

08005b3c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005b42:	4b36      	ldr	r3, [pc, #216]	; (8005c1c <_HandleIncomingPacket+0xe0>)
 8005b44:	7e1b      	ldrb	r3, [r3, #24]
 8005b46:	4618      	mov	r0, r3
 8005b48:	1cfb      	adds	r3, r7, #3
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	f7ff fdab 	bl	80056a8 <SEGGER_RTT_ReadNoLock>
 8005b52:	4603      	mov	r3, r0
 8005b54:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	dd54      	ble.n	8005c06 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005b5c:	78fb      	ldrb	r3, [r7, #3]
 8005b5e:	2b80      	cmp	r3, #128	; 0x80
 8005b60:	d032      	beq.n	8005bc8 <_HandleIncomingPacket+0x8c>
 8005b62:	2b80      	cmp	r3, #128	; 0x80
 8005b64:	dc42      	bgt.n	8005bec <_HandleIncomingPacket+0xb0>
 8005b66:	2b07      	cmp	r3, #7
 8005b68:	dc16      	bgt.n	8005b98 <_HandleIncomingPacket+0x5c>
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	dd3e      	ble.n	8005bec <_HandleIncomingPacket+0xb0>
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	2b06      	cmp	r3, #6
 8005b72:	d83b      	bhi.n	8005bec <_HandleIncomingPacket+0xb0>
 8005b74:	a201      	add	r2, pc, #4	; (adr r2, 8005b7c <_HandleIncomingPacket+0x40>)
 8005b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7a:	bf00      	nop
 8005b7c:	08005b9f 	.word	0x08005b9f
 8005b80:	08005ba5 	.word	0x08005ba5
 8005b84:	08005bab 	.word	0x08005bab
 8005b88:	08005bb1 	.word	0x08005bb1
 8005b8c:	08005bb7 	.word	0x08005bb7
 8005b90:	08005bbd 	.word	0x08005bbd
 8005b94:	08005bc3 	.word	0x08005bc3
 8005b98:	2b7f      	cmp	r3, #127	; 0x7f
 8005b9a:	d036      	beq.n	8005c0a <_HandleIncomingPacket+0xce>
 8005b9c:	e026      	b.n	8005bec <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005b9e:	f000 fbab 	bl	80062f8 <SEGGER_SYSVIEW_Start>
      break;
 8005ba2:	e037      	b.n	8005c14 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005ba4:	f000 fc64 	bl	8006470 <SEGGER_SYSVIEW_Stop>
      break;
 8005ba8:	e034      	b.n	8005c14 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005baa:	f000 fe3d 	bl	8006828 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005bae:	e031      	b.n	8005c14 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005bb0:	f000 fe02 	bl	80067b8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005bb4:	e02e      	b.n	8005c14 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005bb6:	f000 fc81 	bl	80064bc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005bba:	e02b      	b.n	8005c14 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005bbc:	f001 f8d0 	bl	8006d60 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005bc0:	e028      	b.n	8005c14 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005bc2:	f001 f8af 	bl	8006d24 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005bc6:	e025      	b.n	8005c14 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005bc8:	4b14      	ldr	r3, [pc, #80]	; (8005c1c <_HandleIncomingPacket+0xe0>)
 8005bca:	7e1b      	ldrb	r3, [r3, #24]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	1cfb      	adds	r3, r7, #3
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	f7ff fd68 	bl	80056a8 <SEGGER_RTT_ReadNoLock>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	dd15      	ble.n	8005c0e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005be2:	78fb      	ldrb	r3, [r7, #3]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f001 f81d 	bl	8006c24 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005bea:	e010      	b.n	8005c0e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005bec:	78fb      	ldrb	r3, [r7, #3]
 8005bee:	b25b      	sxtb	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	da0e      	bge.n	8005c12 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005bf4:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <_HandleIncomingPacket+0xe0>)
 8005bf6:	7e1b      	ldrb	r3, [r3, #24]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	1cfb      	adds	r3, r7, #3
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	4619      	mov	r1, r3
 8005c00:	f7ff fd52 	bl	80056a8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005c04:	e005      	b.n	8005c12 <_HandleIncomingPacket+0xd6>
    }
  }
 8005c06:	bf00      	nop
 8005c08:	e004      	b.n	8005c14 <_HandleIncomingPacket+0xd8>
      break;
 8005c0a:	bf00      	nop
 8005c0c:	e002      	b.n	8005c14 <_HandleIncomingPacket+0xd8>
      break;
 8005c0e:	bf00      	nop
 8005c10:	e000      	b.n	8005c14 <_HandleIncomingPacket+0xd8>
      break;
 8005c12:	bf00      	nop
}
 8005c14:	bf00      	nop
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	20014264 	.word	0x20014264

08005c20 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08c      	sub	sp, #48	; 0x30
 8005c24:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005c26:	2301      	movs	r3, #1
 8005c28:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005c2a:	1d3b      	adds	r3, r7, #4
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c34:	4b32      	ldr	r3, [pc, #200]	; (8005d00 <_TrySendOverflowPacket+0xe0>)
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c3a:	e00b      	b.n	8005c54 <_TrySendOverflowPacket+0x34>
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c42:	1c59      	adds	r1, r3, #1
 8005c44:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c50:	09db      	lsrs	r3, r3, #7
 8005c52:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c56:	2b7f      	cmp	r3, #127	; 0x7f
 8005c58:	d8f0      	bhi.n	8005c3c <_TrySendOverflowPacket+0x1c>
 8005c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c62:	b2d2      	uxtb	r2, r2
 8005c64:	701a      	strb	r2, [r3, #0]
 8005c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c68:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005c6a:	4b26      	ldr	r3, [pc, #152]	; (8005d04 <_TrySendOverflowPacket+0xe4>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005c70:	4b23      	ldr	r3, [pc, #140]	; (8005d00 <_TrySendOverflowPacket+0xe0>)
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	623b      	str	r3, [r7, #32]
 8005c82:	e00b      	b.n	8005c9c <_TrySendOverflowPacket+0x7c>
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	1c59      	adds	r1, r3, #1
 8005c8c:	6279      	str	r1, [r7, #36]	; 0x24
 8005c8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c92:	b2d2      	uxtb	r2, r2
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	09db      	lsrs	r3, r3, #7
 8005c9a:	623b      	str	r3, [r7, #32]
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005ca0:	d8f0      	bhi.n	8005c84 <_TrySendOverflowPacket+0x64>
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	627a      	str	r2, [r7, #36]	; 0x24
 8005ca8:	6a3a      	ldr	r2, [r7, #32]
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005cb2:	4b13      	ldr	r3, [pc, #76]	; (8005d00 <_TrySendOverflowPacket+0xe0>)
 8005cb4:	785b      	ldrb	r3, [r3, #1]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	1d3b      	adds	r3, r7, #4
 8005cba:	69fa      	ldr	r2, [r7, #28]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	1d3b      	adds	r3, r7, #4
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	f7fa fa8c 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005ccc:	f7ff fabc 	bl	8005248 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d009      	beq.n	8005cea <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005cd6:	4a0a      	ldr	r2, [pc, #40]	; (8005d00 <_TrySendOverflowPacket+0xe0>)
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005cdc:	4b08      	ldr	r3, [pc, #32]	; (8005d00 <_TrySendOverflowPacket+0xe0>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <_TrySendOverflowPacket+0xe0>)
 8005ce6:	701a      	strb	r2, [r3, #0]
 8005ce8:	e004      	b.n	8005cf4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005cea:	4b05      	ldr	r3, [pc, #20]	; (8005d00 <_TrySendOverflowPacket+0xe0>)
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	4a03      	ldr	r2, [pc, #12]	; (8005d00 <_TrySendOverflowPacket+0xe0>)
 8005cf2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005cf4:	693b      	ldr	r3, [r7, #16]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3730      	adds	r7, #48	; 0x30
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	20014264 	.word	0x20014264
 8005d04:	e0001004 	.word	0xe0001004

08005d08 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08a      	sub	sp, #40	; 0x28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005d14:	4b6d      	ldr	r3, [pc, #436]	; (8005ecc <_SendPacket+0x1c4>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d010      	beq.n	8005d3e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005d1c:	4b6b      	ldr	r3, [pc, #428]	; (8005ecc <_SendPacket+0x1c4>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 80a5 	beq.w	8005e70 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005d26:	4b69      	ldr	r3, [pc, #420]	; (8005ecc <_SendPacket+0x1c4>)
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d109      	bne.n	8005d42 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005d2e:	f7ff ff77 	bl	8005c20 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005d32:	4b66      	ldr	r3, [pc, #408]	; (8005ecc <_SendPacket+0x1c4>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	f040 809c 	bne.w	8005e74 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005d3c:	e001      	b.n	8005d42 <_SendPacket+0x3a>
    goto Send;
 8005d3e:	bf00      	nop
 8005d40:	e000      	b.n	8005d44 <_SendPacket+0x3c>
Send:
 8005d42:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b1f      	cmp	r3, #31
 8005d48:	d809      	bhi.n	8005d5e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005d4a:	4b60      	ldr	r3, [pc, #384]	; (8005ecc <_SendPacket+0x1c4>)
 8005d4c:	69da      	ldr	r2, [r3, #28]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	fa22 f303 	lsr.w	r3, r2, r3
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f040 808d 	bne.w	8005e78 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b17      	cmp	r3, #23
 8005d62:	d807      	bhi.n	8005d74 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	e03d      	b.n	8005df0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d80:	d912      	bls.n	8005da8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	09da      	lsrs	r2, r3, #7
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	b2d2      	uxtb	r2, r2
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	3a01      	subs	r2, #1
 8005d9a:	60fa      	str	r2, [r7, #12]
 8005d9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	e006      	b.n	8005db6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b7f      	cmp	r3, #127	; 0x7f
 8005dba:	d912      	bls.n	8005de2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	09da      	lsrs	r2, r3, #7
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	3a01      	subs	r2, #1
 8005dd4:	60fa      	str	r2, [r7, #12]
 8005dd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	701a      	strb	r2, [r3, #0]
 8005de0:	e006      	b.n	8005df0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005df0:	4b37      	ldr	r3, [pc, #220]	; (8005ed0 <_SendPacket+0x1c8>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005df6:	4b35      	ldr	r3, [pc, #212]	; (8005ecc <_SendPacket+0x1c4>)
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	623b      	str	r3, [r7, #32]
 8005e08:	e00b      	b.n	8005e22 <_SendPacket+0x11a>
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	1c59      	adds	r1, r3, #1
 8005e12:	6279      	str	r1, [r7, #36]	; 0x24
 8005e14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	701a      	strb	r2, [r3, #0]
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	09db      	lsrs	r3, r3, #7
 8005e20:	623b      	str	r3, [r7, #32]
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	2b7f      	cmp	r3, #127	; 0x7f
 8005e26:	d8f0      	bhi.n	8005e0a <_SendPacket+0x102>
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	627a      	str	r2, [r7, #36]	; 0x24
 8005e2e:	6a3a      	ldr	r2, [r7, #32]
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	701a      	strb	r2, [r3, #0]
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005e38:	4b24      	ldr	r3, [pc, #144]	; (8005ecc <_SendPacket+0x1c4>)
 8005e3a:	785b      	ldrb	r3, [r3, #1]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	461a      	mov	r2, r3
 8005e46:	68f9      	ldr	r1, [r7, #12]
 8005e48:	f7fa f9ca 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005e50:	f7ff f9fa 	bl	8005248 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005e5a:	4a1c      	ldr	r2, [pc, #112]	; (8005ecc <_SendPacket+0x1c4>)
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	60d3      	str	r3, [r2, #12]
 8005e60:	e00b      	b.n	8005e7a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005e62:	4b1a      	ldr	r3, [pc, #104]	; (8005ecc <_SendPacket+0x1c4>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	3301      	adds	r3, #1
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	4b18      	ldr	r3, [pc, #96]	; (8005ecc <_SendPacket+0x1c4>)
 8005e6c:	701a      	strb	r2, [r3, #0]
 8005e6e:	e004      	b.n	8005e7a <_SendPacket+0x172>
    goto SendDone;
 8005e70:	bf00      	nop
 8005e72:	e002      	b.n	8005e7a <_SendPacket+0x172>
      goto SendDone;
 8005e74:	bf00      	nop
 8005e76:	e000      	b.n	8005e7a <_SendPacket+0x172>
      goto SendDone;
 8005e78:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005e7a:	4b14      	ldr	r3, [pc, #80]	; (8005ecc <_SendPacket+0x1c4>)
 8005e7c:	7e1b      	ldrb	r3, [r3, #24]
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4a14      	ldr	r2, [pc, #80]	; (8005ed4 <_SendPacket+0x1cc>)
 8005e82:	460b      	mov	r3, r1
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	440b      	add	r3, r1
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	4413      	add	r3, r2
 8005e8c:	336c      	adds	r3, #108	; 0x6c
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	4b0e      	ldr	r3, [pc, #56]	; (8005ecc <_SendPacket+0x1c4>)
 8005e92:	7e1b      	ldrb	r3, [r3, #24]
 8005e94:	4618      	mov	r0, r3
 8005e96:	490f      	ldr	r1, [pc, #60]	; (8005ed4 <_SendPacket+0x1cc>)
 8005e98:	4603      	mov	r3, r0
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	4403      	add	r3, r0
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	440b      	add	r3, r1
 8005ea2:	3370      	adds	r3, #112	; 0x70
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d00b      	beq.n	8005ec2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005eaa:	4b08      	ldr	r3, [pc, #32]	; (8005ecc <_SendPacket+0x1c4>)
 8005eac:	789b      	ldrb	r3, [r3, #2]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d107      	bne.n	8005ec2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005eb2:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <_SendPacket+0x1c4>)
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005eb8:	f7ff fe40 	bl	8005b3c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005ebc:	4b03      	ldr	r3, [pc, #12]	; (8005ecc <_SendPacket+0x1c4>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005ec2:	bf00      	nop
 8005ec4:	3728      	adds	r7, #40	; 0x28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20014264 	.word	0x20014264
 8005ed0:	e0001004 	.word	0xe0001004
 8005ed4:	20014448 	.word	0x20014448

08005ed8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af02      	add	r7, sp, #8
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005eec:	4917      	ldr	r1, [pc, #92]	; (8005f4c <SEGGER_SYSVIEW_Init+0x74>)
 8005eee:	4818      	ldr	r0, [pc, #96]	; (8005f50 <SEGGER_SYSVIEW_Init+0x78>)
 8005ef0:	f7ff fcd6 	bl	80058a0 <SEGGER_RTT_AllocUpBuffer>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	4b16      	ldr	r3, [pc, #88]	; (8005f54 <SEGGER_SYSVIEW_Init+0x7c>)
 8005efa:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005efc:	4b15      	ldr	r3, [pc, #84]	; (8005f54 <SEGGER_SYSVIEW_Init+0x7c>)
 8005efe:	785a      	ldrb	r2, [r3, #1]
 8005f00:	4b14      	ldr	r3, [pc, #80]	; (8005f54 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f02:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f04:	4b13      	ldr	r3, [pc, #76]	; (8005f54 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f06:	7e1b      	ldrb	r3, [r3, #24]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	2308      	movs	r3, #8
 8005f10:	4a11      	ldr	r2, [pc, #68]	; (8005f58 <SEGGER_SYSVIEW_Init+0x80>)
 8005f12:	490f      	ldr	r1, [pc, #60]	; (8005f50 <SEGGER_SYSVIEW_Init+0x78>)
 8005f14:	f7ff fd48 	bl	80059a8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005f18:	4b0e      	ldr	r3, [pc, #56]	; (8005f54 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f1e:	4b0f      	ldr	r3, [pc, #60]	; (8005f5c <SEGGER_SYSVIEW_Init+0x84>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a0c      	ldr	r2, [pc, #48]	; (8005f54 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f24:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005f26:	4a0b      	ldr	r2, [pc, #44]	; (8005f54 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005f2c:	4a09      	ldr	r2, [pc, #36]	; (8005f54 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005f32:	4a08      	ldr	r2, [pc, #32]	; (8005f54 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005f38:	4a06      	ldr	r2, [pc, #24]	; (8005f54 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005f3e:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005f44:	bf00      	nop
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	2001325c 	.word	0x2001325c
 8005f50:	080070a4 	.word	0x080070a4
 8005f54:	20014264 	.word	0x20014264
 8005f58:	2001425c 	.word	0x2001425c
 8005f5c:	e0001004 	.word	0xe0001004

08005f60 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005f68:	4a04      	ldr	r2, [pc, #16]	; (8005f7c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6113      	str	r3, [r2, #16]
}
 8005f6e:	bf00      	nop
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	20014264 	.word	0x20014264

08005f80 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f88:	f3ef 8311 	mrs	r3, BASEPRI
 8005f8c:	f04f 0120 	mov.w	r1, #32
 8005f90:	f381 8811 	msr	BASEPRI, r1
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	4808      	ldr	r0, [pc, #32]	; (8005fb8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005f98:	f7ff fdc3 	bl	8005b22 <_PreparePacket>
 8005f9c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	68b9      	ldr	r1, [r7, #8]
 8005fa2:	68b8      	ldr	r0, [r7, #8]
 8005fa4:	f7ff feb0 	bl	8005d08 <_SendPacket>
  RECORD_END();
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f383 8811 	msr	BASEPRI, r3
}
 8005fae:	bf00      	nop
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20014294 	.word	0x20014294

08005fbc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b088      	sub	sp, #32
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fc6:	f3ef 8311 	mrs	r3, BASEPRI
 8005fca:	f04f 0120 	mov.w	r1, #32
 8005fce:	f381 8811 	msr	BASEPRI, r1
 8005fd2:	617b      	str	r3, [r7, #20]
 8005fd4:	4816      	ldr	r0, [pc, #88]	; (8006030 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005fd6:	f7ff fda4 	bl	8005b22 <_PreparePacket>
 8005fda:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	61fb      	str	r3, [r7, #28]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	61bb      	str	r3, [r7, #24]
 8005fe8:	e00b      	b.n	8006002 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	1c59      	adds	r1, r3, #1
 8005ff2:	61f9      	str	r1, [r7, #28]
 8005ff4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	09db      	lsrs	r3, r3, #7
 8006000:	61bb      	str	r3, [r7, #24]
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	2b7f      	cmp	r3, #127	; 0x7f
 8006006:	d8f0      	bhi.n	8005fea <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	61fa      	str	r2, [r7, #28]
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	68f9      	ldr	r1, [r7, #12]
 800601c:	6938      	ldr	r0, [r7, #16]
 800601e:	f7ff fe73 	bl	8005d08 <_SendPacket>
  RECORD_END();
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f383 8811 	msr	BASEPRI, r3
}
 8006028:	bf00      	nop
 800602a:	3720      	adds	r7, #32
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	20014294 	.word	0x20014294

08006034 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006034:	b580      	push	{r7, lr}
 8006036:	b08c      	sub	sp, #48	; 0x30
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006040:	f3ef 8311 	mrs	r3, BASEPRI
 8006044:	f04f 0120 	mov.w	r1, #32
 8006048:	f381 8811 	msr	BASEPRI, r1
 800604c:	61fb      	str	r3, [r7, #28]
 800604e:	4825      	ldr	r0, [pc, #148]	; (80060e4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006050:	f7ff fd67 	bl	8005b22 <_PreparePacket>
 8006054:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	62bb      	str	r3, [r7, #40]	; 0x28
 8006062:	e00b      	b.n	800607c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006066:	b2da      	uxtb	r2, r3
 8006068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606a:	1c59      	adds	r1, r3, #1
 800606c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800606e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006072:	b2d2      	uxtb	r2, r2
 8006074:	701a      	strb	r2, [r3, #0]
 8006076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006078:	09db      	lsrs	r3, r3, #7
 800607a:	62bb      	str	r3, [r7, #40]	; 0x28
 800607c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607e:	2b7f      	cmp	r3, #127	; 0x7f
 8006080:	d8f0      	bhi.n	8006064 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006090:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	627b      	str	r3, [r7, #36]	; 0x24
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	623b      	str	r3, [r7, #32]
 800609a:	e00b      	b.n	80060b4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	1c59      	adds	r1, r3, #1
 80060a4:	6279      	str	r1, [r7, #36]	; 0x24
 80060a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060aa:	b2d2      	uxtb	r2, r2
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	09db      	lsrs	r3, r3, #7
 80060b2:	623b      	str	r3, [r7, #32]
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	2b7f      	cmp	r3, #127	; 0x7f
 80060b8:	d8f0      	bhi.n	800609c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	627a      	str	r2, [r7, #36]	; 0x24
 80060c0:	6a3a      	ldr	r2, [r7, #32]
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	701a      	strb	r2, [r3, #0]
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	6979      	ldr	r1, [r7, #20]
 80060ce:	69b8      	ldr	r0, [r7, #24]
 80060d0:	f7ff fe1a 	bl	8005d08 <_SendPacket>
  RECORD_END();
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	f383 8811 	msr	BASEPRI, r3
}
 80060da:	bf00      	nop
 80060dc:	3730      	adds	r7, #48	; 0x30
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	20014294 	.word	0x20014294

080060e8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08e      	sub	sp, #56	; 0x38
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
 80060f4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80060f6:	f3ef 8311 	mrs	r3, BASEPRI
 80060fa:	f04f 0120 	mov.w	r1, #32
 80060fe:	f381 8811 	msr	BASEPRI, r1
 8006102:	61fb      	str	r3, [r7, #28]
 8006104:	4832      	ldr	r0, [pc, #200]	; (80061d0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006106:	f7ff fd0c 	bl	8005b22 <_PreparePacket>
 800610a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	637b      	str	r3, [r7, #52]	; 0x34
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	633b      	str	r3, [r7, #48]	; 0x30
 8006118:	e00b      	b.n	8006132 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	b2da      	uxtb	r2, r3
 800611e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006120:	1c59      	adds	r1, r3, #1
 8006122:	6379      	str	r1, [r7, #52]	; 0x34
 8006124:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006128:	b2d2      	uxtb	r2, r2
 800612a:	701a      	strb	r2, [r3, #0]
 800612c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612e:	09db      	lsrs	r3, r3, #7
 8006130:	633b      	str	r3, [r7, #48]	; 0x30
 8006132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006134:	2b7f      	cmp	r3, #127	; 0x7f
 8006136:	d8f0      	bhi.n	800611a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	637a      	str	r2, [r7, #52]	; 0x34
 800613e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	701a      	strb	r2, [r3, #0]
 8006144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006146:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006150:	e00b      	b.n	800616a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006154:	b2da      	uxtb	r2, r3
 8006156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006158:	1c59      	adds	r1, r3, #1
 800615a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800615c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006160:	b2d2      	uxtb	r2, r2
 8006162:	701a      	strb	r2, [r3, #0]
 8006164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006166:	09db      	lsrs	r3, r3, #7
 8006168:	62bb      	str	r3, [r7, #40]	; 0x28
 800616a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616c:	2b7f      	cmp	r3, #127	; 0x7f
 800616e:	d8f0      	bhi.n	8006152 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006176:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	627b      	str	r3, [r7, #36]	; 0x24
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	623b      	str	r3, [r7, #32]
 8006188:	e00b      	b.n	80061a2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	b2da      	uxtb	r2, r3
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	1c59      	adds	r1, r3, #1
 8006192:	6279      	str	r1, [r7, #36]	; 0x24
 8006194:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006198:	b2d2      	uxtb	r2, r2
 800619a:	701a      	strb	r2, [r3, #0]
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	09db      	lsrs	r3, r3, #7
 80061a0:	623b      	str	r3, [r7, #32]
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	2b7f      	cmp	r3, #127	; 0x7f
 80061a6:	d8f0      	bhi.n	800618a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	627a      	str	r2, [r7, #36]	; 0x24
 80061ae:	6a3a      	ldr	r2, [r7, #32]
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	6979      	ldr	r1, [r7, #20]
 80061bc:	69b8      	ldr	r0, [r7, #24]
 80061be:	f7ff fda3 	bl	8005d08 <_SendPacket>
  RECORD_END();
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	f383 8811 	msr	BASEPRI, r3
}
 80061c8:	bf00      	nop
 80061ca:	3738      	adds	r7, #56	; 0x38
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20014294 	.word	0x20014294

080061d4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b090      	sub	sp, #64	; 0x40
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80061e2:	f3ef 8311 	mrs	r3, BASEPRI
 80061e6:	f04f 0120 	mov.w	r1, #32
 80061ea:	f381 8811 	msr	BASEPRI, r1
 80061ee:	61fb      	str	r3, [r7, #28]
 80061f0:	4840      	ldr	r0, [pc, #256]	; (80062f4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80061f2:	f7ff fc96 	bl	8005b22 <_PreparePacket>
 80061f6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	63bb      	str	r3, [r7, #56]	; 0x38
 8006204:	e00b      	b.n	800621e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006208:	b2da      	uxtb	r2, r3
 800620a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800620c:	1c59      	adds	r1, r3, #1
 800620e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006210:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006214:	b2d2      	uxtb	r2, r2
 8006216:	701a      	strb	r2, [r3, #0]
 8006218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621a:	09db      	lsrs	r3, r3, #7
 800621c:	63bb      	str	r3, [r7, #56]	; 0x38
 800621e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006220:	2b7f      	cmp	r3, #127	; 0x7f
 8006222:	d8f0      	bhi.n	8006206 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	63fa      	str	r2, [r7, #60]	; 0x3c
 800622a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800622c:	b2d2      	uxtb	r2, r2
 800622e:	701a      	strb	r2, [r3, #0]
 8006230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006232:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	637b      	str	r3, [r7, #52]	; 0x34
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	633b      	str	r3, [r7, #48]	; 0x30
 800623c:	e00b      	b.n	8006256 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	b2da      	uxtb	r2, r3
 8006242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006244:	1c59      	adds	r1, r3, #1
 8006246:	6379      	str	r1, [r7, #52]	; 0x34
 8006248:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800624c:	b2d2      	uxtb	r2, r2
 800624e:	701a      	strb	r2, [r3, #0]
 8006250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006252:	09db      	lsrs	r3, r3, #7
 8006254:	633b      	str	r3, [r7, #48]	; 0x30
 8006256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006258:	2b7f      	cmp	r3, #127	; 0x7f
 800625a:	d8f0      	bhi.n	800623e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800625c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	637a      	str	r2, [r7, #52]	; 0x34
 8006262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006264:	b2d2      	uxtb	r2, r2
 8006266:	701a      	strb	r2, [r3, #0]
 8006268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	62bb      	str	r3, [r7, #40]	; 0x28
 8006274:	e00b      	b.n	800628e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006278:	b2da      	uxtb	r2, r3
 800627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627c:	1c59      	adds	r1, r3, #1
 800627e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006280:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006284:	b2d2      	uxtb	r2, r2
 8006286:	701a      	strb	r2, [r3, #0]
 8006288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628a:	09db      	lsrs	r3, r3, #7
 800628c:	62bb      	str	r3, [r7, #40]	; 0x28
 800628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006290:	2b7f      	cmp	r3, #127	; 0x7f
 8006292:	d8f0      	bhi.n	8006276 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006296:	1c5a      	adds	r2, r3, #1
 8006298:	62fa      	str	r2, [r7, #44]	; 0x2c
 800629a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	701a      	strb	r2, [r3, #0]
 80062a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	627b      	str	r3, [r7, #36]	; 0x24
 80062a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062aa:	623b      	str	r3, [r7, #32]
 80062ac:	e00b      	b.n	80062c6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	1c59      	adds	r1, r3, #1
 80062b6:	6279      	str	r1, [r7, #36]	; 0x24
 80062b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062bc:	b2d2      	uxtb	r2, r2
 80062be:	701a      	strb	r2, [r3, #0]
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	09db      	lsrs	r3, r3, #7
 80062c4:	623b      	str	r3, [r7, #32]
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	2b7f      	cmp	r3, #127	; 0x7f
 80062ca:	d8f0      	bhi.n	80062ae <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	627a      	str	r2, [r7, #36]	; 0x24
 80062d2:	6a3a      	ldr	r2, [r7, #32]
 80062d4:	b2d2      	uxtb	r2, r2
 80062d6:	701a      	strb	r2, [r3, #0]
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	6979      	ldr	r1, [r7, #20]
 80062e0:	69b8      	ldr	r0, [r7, #24]
 80062e2:	f7ff fd11 	bl	8005d08 <_SendPacket>
  RECORD_END();
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	f383 8811 	msr	BASEPRI, r3
}
 80062ec:	bf00      	nop
 80062ee:	3740      	adds	r7, #64	; 0x40
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	20014294 	.word	0x20014294

080062f8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08c      	sub	sp, #48	; 0x30
 80062fc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80062fe:	4b59      	ldr	r3, [pc, #356]	; (8006464 <SEGGER_SYSVIEW_Start+0x16c>)
 8006300:	2201      	movs	r2, #1
 8006302:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006304:	f3ef 8311 	mrs	r3, BASEPRI
 8006308:	f04f 0120 	mov.w	r1, #32
 800630c:	f381 8811 	msr	BASEPRI, r1
 8006310:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006312:	4b54      	ldr	r3, [pc, #336]	; (8006464 <SEGGER_SYSVIEW_Start+0x16c>)
 8006314:	785b      	ldrb	r3, [r3, #1]
 8006316:	220a      	movs	r2, #10
 8006318:	4953      	ldr	r1, [pc, #332]	; (8006468 <SEGGER_SYSVIEW_Start+0x170>)
 800631a:	4618      	mov	r0, r3
 800631c:	f7f9 ff60 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006326:	f7fe ff8f 	bl	8005248 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800632a:	200a      	movs	r0, #10
 800632c:	f7ff fe28 	bl	8005f80 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006330:	f3ef 8311 	mrs	r3, BASEPRI
 8006334:	f04f 0120 	mov.w	r1, #32
 8006338:	f381 8811 	msr	BASEPRI, r1
 800633c:	60bb      	str	r3, [r7, #8]
 800633e:	484b      	ldr	r0, [pc, #300]	; (800646c <SEGGER_SYSVIEW_Start+0x174>)
 8006340:	f7ff fbef 	bl	8005b22 <_PreparePacket>
 8006344:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800634e:	4b45      	ldr	r3, [pc, #276]	; (8006464 <SEGGER_SYSVIEW_Start+0x16c>)
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	62bb      	str	r3, [r7, #40]	; 0x28
 8006354:	e00b      	b.n	800636e <SEGGER_SYSVIEW_Start+0x76>
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	b2da      	uxtb	r2, r3
 800635a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635c:	1c59      	adds	r1, r3, #1
 800635e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006360:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	701a      	strb	r2, [r3, #0]
 8006368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636a:	09db      	lsrs	r3, r3, #7
 800636c:	62bb      	str	r3, [r7, #40]	; 0x28
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	2b7f      	cmp	r3, #127	; 0x7f
 8006372:	d8f0      	bhi.n	8006356 <SEGGER_SYSVIEW_Start+0x5e>
 8006374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	62fa      	str	r2, [r7, #44]	; 0x2c
 800637a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	701a      	strb	r2, [r3, #0]
 8006380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006382:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	627b      	str	r3, [r7, #36]	; 0x24
 8006388:	4b36      	ldr	r3, [pc, #216]	; (8006464 <SEGGER_SYSVIEW_Start+0x16c>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	623b      	str	r3, [r7, #32]
 800638e:	e00b      	b.n	80063a8 <SEGGER_SYSVIEW_Start+0xb0>
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	b2da      	uxtb	r2, r3
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	1c59      	adds	r1, r3, #1
 8006398:	6279      	str	r1, [r7, #36]	; 0x24
 800639a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	701a      	strb	r2, [r3, #0]
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	09db      	lsrs	r3, r3, #7
 80063a6:	623b      	str	r3, [r7, #32]
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	2b7f      	cmp	r3, #127	; 0x7f
 80063ac:	d8f0      	bhi.n	8006390 <SEGGER_SYSVIEW_Start+0x98>
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	627a      	str	r2, [r7, #36]	; 0x24
 80063b4:	6a3a      	ldr	r2, [r7, #32]
 80063b6:	b2d2      	uxtb	r2, r2
 80063b8:	701a      	strb	r2, [r3, #0]
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	61fb      	str	r3, [r7, #28]
 80063c2:	4b28      	ldr	r3, [pc, #160]	; (8006464 <SEGGER_SYSVIEW_Start+0x16c>)
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	61bb      	str	r3, [r7, #24]
 80063c8:	e00b      	b.n	80063e2 <SEGGER_SYSVIEW_Start+0xea>
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	1c59      	adds	r1, r3, #1
 80063d2:	61f9      	str	r1, [r7, #28]
 80063d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063d8:	b2d2      	uxtb	r2, r2
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	09db      	lsrs	r3, r3, #7
 80063e0:	61bb      	str	r3, [r7, #24]
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	2b7f      	cmp	r3, #127	; 0x7f
 80063e6:	d8f0      	bhi.n	80063ca <SEGGER_SYSVIEW_Start+0xd2>
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	61fa      	str	r2, [r7, #28]
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	b2d2      	uxtb	r2, r2
 80063f2:	701a      	strb	r2, [r3, #0]
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	617b      	str	r3, [r7, #20]
 80063fc:	2300      	movs	r3, #0
 80063fe:	613b      	str	r3, [r7, #16]
 8006400:	e00b      	b.n	800641a <SEGGER_SYSVIEW_Start+0x122>
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	b2da      	uxtb	r2, r3
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	1c59      	adds	r1, r3, #1
 800640a:	6179      	str	r1, [r7, #20]
 800640c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006410:	b2d2      	uxtb	r2, r2
 8006412:	701a      	strb	r2, [r3, #0]
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	09db      	lsrs	r3, r3, #7
 8006418:	613b      	str	r3, [r7, #16]
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b7f      	cmp	r3, #127	; 0x7f
 800641e:	d8f0      	bhi.n	8006402 <SEGGER_SYSVIEW_Start+0x10a>
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	617a      	str	r2, [r7, #20]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	b2d2      	uxtb	r2, r2
 800642a:	701a      	strb	r2, [r3, #0]
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006430:	2218      	movs	r2, #24
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7ff fc67 	bl	8005d08 <_SendPacket>
      RECORD_END();
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006440:	4b08      	ldr	r3, [pc, #32]	; (8006464 <SEGGER_SYSVIEW_Start+0x16c>)
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006448:	4b06      	ldr	r3, [pc, #24]	; (8006464 <SEGGER_SYSVIEW_Start+0x16c>)
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800644e:	f000 f9eb 	bl	8006828 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006452:	f000 f9b1 	bl	80067b8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006456:	f000 fc83 	bl	8006d60 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800645a:	bf00      	nop
 800645c:	3730      	adds	r7, #48	; 0x30
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20014264 	.word	0x20014264
 8006468:	080070d0 	.word	0x080070d0
 800646c:	20014294 	.word	0x20014294

08006470 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006476:	f3ef 8311 	mrs	r3, BASEPRI
 800647a:	f04f 0120 	mov.w	r1, #32
 800647e:	f381 8811 	msr	BASEPRI, r1
 8006482:	607b      	str	r3, [r7, #4]
 8006484:	480b      	ldr	r0, [pc, #44]	; (80064b4 <SEGGER_SYSVIEW_Stop+0x44>)
 8006486:	f7ff fb4c 	bl	8005b22 <_PreparePacket>
 800648a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800648c:	4b0a      	ldr	r3, [pc, #40]	; (80064b8 <SEGGER_SYSVIEW_Stop+0x48>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d007      	beq.n	80064a4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006494:	220b      	movs	r2, #11
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6838      	ldr	r0, [r7, #0]
 800649a:	f7ff fc35 	bl	8005d08 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800649e:	4b06      	ldr	r3, [pc, #24]	; (80064b8 <SEGGER_SYSVIEW_Stop+0x48>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f383 8811 	msr	BASEPRI, r3
}
 80064aa:	bf00      	nop
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	20014294 	.word	0x20014294
 80064b8:	20014264 	.word	0x20014264

080064bc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08c      	sub	sp, #48	; 0x30
 80064c0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80064c2:	f3ef 8311 	mrs	r3, BASEPRI
 80064c6:	f04f 0120 	mov.w	r1, #32
 80064ca:	f381 8811 	msr	BASEPRI, r1
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	4845      	ldr	r0, [pc, #276]	; (80065e8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80064d2:	f7ff fb26 	bl	8005b22 <_PreparePacket>
 80064d6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064e0:	4b42      	ldr	r3, [pc, #264]	; (80065ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80064e6:	e00b      	b.n	8006500 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80064e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ee:	1c59      	adds	r1, r3, #1
 80064f0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80064f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fc:	09db      	lsrs	r3, r3, #7
 80064fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	2b7f      	cmp	r3, #127	; 0x7f
 8006504:	d8f0      	bhi.n	80064e8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800650c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]
 8006512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006514:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
 800651a:	4b34      	ldr	r3, [pc, #208]	; (80065ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	623b      	str	r3, [r7, #32]
 8006520:	e00b      	b.n	800653a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	b2da      	uxtb	r2, r3
 8006526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006528:	1c59      	adds	r1, r3, #1
 800652a:	6279      	str	r1, [r7, #36]	; 0x24
 800652c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006530:	b2d2      	uxtb	r2, r2
 8006532:	701a      	strb	r2, [r3, #0]
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	09db      	lsrs	r3, r3, #7
 8006538:	623b      	str	r3, [r7, #32]
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	2b7f      	cmp	r3, #127	; 0x7f
 800653e:	d8f0      	bhi.n	8006522 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	627a      	str	r2, [r7, #36]	; 0x24
 8006546:	6a3a      	ldr	r2, [r7, #32]
 8006548:	b2d2      	uxtb	r2, r2
 800654a:	701a      	strb	r2, [r3, #0]
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	61fb      	str	r3, [r7, #28]
 8006554:	4b25      	ldr	r3, [pc, #148]	; (80065ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	61bb      	str	r3, [r7, #24]
 800655a:	e00b      	b.n	8006574 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	b2da      	uxtb	r2, r3
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	1c59      	adds	r1, r3, #1
 8006564:	61f9      	str	r1, [r7, #28]
 8006566:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800656a:	b2d2      	uxtb	r2, r2
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	09db      	lsrs	r3, r3, #7
 8006572:	61bb      	str	r3, [r7, #24]
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	2b7f      	cmp	r3, #127	; 0x7f
 8006578:	d8f0      	bhi.n	800655c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	61fa      	str	r2, [r7, #28]
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	b2d2      	uxtb	r2, r2
 8006584:	701a      	strb	r2, [r3, #0]
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	617b      	str	r3, [r7, #20]
 800658e:	2300      	movs	r3, #0
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	e00b      	b.n	80065ac <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	b2da      	uxtb	r2, r3
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	1c59      	adds	r1, r3, #1
 800659c:	6179      	str	r1, [r7, #20]
 800659e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	701a      	strb	r2, [r3, #0]
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	09db      	lsrs	r3, r3, #7
 80065aa:	613b      	str	r3, [r7, #16]
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	2b7f      	cmp	r3, #127	; 0x7f
 80065b0:	d8f0      	bhi.n	8006594 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	1c5a      	adds	r2, r3, #1
 80065b6:	617a      	str	r2, [r7, #20]
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80065c2:	2218      	movs	r2, #24
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	68b8      	ldr	r0, [r7, #8]
 80065c8:	f7ff fb9e 	bl	8005d08 <_SendPacket>
  RECORD_END();
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80065d2:	4b06      	ldr	r3, [pc, #24]	; (80065ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d002      	beq.n	80065e0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80065da:	4b04      	ldr	r3, [pc, #16]	; (80065ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	4798      	blx	r3
  }
}
 80065e0:	bf00      	nop
 80065e2:	3730      	adds	r7, #48	; 0x30
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	20014294 	.word	0x20014294
 80065ec:	20014264 	.word	0x20014264

080065f0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b092      	sub	sp, #72	; 0x48
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80065f8:	f3ef 8311 	mrs	r3, BASEPRI
 80065fc:	f04f 0120 	mov.w	r1, #32
 8006600:	f381 8811 	msr	BASEPRI, r1
 8006604:	617b      	str	r3, [r7, #20]
 8006606:	486a      	ldr	r0, [pc, #424]	; (80067b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006608:	f7ff fa8b 	bl	8005b22 <_PreparePacket>
 800660c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	647b      	str	r3, [r7, #68]	; 0x44
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	4b66      	ldr	r3, [pc, #408]	; (80067b4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	643b      	str	r3, [r7, #64]	; 0x40
 8006622:	e00b      	b.n	800663c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006626:	b2da      	uxtb	r2, r3
 8006628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800662a:	1c59      	adds	r1, r3, #1
 800662c:	6479      	str	r1, [r7, #68]	; 0x44
 800662e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006638:	09db      	lsrs	r3, r3, #7
 800663a:	643b      	str	r3, [r7, #64]	; 0x40
 800663c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800663e:	2b7f      	cmp	r3, #127	; 0x7f
 8006640:	d8f0      	bhi.n	8006624 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	647a      	str	r2, [r7, #68]	; 0x44
 8006648:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800664a:	b2d2      	uxtb	r2, r2
 800664c:	701a      	strb	r2, [r3, #0]
 800664e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006650:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	63bb      	str	r3, [r7, #56]	; 0x38
 800665c:	e00b      	b.n	8006676 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800665e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006660:	b2da      	uxtb	r2, r3
 8006662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006664:	1c59      	adds	r1, r3, #1
 8006666:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006668:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800666c:	b2d2      	uxtb	r2, r2
 800666e:	701a      	strb	r2, [r3, #0]
 8006670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006672:	09db      	lsrs	r3, r3, #7
 8006674:	63bb      	str	r3, [r7, #56]	; 0x38
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	2b7f      	cmp	r3, #127	; 0x7f
 800667a:	d8f0      	bhi.n	800665e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800667c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800667e:	1c5a      	adds	r2, r3, #1
 8006680:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006682:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006684:	b2d2      	uxtb	r2, r2
 8006686:	701a      	strb	r2, [r3, #0]
 8006688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800668a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	2220      	movs	r2, #32
 8006692:	4619      	mov	r1, r3
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f7ff f9f7 	bl	8005a88 <_EncodeStr>
 800669a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800669c:	2209      	movs	r2, #9
 800669e:	68f9      	ldr	r1, [r7, #12]
 80066a0:	6938      	ldr	r0, [r7, #16]
 80066a2:	f7ff fb31 	bl	8005d08 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	637b      	str	r3, [r7, #52]	; 0x34
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	4b40      	ldr	r3, [pc, #256]	; (80067b4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	633b      	str	r3, [r7, #48]	; 0x30
 80066ba:	e00b      	b.n	80066d4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80066bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c2:	1c59      	adds	r1, r3, #1
 80066c4:	6379      	str	r1, [r7, #52]	; 0x34
 80066c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	09db      	lsrs	r3, r3, #7
 80066d2:	633b      	str	r3, [r7, #48]	; 0x30
 80066d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d6:	2b7f      	cmp	r3, #127	; 0x7f
 80066d8:	d8f0      	bhi.n	80066bc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80066da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	637a      	str	r2, [r7, #52]	; 0x34
 80066e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	701a      	strb	r2, [r3, #0]
 80066e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80066f4:	e00b      	b.n	800670e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80066f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fc:	1c59      	adds	r1, r3, #1
 80066fe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006700:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	701a      	strb	r2, [r3, #0]
 8006708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670a:	09db      	lsrs	r3, r3, #7
 800670c:	62bb      	str	r3, [r7, #40]	; 0x28
 800670e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006710:	2b7f      	cmp	r3, #127	; 0x7f
 8006712:	d8f0      	bhi.n	80066f6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	62fa      	str	r2, [r7, #44]	; 0x2c
 800671a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	701a      	strb	r2, [r3, #0]
 8006720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006722:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	627b      	str	r3, [r7, #36]	; 0x24
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	623b      	str	r3, [r7, #32]
 800672e:	e00b      	b.n	8006748 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	b2da      	uxtb	r2, r3
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	1c59      	adds	r1, r3, #1
 8006738:	6279      	str	r1, [r7, #36]	; 0x24
 800673a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	09db      	lsrs	r3, r3, #7
 8006746:	623b      	str	r3, [r7, #32]
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	2b7f      	cmp	r3, #127	; 0x7f
 800674c:	d8f0      	bhi.n	8006730 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	627a      	str	r2, [r7, #36]	; 0x24
 8006754:	6a3a      	ldr	r2, [r7, #32]
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	61fb      	str	r3, [r7, #28]
 8006762:	2300      	movs	r3, #0
 8006764:	61bb      	str	r3, [r7, #24]
 8006766:	e00b      	b.n	8006780 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	b2da      	uxtb	r2, r3
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	1c59      	adds	r1, r3, #1
 8006770:	61f9      	str	r1, [r7, #28]
 8006772:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006776:	b2d2      	uxtb	r2, r2
 8006778:	701a      	strb	r2, [r3, #0]
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	09db      	lsrs	r3, r3, #7
 800677e:	61bb      	str	r3, [r7, #24]
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	2b7f      	cmp	r3, #127	; 0x7f
 8006784:	d8f0      	bhi.n	8006768 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	1c5a      	adds	r2, r3, #1
 800678a:	61fa      	str	r2, [r7, #28]
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	b2d2      	uxtb	r2, r2
 8006790:	701a      	strb	r2, [r3, #0]
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006796:	2215      	movs	r2, #21
 8006798:	68f9      	ldr	r1, [r7, #12]
 800679a:	6938      	ldr	r0, [r7, #16]
 800679c:	f7ff fab4 	bl	8005d08 <_SendPacket>
  RECORD_END();
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f383 8811 	msr	BASEPRI, r3
}
 80067a6:	bf00      	nop
 80067a8:	3748      	adds	r7, #72	; 0x48
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	20014294 	.word	0x20014294
 80067b4:	20014264 	.word	0x20014264

080067b8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80067bc:	4b07      	ldr	r3, [pc, #28]	; (80067dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d008      	beq.n	80067d6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80067c4:	4b05      	ldr	r3, [pc, #20]	; (80067dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80067ce:	4b03      	ldr	r3, [pc, #12]	; (80067dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	4798      	blx	r3
  }
}
 80067d6:	bf00      	nop
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20014264 	.word	0x20014264

080067e0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067e8:	f3ef 8311 	mrs	r3, BASEPRI
 80067ec:	f04f 0120 	mov.w	r1, #32
 80067f0:	f381 8811 	msr	BASEPRI, r1
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	480b      	ldr	r0, [pc, #44]	; (8006824 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80067f8:	f7ff f993 	bl	8005b22 <_PreparePacket>
 80067fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067fe:	2280      	movs	r2, #128	; 0x80
 8006800:	6879      	ldr	r1, [r7, #4]
 8006802:	6938      	ldr	r0, [r7, #16]
 8006804:	f7ff f940 	bl	8005a88 <_EncodeStr>
 8006808:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800680a:	220e      	movs	r2, #14
 800680c:	68f9      	ldr	r1, [r7, #12]
 800680e:	6938      	ldr	r0, [r7, #16]
 8006810:	f7ff fa7a 	bl	8005d08 <_SendPacket>
  RECORD_END();
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	f383 8811 	msr	BASEPRI, r3
}
 800681a:	bf00      	nop
 800681c:	3718      	adds	r7, #24
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	20014294 	.word	0x20014294

08006828 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006828:	b590      	push	{r4, r7, lr}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800682e:	4b15      	ldr	r3, [pc, #84]	; (8006884 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d01a      	beq.n	800686c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006836:	4b13      	ldr	r3, [pc, #76]	; (8006884 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d015      	beq.n	800686c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006840:	4b10      	ldr	r3, [pc, #64]	; (8006884 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4798      	blx	r3
 8006848:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800684c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800684e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006852:	f04f 0200 	mov.w	r2, #0
 8006856:	f04f 0300 	mov.w	r3, #0
 800685a:	000a      	movs	r2, r1
 800685c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800685e:	4613      	mov	r3, r2
 8006860:	461a      	mov	r2, r3
 8006862:	4621      	mov	r1, r4
 8006864:	200d      	movs	r0, #13
 8006866:	f7ff fbe5 	bl	8006034 <SEGGER_SYSVIEW_RecordU32x2>
 800686a:	e006      	b.n	800687a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800686c:	4b06      	ldr	r3, [pc, #24]	; (8006888 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4619      	mov	r1, r3
 8006872:	200c      	movs	r0, #12
 8006874:	f7ff fba2 	bl	8005fbc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006878:	bf00      	nop
 800687a:	bf00      	nop
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	bd90      	pop	{r4, r7, pc}
 8006882:	bf00      	nop
 8006884:	20014264 	.word	0x20014264
 8006888:	e0001004 	.word	0xe0001004

0800688c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006892:	f3ef 8311 	mrs	r3, BASEPRI
 8006896:	f04f 0120 	mov.w	r1, #32
 800689a:	f381 8811 	msr	BASEPRI, r1
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	4819      	ldr	r0, [pc, #100]	; (8006908 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80068a2:	f7ff f93e 	bl	8005b22 <_PreparePacket>
 80068a6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80068ac:	4b17      	ldr	r3, [pc, #92]	; (800690c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	617b      	str	r3, [r7, #20]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	613b      	str	r3, [r7, #16]
 80068be:	e00b      	b.n	80068d8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	1c59      	adds	r1, r3, #1
 80068c8:	6179      	str	r1, [r7, #20]
 80068ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068ce:	b2d2      	uxtb	r2, r2
 80068d0:	701a      	strb	r2, [r3, #0]
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	09db      	lsrs	r3, r3, #7
 80068d6:	613b      	str	r3, [r7, #16]
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	2b7f      	cmp	r3, #127	; 0x7f
 80068dc:	d8f0      	bhi.n	80068c0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	617a      	str	r2, [r7, #20]
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	b2d2      	uxtb	r2, r2
 80068e8:	701a      	strb	r2, [r3, #0]
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80068ee:	2202      	movs	r2, #2
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	68b8      	ldr	r0, [r7, #8]
 80068f4:	f7ff fa08 	bl	8005d08 <_SendPacket>
  RECORD_END();
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f383 8811 	msr	BASEPRI, r3
}
 80068fe:	bf00      	nop
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	20014294 	.word	0x20014294
 800690c:	e000ed04 	.word	0xe000ed04

08006910 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006916:	f3ef 8311 	mrs	r3, BASEPRI
 800691a:	f04f 0120 	mov.w	r1, #32
 800691e:	f381 8811 	msr	BASEPRI, r1
 8006922:	607b      	str	r3, [r7, #4]
 8006924:	4807      	ldr	r0, [pc, #28]	; (8006944 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006926:	f7ff f8fc 	bl	8005b22 <_PreparePacket>
 800692a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800692c:	2203      	movs	r2, #3
 800692e:	6839      	ldr	r1, [r7, #0]
 8006930:	6838      	ldr	r0, [r7, #0]
 8006932:	f7ff f9e9 	bl	8005d08 <_SendPacket>
  RECORD_END();
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f383 8811 	msr	BASEPRI, r3
}
 800693c:	bf00      	nop
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	20014294 	.word	0x20014294

08006948 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800694e:	f3ef 8311 	mrs	r3, BASEPRI
 8006952:	f04f 0120 	mov.w	r1, #32
 8006956:	f381 8811 	msr	BASEPRI, r1
 800695a:	607b      	str	r3, [r7, #4]
 800695c:	4807      	ldr	r0, [pc, #28]	; (800697c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800695e:	f7ff f8e0 	bl	8005b22 <_PreparePacket>
 8006962:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006964:	2212      	movs	r2, #18
 8006966:	6839      	ldr	r1, [r7, #0]
 8006968:	6838      	ldr	r0, [r7, #0]
 800696a:	f7ff f9cd 	bl	8005d08 <_SendPacket>
  RECORD_END();
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f383 8811 	msr	BASEPRI, r3
}
 8006974:	bf00      	nop
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	20014294 	.word	0x20014294

08006980 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006986:	f3ef 8311 	mrs	r3, BASEPRI
 800698a:	f04f 0120 	mov.w	r1, #32
 800698e:	f381 8811 	msr	BASEPRI, r1
 8006992:	607b      	str	r3, [r7, #4]
 8006994:	4807      	ldr	r0, [pc, #28]	; (80069b4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006996:	f7ff f8c4 	bl	8005b22 <_PreparePacket>
 800699a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800699c:	2211      	movs	r2, #17
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6838      	ldr	r0, [r7, #0]
 80069a2:	f7ff f9b1 	bl	8005d08 <_SendPacket>
  RECORD_END();
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f383 8811 	msr	BASEPRI, r3
}
 80069ac:	bf00      	nop
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	20014294 	.word	0x20014294

080069b8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b088      	sub	sp, #32
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069c0:	f3ef 8311 	mrs	r3, BASEPRI
 80069c4:	f04f 0120 	mov.w	r1, #32
 80069c8:	f381 8811 	msr	BASEPRI, r1
 80069cc:	617b      	str	r3, [r7, #20]
 80069ce:	4819      	ldr	r0, [pc, #100]	; (8006a34 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80069d0:	f7ff f8a7 	bl	8005b22 <_PreparePacket>
 80069d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80069da:	4b17      	ldr	r3, [pc, #92]	; (8006a38 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	61fb      	str	r3, [r7, #28]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	61bb      	str	r3, [r7, #24]
 80069ec:	e00b      	b.n	8006a06 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	1c59      	adds	r1, r3, #1
 80069f6:	61f9      	str	r1, [r7, #28]
 80069f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069fc:	b2d2      	uxtb	r2, r2
 80069fe:	701a      	strb	r2, [r3, #0]
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	09db      	lsrs	r3, r3, #7
 8006a04:	61bb      	str	r3, [r7, #24]
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	2b7f      	cmp	r3, #127	; 0x7f
 8006a0a:	d8f0      	bhi.n	80069ee <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	61fa      	str	r2, [r7, #28]
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	b2d2      	uxtb	r2, r2
 8006a16:	701a      	strb	r2, [r3, #0]
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006a1c:	2208      	movs	r2, #8
 8006a1e:	68f9      	ldr	r1, [r7, #12]
 8006a20:	6938      	ldr	r0, [r7, #16]
 8006a22:	f7ff f971 	bl	8005d08 <_SendPacket>
  RECORD_END();
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f383 8811 	msr	BASEPRI, r3
}
 8006a2c:	bf00      	nop
 8006a2e:	3720      	adds	r7, #32
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	20014294 	.word	0x20014294
 8006a38:	20014264 	.word	0x20014264

08006a3c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a44:	f3ef 8311 	mrs	r3, BASEPRI
 8006a48:	f04f 0120 	mov.w	r1, #32
 8006a4c:	f381 8811 	msr	BASEPRI, r1
 8006a50:	617b      	str	r3, [r7, #20]
 8006a52:	4819      	ldr	r0, [pc, #100]	; (8006ab8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006a54:	f7ff f865 	bl	8005b22 <_PreparePacket>
 8006a58:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a5e:	4b17      	ldr	r3, [pc, #92]	; (8006abc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	61fb      	str	r3, [r7, #28]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	61bb      	str	r3, [r7, #24]
 8006a70:	e00b      	b.n	8006a8a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	1c59      	adds	r1, r3, #1
 8006a7a:	61f9      	str	r1, [r7, #28]
 8006a7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a80:	b2d2      	uxtb	r2, r2
 8006a82:	701a      	strb	r2, [r3, #0]
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	09db      	lsrs	r3, r3, #7
 8006a88:	61bb      	str	r3, [r7, #24]
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a8e:	d8f0      	bhi.n	8006a72 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	61fa      	str	r2, [r7, #28]
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	b2d2      	uxtb	r2, r2
 8006a9a:	701a      	strb	r2, [r3, #0]
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006aa0:	2204      	movs	r2, #4
 8006aa2:	68f9      	ldr	r1, [r7, #12]
 8006aa4:	6938      	ldr	r0, [r7, #16]
 8006aa6:	f7ff f92f 	bl	8005d08 <_SendPacket>
  RECORD_END();
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f383 8811 	msr	BASEPRI, r3
}
 8006ab0:	bf00      	nop
 8006ab2:	3720      	adds	r7, #32
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	20014294 	.word	0x20014294
 8006abc:	20014264 	.word	0x20014264

08006ac0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8006acc:	f04f 0120 	mov.w	r1, #32
 8006ad0:	f381 8811 	msr	BASEPRI, r1
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	4819      	ldr	r0, [pc, #100]	; (8006b3c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006ad8:	f7ff f823 	bl	8005b22 <_PreparePacket>
 8006adc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ae2:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	61fb      	str	r3, [r7, #28]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	61bb      	str	r3, [r7, #24]
 8006af4:	e00b      	b.n	8006b0e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	1c59      	adds	r1, r3, #1
 8006afe:	61f9      	str	r1, [r7, #28]
 8006b00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b04:	b2d2      	uxtb	r2, r2
 8006b06:	701a      	strb	r2, [r3, #0]
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	09db      	lsrs	r3, r3, #7
 8006b0c:	61bb      	str	r3, [r7, #24]
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	2b7f      	cmp	r3, #127	; 0x7f
 8006b12:	d8f0      	bhi.n	8006af6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	61fa      	str	r2, [r7, #28]
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	b2d2      	uxtb	r2, r2
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006b24:	2206      	movs	r2, #6
 8006b26:	68f9      	ldr	r1, [r7, #12]
 8006b28:	6938      	ldr	r0, [r7, #16]
 8006b2a:	f7ff f8ed 	bl	8005d08 <_SendPacket>
  RECORD_END();
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f383 8811 	msr	BASEPRI, r3
}
 8006b34:	bf00      	nop
 8006b36:	3720      	adds	r7, #32
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	20014294 	.word	0x20014294
 8006b40:	20014264 	.word	0x20014264

08006b44 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b08a      	sub	sp, #40	; 0x28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b4e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b52:	f04f 0120 	mov.w	r1, #32
 8006b56:	f381 8811 	msr	BASEPRI, r1
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	4827      	ldr	r0, [pc, #156]	; (8006bfc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006b5e:	f7fe ffe0 	bl	8005b22 <_PreparePacket>
 8006b62:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b68:	4b25      	ldr	r3, [pc, #148]	; (8006c00 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	623b      	str	r3, [r7, #32]
 8006b7a:	e00b      	b.n	8006b94 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	1c59      	adds	r1, r3, #1
 8006b84:	6279      	str	r1, [r7, #36]	; 0x24
 8006b86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b8a:	b2d2      	uxtb	r2, r2
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	09db      	lsrs	r3, r3, #7
 8006b92:	623b      	str	r3, [r7, #32]
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	2b7f      	cmp	r3, #127	; 0x7f
 8006b98:	d8f0      	bhi.n	8006b7c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	627a      	str	r2, [r7, #36]	; 0x24
 8006ba0:	6a3a      	ldr	r2, [r7, #32]
 8006ba2:	b2d2      	uxtb	r2, r2
 8006ba4:	701a      	strb	r2, [r3, #0]
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	61fb      	str	r3, [r7, #28]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	61bb      	str	r3, [r7, #24]
 8006bb2:	e00b      	b.n	8006bcc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	1c59      	adds	r1, r3, #1
 8006bbc:	61f9      	str	r1, [r7, #28]
 8006bbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bc2:	b2d2      	uxtb	r2, r2
 8006bc4:	701a      	strb	r2, [r3, #0]
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	09db      	lsrs	r3, r3, #7
 8006bca:	61bb      	str	r3, [r7, #24]
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	2b7f      	cmp	r3, #127	; 0x7f
 8006bd0:	d8f0      	bhi.n	8006bb4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	61fa      	str	r2, [r7, #28]
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	b2d2      	uxtb	r2, r2
 8006bdc:	701a      	strb	r2, [r3, #0]
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006be2:	2207      	movs	r2, #7
 8006be4:	68f9      	ldr	r1, [r7, #12]
 8006be6:	6938      	ldr	r0, [r7, #16]
 8006be8:	f7ff f88e 	bl	8005d08 <_SendPacket>
  RECORD_END();
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f383 8811 	msr	BASEPRI, r3
}
 8006bf2:	bf00      	nop
 8006bf4:	3728      	adds	r7, #40	; 0x28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20014294 	.word	0x20014294
 8006c00:	20014264 	.word	0x20014264

08006c04 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006c0c:	4b04      	ldr	r3, [pc, #16]	; (8006c20 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	1ad3      	subs	r3, r2, r3
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	20014264 	.word	0x20014264

08006c24 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b08c      	sub	sp, #48	; 0x30
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006c2e:	4b3b      	ldr	r3, [pc, #236]	; (8006d1c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d06d      	beq.n	8006d12 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006c36:	4b39      	ldr	r3, [pc, #228]	; (8006d1c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c40:	e008      	b.n	8006c54 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d007      	beq.n	8006c5e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c50:	3301      	adds	r3, #1
 8006c52:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c54:	79fb      	ldrb	r3, [r7, #7]
 8006c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d3f2      	bcc.n	8006c42 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006c5c:	e000      	b.n	8006c60 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006c5e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d055      	beq.n	8006d12 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c66:	f3ef 8311 	mrs	r3, BASEPRI
 8006c6a:	f04f 0120 	mov.w	r1, #32
 8006c6e:	f381 8811 	msr	BASEPRI, r1
 8006c72:	617b      	str	r3, [r7, #20]
 8006c74:	482a      	ldr	r0, [pc, #168]	; (8006d20 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006c76:	f7fe ff54 	bl	8005b22 <_PreparePacket>
 8006c7a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	627b      	str	r3, [r7, #36]	; 0x24
 8006c84:	79fb      	ldrb	r3, [r7, #7]
 8006c86:	623b      	str	r3, [r7, #32]
 8006c88:	e00b      	b.n	8006ca2 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	1c59      	adds	r1, r3, #1
 8006c92:	6279      	str	r1, [r7, #36]	; 0x24
 8006c94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c98:	b2d2      	uxtb	r2, r2
 8006c9a:	701a      	strb	r2, [r3, #0]
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	09db      	lsrs	r3, r3, #7
 8006ca0:	623b      	str	r3, [r7, #32]
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	2b7f      	cmp	r3, #127	; 0x7f
 8006ca6:	d8f0      	bhi.n	8006c8a <SEGGER_SYSVIEW_SendModule+0x66>
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006caa:	1c5a      	adds	r2, r3, #1
 8006cac:	627a      	str	r2, [r7, #36]	; 0x24
 8006cae:	6a3a      	ldr	r2, [r7, #32]
 8006cb0:	b2d2      	uxtb	r2, r2
 8006cb2:	701a      	strb	r2, [r3, #0]
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	61fb      	str	r3, [r7, #28]
 8006cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	61bb      	str	r3, [r7, #24]
 8006cc2:	e00b      	b.n	8006cdc <SEGGER_SYSVIEW_SendModule+0xb8>
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	1c59      	adds	r1, r3, #1
 8006ccc:	61f9      	str	r1, [r7, #28]
 8006cce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cd2:	b2d2      	uxtb	r2, r2
 8006cd4:	701a      	strb	r2, [r3, #0]
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	09db      	lsrs	r3, r3, #7
 8006cda:	61bb      	str	r3, [r7, #24]
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	2b7f      	cmp	r3, #127	; 0x7f
 8006ce0:	d8f0      	bhi.n	8006cc4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	1c5a      	adds	r2, r3, #1
 8006ce6:	61fa      	str	r2, [r7, #28]
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2280      	movs	r2, #128	; 0x80
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f7fe fec4 	bl	8005a88 <_EncodeStr>
 8006d00:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006d02:	2216      	movs	r2, #22
 8006d04:	68f9      	ldr	r1, [r7, #12]
 8006d06:	6938      	ldr	r0, [r7, #16]
 8006d08:	f7fe fffe 	bl	8005d08 <_SendPacket>
      RECORD_END();
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006d12:	bf00      	nop
 8006d14:	3730      	adds	r7, #48	; 0x30
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	2001428c 	.word	0x2001428c
 8006d20:	20014294 	.word	0x20014294

08006d24 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006d2a:	4b0c      	ldr	r3, [pc, #48]	; (8006d5c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00f      	beq.n	8006d52 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006d32:	4b0a      	ldr	r3, [pc, #40]	; (8006d5c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d002      	beq.n	8006d46 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1f2      	bne.n	8006d38 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006d52:	bf00      	nop
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	2001428c 	.word	0x2001428c

08006d60 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006d66:	f3ef 8311 	mrs	r3, BASEPRI
 8006d6a:	f04f 0120 	mov.w	r1, #32
 8006d6e:	f381 8811 	msr	BASEPRI, r1
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	4817      	ldr	r0, [pc, #92]	; (8006dd4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006d76:	f7fe fed4 	bl	8005b22 <_PreparePacket>
 8006d7a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	617b      	str	r3, [r7, #20]
 8006d84:	4b14      	ldr	r3, [pc, #80]	; (8006dd8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	613b      	str	r3, [r7, #16]
 8006d8a:	e00b      	b.n	8006da4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	b2da      	uxtb	r2, r3
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	1c59      	adds	r1, r3, #1
 8006d94:	6179      	str	r1, [r7, #20]
 8006d96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d9a:	b2d2      	uxtb	r2, r2
 8006d9c:	701a      	strb	r2, [r3, #0]
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	09db      	lsrs	r3, r3, #7
 8006da2:	613b      	str	r3, [r7, #16]
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	2b7f      	cmp	r3, #127	; 0x7f
 8006da8:	d8f0      	bhi.n	8006d8c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	617a      	str	r2, [r7, #20]
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	b2d2      	uxtb	r2, r2
 8006db4:	701a      	strb	r2, [r3, #0]
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006dba:	221b      	movs	r2, #27
 8006dbc:	6879      	ldr	r1, [r7, #4]
 8006dbe:	68b8      	ldr	r0, [r7, #8]
 8006dc0:	f7fe ffa2 	bl	8005d08 <_SendPacket>
  RECORD_END();
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f383 8811 	msr	BASEPRI, r3
}
 8006dca:	bf00      	nop
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20014294 	.word	0x20014294
 8006dd8:	20014290 	.word	0x20014290

08006ddc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08a      	sub	sp, #40	; 0x28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006de4:	f3ef 8311 	mrs	r3, BASEPRI
 8006de8:	f04f 0120 	mov.w	r1, #32
 8006dec:	f381 8811 	msr	BASEPRI, r1
 8006df0:	617b      	str	r3, [r7, #20]
 8006df2:	4827      	ldr	r0, [pc, #156]	; (8006e90 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006df4:	f7fe fe95 	bl	8005b22 <_PreparePacket>
 8006df8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006dfa:	2280      	movs	r2, #128	; 0x80
 8006dfc:	6879      	ldr	r1, [r7, #4]
 8006dfe:	6938      	ldr	r0, [r7, #16]
 8006e00:	f7fe fe42 	bl	8005a88 <_EncodeStr>
 8006e04:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	623b      	str	r3, [r7, #32]
 8006e0e:	e00b      	b.n	8006e28 <SEGGER_SYSVIEW_Warn+0x4c>
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	1c59      	adds	r1, r3, #1
 8006e18:	6279      	str	r1, [r7, #36]	; 0x24
 8006e1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e1e:	b2d2      	uxtb	r2, r2
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	09db      	lsrs	r3, r3, #7
 8006e26:	623b      	str	r3, [r7, #32]
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e2c:	d8f0      	bhi.n	8006e10 <SEGGER_SYSVIEW_Warn+0x34>
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	627a      	str	r2, [r7, #36]	; 0x24
 8006e34:	6a3a      	ldr	r2, [r7, #32]
 8006e36:	b2d2      	uxtb	r2, r2
 8006e38:	701a      	strb	r2, [r3, #0]
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	61fb      	str	r3, [r7, #28]
 8006e42:	2300      	movs	r3, #0
 8006e44:	61bb      	str	r3, [r7, #24]
 8006e46:	e00b      	b.n	8006e60 <SEGGER_SYSVIEW_Warn+0x84>
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	b2da      	uxtb	r2, r3
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	1c59      	adds	r1, r3, #1
 8006e50:	61f9      	str	r1, [r7, #28]
 8006e52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e56:	b2d2      	uxtb	r2, r2
 8006e58:	701a      	strb	r2, [r3, #0]
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	09db      	lsrs	r3, r3, #7
 8006e5e:	61bb      	str	r3, [r7, #24]
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	2b7f      	cmp	r3, #127	; 0x7f
 8006e64:	d8f0      	bhi.n	8006e48 <SEGGER_SYSVIEW_Warn+0x6c>
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	1c5a      	adds	r2, r3, #1
 8006e6a:	61fa      	str	r2, [r7, #28]
 8006e6c:	69ba      	ldr	r2, [r7, #24]
 8006e6e:	b2d2      	uxtb	r2, r2
 8006e70:	701a      	strb	r2, [r3, #0]
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006e76:	221a      	movs	r2, #26
 8006e78:	68f9      	ldr	r1, [r7, #12]
 8006e7a:	6938      	ldr	r0, [r7, #16]
 8006e7c:	f7fe ff44 	bl	8005d08 <_SendPacket>
  RECORD_END();
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f383 8811 	msr	BASEPRI, r3
}
 8006e86:	bf00      	nop
 8006e88:	3728      	adds	r7, #40	; 0x28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	20014294 	.word	0x20014294

08006e94 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006e94:	b580      	push	{r7, lr}
 8006e96:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006e98:	4b13      	ldr	r3, [pc, #76]	; (8006ee8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006e9a:	7e1b      	ldrb	r3, [r3, #24]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	4a13      	ldr	r2, [pc, #76]	; (8006eec <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	440b      	add	r3, r1
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	4413      	add	r3, r2
 8006eaa:	336c      	adds	r3, #108	; 0x6c
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	4b0e      	ldr	r3, [pc, #56]	; (8006ee8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006eb0:	7e1b      	ldrb	r3, [r3, #24]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	490d      	ldr	r1, [pc, #52]	; (8006eec <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	005b      	lsls	r3, r3, #1
 8006eba:	4403      	add	r3, r0
 8006ebc:	00db      	lsls	r3, r3, #3
 8006ebe:	440b      	add	r3, r1
 8006ec0:	3370      	adds	r3, #112	; 0x70
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d00b      	beq.n	8006ee0 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006ec8:	4b07      	ldr	r3, [pc, #28]	; (8006ee8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006eca:	789b      	ldrb	r3, [r3, #2]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d107      	bne.n	8006ee0 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006ed0:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006ed6:	f7fe fe31 	bl	8005b3c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006eda:	4b03      	ldr	r3, [pc, #12]	; (8006ee8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006ee0:	4b01      	ldr	r3, [pc, #4]	; (8006ee8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006ee2:	781b      	ldrb	r3, [r3, #0]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	20014264 	.word	0x20014264
 8006eec:	20014448 	.word	0x20014448

08006ef0 <__libc_init_array>:
 8006ef0:	b570      	push	{r4, r5, r6, lr}
 8006ef2:	4d0d      	ldr	r5, [pc, #52]	; (8006f28 <__libc_init_array+0x38>)
 8006ef4:	4c0d      	ldr	r4, [pc, #52]	; (8006f2c <__libc_init_array+0x3c>)
 8006ef6:	1b64      	subs	r4, r4, r5
 8006ef8:	10a4      	asrs	r4, r4, #2
 8006efa:	2600      	movs	r6, #0
 8006efc:	42a6      	cmp	r6, r4
 8006efe:	d109      	bne.n	8006f14 <__libc_init_array+0x24>
 8006f00:	4d0b      	ldr	r5, [pc, #44]	; (8006f30 <__libc_init_array+0x40>)
 8006f02:	4c0c      	ldr	r4, [pc, #48]	; (8006f34 <__libc_init_array+0x44>)
 8006f04:	f000 f83c 	bl	8006f80 <_init>
 8006f08:	1b64      	subs	r4, r4, r5
 8006f0a:	10a4      	asrs	r4, r4, #2
 8006f0c:	2600      	movs	r6, #0
 8006f0e:	42a6      	cmp	r6, r4
 8006f10:	d105      	bne.n	8006f1e <__libc_init_array+0x2e>
 8006f12:	bd70      	pop	{r4, r5, r6, pc}
 8006f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f18:	4798      	blx	r3
 8006f1a:	3601      	adds	r6, #1
 8006f1c:	e7ee      	b.n	8006efc <__libc_init_array+0xc>
 8006f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f22:	4798      	blx	r3
 8006f24:	3601      	adds	r6, #1
 8006f26:	e7f2      	b.n	8006f0e <__libc_init_array+0x1e>
 8006f28:	080070e4 	.word	0x080070e4
 8006f2c:	080070e4 	.word	0x080070e4
 8006f30:	080070e4 	.word	0x080070e4
 8006f34:	080070e8 	.word	0x080070e8

08006f38 <memcmp>:
 8006f38:	b530      	push	{r4, r5, lr}
 8006f3a:	3901      	subs	r1, #1
 8006f3c:	2400      	movs	r4, #0
 8006f3e:	42a2      	cmp	r2, r4
 8006f40:	d101      	bne.n	8006f46 <memcmp+0xe>
 8006f42:	2000      	movs	r0, #0
 8006f44:	e005      	b.n	8006f52 <memcmp+0x1a>
 8006f46:	5d03      	ldrb	r3, [r0, r4]
 8006f48:	3401      	adds	r4, #1
 8006f4a:	5d0d      	ldrb	r5, [r1, r4]
 8006f4c:	42ab      	cmp	r3, r5
 8006f4e:	d0f6      	beq.n	8006f3e <memcmp+0x6>
 8006f50:	1b58      	subs	r0, r3, r5
 8006f52:	bd30      	pop	{r4, r5, pc}

08006f54 <memcpy>:
 8006f54:	440a      	add	r2, r1
 8006f56:	4291      	cmp	r1, r2
 8006f58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006f5c:	d100      	bne.n	8006f60 <memcpy+0xc>
 8006f5e:	4770      	bx	lr
 8006f60:	b510      	push	{r4, lr}
 8006f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f6a:	4291      	cmp	r1, r2
 8006f6c:	d1f9      	bne.n	8006f62 <memcpy+0xe>
 8006f6e:	bd10      	pop	{r4, pc}

08006f70 <memset>:
 8006f70:	4402      	add	r2, r0
 8006f72:	4603      	mov	r3, r0
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d100      	bne.n	8006f7a <memset+0xa>
 8006f78:	4770      	bx	lr
 8006f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f7e:	e7f9      	b.n	8006f74 <memset+0x4>

08006f80 <_init>:
 8006f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f82:	bf00      	nop
 8006f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f86:	bc08      	pop	{r3}
 8006f88:	469e      	mov	lr, r3
 8006f8a:	4770      	bx	lr

08006f8c <_fini>:
 8006f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8e:	bf00      	nop
 8006f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f92:	bc08      	pop	{r3}
 8006f94:	469e      	mov	lr, r3
 8006f96:	4770      	bx	lr
